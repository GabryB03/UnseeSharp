<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsmResolver.PE</name>
    </assembly>
    <members>
        <member name="T:AsmResolver.PE.Builder.IPEFileBuilder">
            <summary>
            Provides members for constructing a PE file from a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Builder.IPEFileBuilder.CreateFile(AsmResolver.PE.IPEImage)">
            <summary>
            Assembles a new PE file based on a PE image.
            </summary>
            <param name="image">The image to assemble.</param>
            <returns>The assembled PE file.</returns>
        </member>
        <member name="T:AsmResolver.PE.Builder.PEFileBuilderBase`1">
            <summary>
            Provides a base for a PE file builder.
            </summary>
            <typeparam name="TContext">The type that this builder uses to store intermediate values in.</typeparam>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.CreateFile(AsmResolver.PE.IPEImage)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.CreateContext(AsmResolver.PE.IPEImage)">
            <summary>
            Creates a new context for temporary storage of intermediate values during the construction of a PE image.
            </summary>
            <param name="image">The image to build.</param>
            <returns>The context.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.CreateSections(AsmResolver.PE.IPEImage,`0)">
            <summary>
            Creates the sections of the PE image.
            </summary>
            <param name="image">The image to create sections for.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>The sections.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.CreateDataDirectories(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Creates the data directory headers stored in the optional header of the PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file that contains the sections.</param>
            <param name="image">The image to create the data directories for.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>The data directories.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.GetEntryPointAddress(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Gets the relative virtual address (RVA) to the entry point of the PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file containing the entry point.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>The relative virtual address to the entry point.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.GetFileAlignment(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Gets the file alignment for the new PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to be aligned.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>The file alignment. This should be a power of 2 between 512 and 64,000.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.GetSectionAlignment(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Gets the section alignment for the new PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to be aligned.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>
            The section alignment. Must be greater or equal to the file alignment. Default is the page size for
            the architecture.
            </returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.GetImageBase(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Gets the image base for the new PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to determine the image base for.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
            <returns>The image base.</returns>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.ComputeHeaderFields(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Updates the fields in the file header and optional header of the PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to update.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.ComputeOptionalHeaderFields(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Updates the fields in the optional header of the PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to update.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
        </member>
        <member name="M:AsmResolver.PE.Builder.PEFileBuilderBase`1.ComputeFileHeaderFields(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,`0)">
            <summary>
            Updates the fields in the file header of the PE file.
            </summary>
            <param name="peFile">The (incomplete) PE file to update.</param>
            <param name="image">The image that the PE file was based on.</param>
            <param name="context">The object containing the intermediate values used during the PE file construction.</param>
        </member>
        <member name="T:AsmResolver.PE.Code.AddressFixup">
            <summary>
            Provides information about a symbol referenced within a segment for which the final RVA is yet to be determined.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixup.#ctor(System.UInt32,AsmResolver.PE.Code.AddressFixupType,AsmResolver.ISymbol)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.Code.AddressFixup"/> structure.
            </summary>
            <param name="offset">The offset relative to the start of the code segment pointing to the reference.</param>
            <param name="type">The type of fixup to apply at the offset.</param>
            <param name="referencedObject">The reference to write the RVA for.</param>
        </member>
        <member name="P:AsmResolver.PE.Code.AddressFixup.Offset">
            <summary>
            Gets the offset relative to the start of the code segment pointing to the reference.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Code.AddressFixup.Type">
            <summary>
            Gets the type of fixup to apply at the offset.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Code.AddressFixup.Symbol">
            <summary>
            Gets the object that is referenced at the offset.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixup.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Code.AddressFixupExtensions">
            <summary>
            Provides extensions to <see cref="T:AsmResolver.Patching.PatchedSegment"/> that adds patch overloads to quickly construct instances of
            <see cref="T:AsmResolver.PE.Code.AddressFixupPatch"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixupExtensions.Patch(AsmResolver.Patching.PatchedSegment,System.UInt32,AsmResolver.PE.Code.AddressFixupType,AsmResolver.ISymbol)">
            <summary>
            Adds an address fixup to the list of patches to apply.
            </summary>
            <param name="segment">The segment to add the patch to.</param>
            <param name="relativeOffset">The offset to start writing the address at, relative to the start of the segment.</param>
            <param name="type">The type of address to write.</param>
            <param name="referencedObject">The reference to write the RVA for.</param>
            <returns>The patched segment.</returns>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixupExtensions.Patch(AsmResolver.Patching.PatchedSegment,System.UInt32,AsmResolver.PE.Code.AddressFixupType,System.UInt32)">
            <summary>
            Adds an address fixup to the list of patches to apply.
            </summary>
            <param name="segment">The segment to add the patch to.</param>
            <param name="relativeOffset">The offset to start writing the address at, relative to the start of the segment.</param>
            <param name="type">The type of address to write.</param>
            <param name="symbolOffset">The offset within the segment to point to, relative to the start of the segment.</param>
            <returns>The patched segment.</returns>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixupExtensions.Patch(AsmResolver.Patching.PatchedSegment,AsmResolver.PE.Code.AddressFixup@)">
            <summary>
            Adds an address fixup to the list of patches to apply.
            </summary>
            <param name="segment">The segment to add the patch to.</param>
            <param name="fixup">The fixup to apply.</param>
            <returns>The patched segment.</returns>
        </member>
        <member name="T:AsmResolver.PE.Code.AddressFixupPatch">
            <summary>
            Implements a patch that patches a segment with an address to a symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixupPatch.#ctor(AsmResolver.PE.Code.AddressFixup)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.Code.AddressFixupPatch"/> class.
            </summary>
            <param name="fixup">The fixup to apply.</param>
        </member>
        <member name="P:AsmResolver.PE.Code.AddressFixupPatch.Fixup">
            <summary>
            Gets the fixup to apply.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.AddressFixupPatch.Apply(AsmResolver.Patching.PatchContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Code.AddressFixupType">
            <summary>
            Defines all possible address fixup types that can be applied in an <see cref="T:AsmResolver.ISegment"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Code.AddressFixupType.Absolute32BitAddress">
            <summary>
            Indicates the fixup writes a 32-bit absolute address at the provided offset.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Code.AddressFixupType.Absolute64BitAddress">
            <summary>
            Indicates the fixup writes a 64-bit absolute address at the provided offset.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Code.AddressFixupType.Relative32BitAddress">
            <summary>
            Indicates the fixup writes a 32-bit address relative to the instruction pointer at the provided offset.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Code.CodeSegment">
            <summary>
            Represents a chunk of native code in a portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.CodeSegment.#ctor(System.Byte[])">
            <summary>
            Creates a new segment of native code.
            </summary>
            <param name="code">The raw native code stream.</param>
        </member>
        <member name="M:AsmResolver.PE.Code.CodeSegment.#ctor(System.UInt64,System.Byte[])">
            <summary>
            Creates a new segment of native code.
            </summary>
            <param name="imageBase">The base address of the image the segment is going to be stored in.</param>
            <param name="code">The raw native code stream.</param>
        </member>
        <member name="P:AsmResolver.PE.Code.CodeSegment.ImageBase">
            <summary>
            Gets the base address of the image the segment is stored in.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Code.CodeSegment.Code">
            <summary>
            Gets or sets the raw native code stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Code.CodeSegment.AddressFixups">
            <summary>
            Gets a collection of fixups that need to be applied upon writing the code to the output stream.
            This includes addresses to imported symbols and global fields stored in data sections.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Code.CodeSegment.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Code.CodeSegment.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Code.CodeSegment.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer">
            <summary>
            Provides a mechanism for building a debug directory in a portable executable (PE) file.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.ContentsTable">
            <summary>
            Gets the segment buffer that contains all the data streams referenced by the debug directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.IsEmpty">
            <summary>
            Gets a value indicating whether the buffer has no entries added to it.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.AddEntry(AsmResolver.PE.Debug.DebugDataEntry)">
            <summary>
            Adds a debug data entry to the buffer.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.Builder.DebugDirectoryBuffer.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.CodeView.CodeViewDataSegment">
            <summary>
            Represents a debug data stream using the CodeView format
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.CodeViewDataSegment.Signature">
            <summary>
            Get uniquely identifying signature for PDB format
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.CodeViewDataSegment.Type">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CodeView.CodeViewDataSegment.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new CodeViewDataSegment depending on CodeView Signature
            </summary>
            <param name="context">Context for the reader</param>
            <param name="reader">The input stream to read from.</param>
            <returns></returns>
        </member>
        <member name="T:AsmResolver.PE.Debug.CodeView.CodeViewSignature">
            <summary>
            Enum of the different CodeView Signatures
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.CodeViewSignature.Rsds">
            <summary>
            RSDS Format Signature
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.CodeViewSignature.Nb05">
            <summary>
            NB05 Format Signature
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.CodeViewSignature.Nb09">
            <summary>
            NB09 Format Signature
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.CodeViewSignature.Nb10">
            <summary>
            NB10 Format Signature
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.CodeViewSignature.Nb11">
            <summary>
            NB11 Format Signature
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Debug.CodeView.RsdsDataSegment">
            <summary>
            Represents the CodeView data in RSDS format
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.RsdsExpectedDataSize">
            <summary>
            Gets the minimal expected data size for the rsds format
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Initializes a new instance of <see cref="T:AsmResolver.PE.Debug.CodeView.RsdsDataSegment"/>
            </summary>
            <param name="context">Context for the reader</param>
            <param name="reader">The input stream to read from.</param>
            <returns></returns>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.Signature">
            <summary>
            Gets the PDB Signature
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.Guid">
            <summary>
            Gets or sets the PDB GUID
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.Age">
            <summary>
            Gets or sets the PDB age
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.Path">
            <summary>
            Gets or sets the PDB path
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CodeView.RsdsDataSegment.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.CustomDebugDataSegment">
            <summary>
            Represents a debug data stream with a custom or unsupported format, wrapping an instance of <see cref="T:AsmResolver.ISegment"/>
            into a <see cref="T:AsmResolver.PE.Debug.IDebugDataSegment"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.CustomDebugDataSegment.#ctor(AsmResolver.PE.Debug.DebugDataType,AsmResolver.ISegment)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.Debug.CustomDebugDataSegment"/> class.
            </summary>
            <param name="type">The format of the data.</param>
            <param name="contents">The contents of the code.</param>
        </member>
        <member name="P:AsmResolver.PE.Debug.CustomDebugDataSegment.Type">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Debug.CustomDebugDataSegment.Contents">
            <summary>
            Gets or sets the raw data of the segment.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.CustomDebugDataSegment.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Debug.CustomDebugDataSegment.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Debug.CustomDebugDataSegment.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CustomDebugDataSegment.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CustomDebugDataSegment.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CustomDebugDataSegment.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.CustomDebugDataSegment.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.DebugDataEntry">
            <summary>
            Represents a single entry in the debug data directory.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataEntry.DebugDataEntryHeaderSize">
            <summary>
            Gets the static size of a single debug data entry header.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.DebugDataEntry.#ctor">
            <summary>
            Initializes an empty <see cref="T:AsmResolver.PE.Debug.DebugDataEntry"/> instance.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.DebugDataEntry.#ctor(AsmResolver.PE.Debug.IDebugDataSegment)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.Debug.DebugDataEntry"/> class.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="P:AsmResolver.PE.Debug.DebugDataEntry.Characteristics">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.DebugDataEntry.TimeDateStamp">
            <summary>
            Gets or sets the time and date that the debug data was created.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.DebugDataEntry.MajorVersion">
            <summary>
            Gets or sets the major version number of the debug data format.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.DebugDataEntry.MinorVersion">
            <summary>
            Gets or sets the minor version number of the debug data format.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.DebugDataEntry.Contents">
            <summary>
            Gets or sets the raw contents of the debug data entry.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.DebugDataEntry.GetContents">
            <summary>
            Obtains the contents of the entry.
            </summary>
            <returns>The contents.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Debug.DebugDataEntry.Contents"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Debug.DebugDataEntry.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Debug.DebugDataEntry.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.DebugDataType">
            <summary>
            Provides members defining all possible debug type data that is stored in a debug directory entry.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Unknown">
            <summary>
            Indicates an unknown value that is ignored by all tools. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Coff">
            <summary>
            Indicates the COFF debug information (line numbers, symbol table, and string table).
            This type of debug information is also pointed to by fields in the file headers. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.CodeView">
            <summary>
            Indicates the Visual C++ debug information type.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Fpo">
            <summary>
            Indicates frame pointer omission (FPO) information. This information tells the debugger how to
            interpret nonstandard stack frames, which use the EBP register for a purpose other than as a frame pointer. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Misc">
            <summary>
            Indicates the location of a DBG file. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Exception">
            <summary>
            Indicates a copy of .pdata section. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.FixUp">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.OMapToSrc">
            <summary>
            Indicates a mapping from an RVA in image to an RVA in source image. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.OMapFromSrc">
            <summary>
            Indicates a mapping from an RVA in source image to an RVA in image. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Borland">
            <summary>
            Reserved for Borland.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Reserved10">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.ClsId">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.VcFeature">
            <summary>
            Indicates additional Visual C++ debug information.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Pogo">
            <summary>
            Indicates Profile Guided Optimization data.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Iltcg">
            <summary>
            Indicates Look into Incremental Link Time Code Generation (ILTCG) data. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Mpx">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.Repro">
            <summary>
            Indicates PE determinism or reproducibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Debug.DebugDataType.ExDllCharacteristics">
            <summary>
            Indicates extended DLL characteristics bits.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Debug.DefaultDebugDataReader">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.PE.Debug.IDebugDataReader"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.DefaultDebugDataReader.ReadDebugData(AsmResolver.PE.PEReaderContext,AsmResolver.PE.Debug.DebugDataType,AsmResolver.IO.BinaryStreamReader@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Debug.IDebugDataReader">
            <summary>
            Provides members for reading a stream stored in the debug data directory of a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.IDebugDataReader.ReadDebugData(AsmResolver.PE.PEReaderContext,AsmResolver.PE.Debug.DebugDataType,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads the contents of a single debug data entry.
            </summary>
            <param name="context">The reader context.</param>
            <param name="type">The type of data.</param>
            <param name="reader">The input stream to read from.</param>
            <returns>The debug data, or <c>null</c> if the debug data could not be read.</returns>
        </member>
        <member name="T:AsmResolver.PE.Debug.IDebugDataSegment">
            <summary>
            Represents a segment referenced by an entry in a debug data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Debug.IDebugDataSegment.Type">
            <summary>
            Gets the type of debug data stored in the segment.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Debug.SerializedDebugDataEntry">
            <summary>
            Provides an implementation of a debug data entry that was stored in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Debug.SerializedDebugDataEntry.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single debug data entry from an input stream.
            </summary>
            <param name="context">The reading context.</param>
            <param name="directoryReader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.PE.Debug.SerializedDebugDataEntry.GetContents">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer">
            <summary>
            Provides a mechanism for building a segment in a PE file containing .NET metadata.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.#ctor(AsmResolver.PE.DotNet.IDotNetDirectory)">
            <summary>
            Creates a new .NET segment buffer.
            </summary>
            <param name="dotNetDirectory">The .NET directory to base it on.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.DotNetDirectory">
            <summary>
            Gets the .NET directory header.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.FieldRvaTable">
            <summary>
            Gets a table containing all constants used as initial values for fields defined in the .NET assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.MethodBodyTable">
            <summary>
            Gets a table containing method bodies for methods defined in the .NET assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.DotNetSegmentBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder">
            <summary>
            Provides a mechanism for constructing PE files from images containing .NET metadata.
            </summary>
            <remarks>
            <para>
            This PE builder is focused on .NET images only, and assumes that every input PE image is either a fully .NET
            image with only architecture independent code (CIL), or contains native methods that are fully well-defined,
            i.e. they are represented by a single segment. Any method definition in the metadata table that references a
            native method body of which the size is not explicitly defined will cause an exception. This class also might
            replace rows in the method and/or field RVA metadata tables with new ones containing the updated references to
            method bodies and/or field data. All remaining metadata in the tables stream and in the other metadata streams
            is written as-is without any change or verification.
            </para>
            <para>
            This class might modify the final imports directory (exposed by the <see cref="P:AsmResolver.PE.IPEImage.Imports"/> property),
            as well as the base relocations directory (exposed by the <see cref="P:AsmResolver.PE.IPEImage.Relocations"/> property). In
            particular, it might add or remove the entry to <c>mscoree.dll!_CorExeMain</c> or <c>mscoree.dll!_CorDllMain</c>,
            depending on the machine type specified by the <see cref="P:AsmResolver.PE.IPEImage.MachineType"/> property.
            </para>
            <para>
            This class builds up at most four PE sections; <c>.text</c>, <c>.sdata</c>, <c>.rsrc</c> and <c>.reloc</c>,
            similar to what a normal .NET language compiler would emit. Almost everything is put into the .text section,
            including the import and debug directories. The win32 resources are put into <c>.rsrc</c> section, and this
            section will only be added if there is at least one entry in the root resource directory of the
            <see cref="P:AsmResolver.PE.IPEImage.Resources"/> property. Similarly, the <c>.sdata</c> section is only added if at least
            one unmanaged export is added to the PE image. Finally, the <c>.reloc</c> section is only added if at least
            one base relocation was put into the directory, or when the CLR bootstrapper requires one.
            </para>
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext">
            <summary>
            Provides a working space for constructing a managed portable executable file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.#ctor(AsmResolver.PE.IPEImage)">
            <summary>
            Creates a new managed PE file builder context.
            </summary>
            <param name="image">The image to build.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.ImportDirectory">
            <summary>
            Gets the buffer that builds up a new import lookup and address directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.ExportDirectory">
            <summary>
            Gets the buffer that builds up a new export directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.DebugDirectory">
            <summary>
            Gets the buffer that builds up a new debug directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.DotNetSegment">
            <summary>
            Gets the buffer that builds up all .NET metadata related segments, including metadata, method bodies
            and field data.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.ResourceDirectory">
            <summary>
            Gets the buffer that builds up the win32 resources directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.RelocationsDirectory">
            <summary>
            Gets the buffer that builds up the base relocations directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.Platform">
            <summary>
            Gets the target platform of the image.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.Bootstrapper">
            <summary>
            Gets the code segment used as a native entry point of the resulting PE file.
            </summary>
            <remarks>
            This property might be <c>null</c> if no bootstrapper is to be emitted. For example, since the
            bootstrapper is a legacy feature from older versions of the CLR, we do not see this segment in
            managed PE files targeting 64-bit architectures.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext.FieldRvaDataReader">
            <summary>
            Gets the object responsible for reading a field RVA data.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateContext(AsmResolver.PE.IPEImage)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateSections(AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateTextSection(AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <summary>
            Builds up the main text section (.text) of the new .NET PE file.
            </summary>
            <param name="image">The image to build.</param>
            <param name="context">The working space of the builder.</param>
            <returns>The .text section.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateSDataSection(AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <summary>
            Creates the .sdata section containing the exports and vtables directory of the new .NET PE file.
            </summary>
            <param name="image">The image to build.</param>
            <param name="context">The working space of the builder.</param>
            <returns>The section.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateRsrcSection(AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <summary>
            Creates the win32 resources section (.rsrc) of the new .NET PE file.
            </summary>
            <param name="image">The image to build.</param>
            <param name="context">The working space of the builder.</param>
            <returns>The resources section.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateRelocSection(AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext,System.Collections.Generic.IReadOnlyList{AsmResolver.PE.Relocations.BaseRelocation})">
            <summary>
            Creates the base relocations section (.reloc) of the new .NET PE file.
            </summary>
            <param name="context">The working space of the builder.</param>
            <param name="relocations">The working space of the builder.</param>
            <returns>The base relocations section.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.CreateDataDirectories(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.GetEntryPointAddress(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.GetFileAlignment(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.GetSectionAlignment(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.GetImageBase(AsmResolver.PE.File.PEFile,AsmResolver.PE.IPEImage,AsmResolver.PE.DotNet.Builder.ManagedPEFileBuilder.ManagedPEBuilderContext)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer">
            <summary>
            Provides a mechanism for building up a method body table that can be stored in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.#ctor">
            <summary>
            Creates a new method body table buffer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.AddCilBody(AsmResolver.PE.DotNet.Cil.CilRawMethodBody)">
            <summary>
            Adds a CIL method body to the buffer.
            </summary>
            <param name="body">The method body to add.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.AddNativeBody(AsmResolver.ISegment,System.UInt32)">
            <summary>
            Adds a native method body to the buffer.
            </summary>
            <param name="body">The method body to add.</param>
            <param name="alignment">The byte-boundary to align the body to.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Builder.MethodBodyTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilAssembler">
            <summary>
            Provides a mechanism for encoding CIL instructions to an output stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilAssembler.#ctor(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Cil.ICilOperandBuilder)">
            <summary>
            Creates a new CIL instruction encoder.
            </summary>
            <param name="writer">The output stream to write the encoded instructions to.</param>
            <param name="operandBuilder">The object to use for creating raw operands.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilAssembler.#ctor(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Cil.ICilOperandBuilder,System.String,AsmResolver.IErrorListener)">
            <summary>
            Creates a new CIL instruction encoder.
            </summary>
            <param name="writer">The output stream to write the encoded instructions to.</param>
            <param name="operandBuilder">The object to use for creating raw operands.</param>
            <param name="methodBodyName">The name of the method that is being serialized.</param>
            <param name="errorListener">The object used for recording error listener.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilAssembler.#ctor(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Cil.ICilOperandBuilder,System.Func{System.String},AsmResolver.IErrorListener)">
            <summary>
            Creates a new CIL instruction encoder.
            </summary>
            <param name="writer">The output stream to write the encoded instructions to.</param>
            <param name="operandBuilder">The object to use for creating raw operands.</param>
            <param name="getMethodBodyName">A delegate that is used for lazily obtaining the name of the method body.</param>
            <param name="errorListener">The object used for recording error listener.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilAssembler.WriteInstructions(System.Collections.Generic.IList{AsmResolver.PE.DotNet.Cil.CilInstruction})">
            <summary>
            Writes a collection of CIL instructions to the output stream.
            </summary>
            <param name="instructions">The instructions to write.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilAssembler.WriteInstruction(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Writes a single instruction to the output stream.
            </summary>
            <param name="instruction">The instruction to write.</param>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilCode">
            <summary>
            Provides members defining all possible numerical values for each CIL operation code.
            </summary>
            <remarks>
            See also: <seealso href="https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Nop">
            <summary>
            Do nothing (No operation).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.nop?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Break">
            <summary>
            Inform a debugger that a breakpoint has been reached.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.break?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg_0">
            <summary>
            Load argument 0 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg_1">
            <summary>
            Load argument 1 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg_2">
            <summary>
            Load argument 2 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg_3">
            <summary>
            Load argument 3 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc_0">
            <summary>
            Load local variable 0 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc_1">
            <summary>
            Load local variable 1 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc_2">
            <summary>
            Load local variable 2 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc_3">
            <summary>
            Load local variable 3 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc_0">
            <summary>
            Pop a value from stack into local variable 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc_1">
            <summary>
            Pop a value from stack into local variable 1.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc_2">
            <summary>
            Pop a value from stack into local variable 2.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc_3">
            <summary>
            Pop a value from stack into local variable 3.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg_S">
            <summary>
            Load argument onto the stack, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarga_S">
            <summary>
            Fetch the address of argument, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarga_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Starg_S">
            <summary>
            Store value to the argument numbered, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.starg_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc_S">
            <summary>
            Load local variable of index onto stack, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloca_S">
            <summary>
            Load address of local variable with index, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloca_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc_S">
            <summary>
            Pop a value from stack into local variable with index, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldnull">
            <summary>
            Push a null reference on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldnull?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_M1">
            <summary>
            Push -1 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_m1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_0">
            <summary>
            Push 0 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_1">
            <summary>
            Push 1 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_2">
            <summary>
            Push 2 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_3">
            <summary>
            Push 3 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_4">
            <summary>
            Push 4 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_5">
            <summary>
            Push 5 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_5?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_6">
            <summary>
            Push 6 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_6?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_7">
            <summary>
            Push 7 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_7?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_8">
            <summary>
            Push 8 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4_S">
            <summary>
            Push num onto the stack as int32, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I4">
            <summary>
            Push num of type int32 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_I8">
            <summary>
            Push num of type int64 onto the stack as int64.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_R4">
            <summary>
            Push num of type float32 onto the stack as F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldc_R8">
            <summary>
            Push num of type float64 onto the stack as F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Dup">
            <summary>
            Duplicate the value on the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.dup?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Pop">
            <summary>
            Pop value from the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.pop?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Jmp">
            <summary>
            Exit current method and jump to the specified method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.jmp?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Call">
            <summary>
            Call method described by method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.call?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Calli">
            <summary>
            Call method indicated on the stack with arguments described by a calling convention.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.calli?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ret">
            <summary>
            Return from method, possibly with a value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ret?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Br_S">
            <summary>
            Branch to target, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.br_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Brfalse_S">
            <summary>
            Branch to target if value is zero (false), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brfalse_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Brtrue_S">
            <summary>
            Branch to target if value is non-zero (true), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brtrue_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Beq_S">
            <summary>
            Branch to target if equal, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.beq_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bge_S">
            <summary>
            Branch to target if greater than or equal to, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bgt_S">
            <summary>
            Branch to target if greater than, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ble_S">
            <summary>
            Branch to target if less than or equal to, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Blt_S">
            <summary>
            Branch to target if less than, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bne_Un_S">
            <summary>
            Branch to target if unequal or unordered, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bne_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bge_Un_S">
            <summary>
            Branch to target if greater than or equal to (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bgt_Un_S">
            <summary>
            Branch to target if greater than (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ble_Un_S">
            <summary>
            Branch to target if less than or equal to (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Blt_Un_S">
            <summary>
            Branch to target if less than (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Br">
            <summary>
            Branch to target.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.br?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Brfalse">
            <summary>
            Branch to target if value is zero (false).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brfalse?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Brtrue">
            <summary>
            Branch to target if value is non-zero (true).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brtrue?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Beq">
            <summary>
            Branch to target if equal.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.beq?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bge">
            <summary>
            Branch to target if greater than or equal to.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bgt">
            <summary>
            Branch to target if greater than.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ble">
            <summary>
            Branch to target if less than or equal to.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Blt">
            <summary>
            Branch to target if less than.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bne_Un">
            <summary>
            Branch to target if unequal or unordered.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bne_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bge_Un">
            <summary>
            Branch to target if greater than or equal to (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Bgt_Un">
            <summary>
            Branch to target if greater than (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ble_Un">
            <summary>
            Branch to target if less than or equal to (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Blt_Un">
            <summary>
            Branch to target if less than (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Switch">
            <summary>
            Jump to one of n values.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.switch?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_I1">
            <summary>
            Indirect load value of type int8 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_U1">
            <summary>
            Indirect load value of type unsigned int8 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_I2">
            <summary>
            Indirect load value of type int16 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_U2">
            <summary>
            Indirect load value of type unsigned int16 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_I4">
            <summary>
            Indirect load value of type int32 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_U4">
            <summary>
            Indirect load value of type unsigned int32 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_I8">
            <summary>
            Indirect load value of type signed or unsigned int64 as signed int64 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_I">
            <summary>
            Indirect load value of type native int as native int on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_R4">
            <summary>
            Indirect load value of type float32 as F on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_R8">
            <summary>
            Indirect load value of type float64 as F on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldind_Ref">
            <summary>
            Indirect load value of type object ref as O on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_Ref">
            <summary>
            Store value of type object ref (type O) into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_I1">
            <summary>
            Store value of type int8 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_I2">
            <summary>
            Store value of type int16 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_I4">
            <summary>
            Store value of type int32 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_I8">
            <summary>
            Store value of type int64 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_R4">
            <summary>
            Store value of type float32 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_R8">
            <summary>
            Store value of type float64 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Add">
            <summary>
            Add two values, returning a new value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Sub">
            <summary>
            Subtract value2 from value1, returning a new value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Mul">
            <summary>
            Multiply values.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Div">
            <summary>
            Divide two values to return a quotient or floating-point result.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.div?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Div_Un">
            <summary>
            Divide two values, unsigned, returning a quotient.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.div_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Rem">
            <summary>
            Remainder when dividing one value by another.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Rem_Un">
            <summary>
            Remainder when dividing one unsigned value by another.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.And">
            <summary>
            Bitwise AND of two integral values, returns an integral value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.and?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Or">
            <summary>
            Bitwise OR of two integer values, returns an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.or?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Xor">
            <summary>
            Bitwise XOR of integer values, returns an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.xor?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Shl">
            <summary>
            Shift an integer left (shifting in zeros), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shl?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Shr">
            <summary>
            Shift an integer right (shift in sign), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Shr_Un">
            <summary>
            Shift an integer right (shift in zero), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shr_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Neg">
            <summary>
            Negate value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.neg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Not">
            <summary>
            Bitwise complement (logical not).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.not?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_I1">
            <summary>
            Convert to int8, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_I2">
            <summary>
            Convert to int16, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_I4">
            <summary>
            Convert to int32, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_I8">
            <summary>
            Convert to int64, pushing int64 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_R4">
            <summary>
            Convert to float32, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_R8">
            <summary>
            Convert to float64, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_U4">
            <summary>
            Convert to unsigned int32, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_U8">
            <summary>
            Convert to unsigned int64, pushing int64 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Callvirt">
            <summary>
            Call a method associated with an object.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.callvirt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Cpobj">
            <summary>
            Copy a value type from src to dest.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cpobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldobj">
            <summary>
            Copy the value stored at address src to the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldstr">
            <summary>
            Push a string object for the literal string.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldstr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Newobj">
            <summary>
            Allocate an uninitialized object or value type and call ctor.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.newobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Castclass">
            <summary>
            Cast obj to class.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.castclass?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Isinst">
            <summary>
            Test if obj is an instance of class, returning null or an instance of that class or interface.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.isinst?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_R_Un">
            <summary>
            Convert unsigned integer to floating-point, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Unbox">
            <summary>
            Extract a value-type from obj, its boxed representation, and push a controlled-mutability managed pointer to it to the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unbox?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Throw">
            <summary>
            Throw an exception.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.throw?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldfld">
            <summary>
            Push the value of field of object (or value type) obj, onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldflda">
            <summary>
            Push the address of field of object obj on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldflda?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stfld">
            <summary>
            Replace the value of field of the object obj with value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldsfld">
            <summary>
            Push the value of the static field on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldsfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldsflda">
            <summary>
            Push the address of the static field, field, on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldsflda?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stsfld">
            <summary>
            Replace the value of the static field.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stsfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stobj">
            <summary>
            Store a value at an address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I1_Un">
            <summary>
            Convert unsigned to an int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i1_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I2_Un">
            <summary>
            Convert unsigned to an int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i2_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I4_Un">
            <summary>
            Convert unsigned to an int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i4_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I8_Un">
            <summary>
            Convert unsigned to an int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i8_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U1_Un">
            <summary>
            Convert unsigned to an unsigned int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u1_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U2_Un">
            <summary>
            Convert unsigned to an unsigned int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u2_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U4_Un">
            <summary>
            Convert unsigned to an unsigned int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u4_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U8_Un">
            <summary>
            Convert unsigned to an unsigned int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u8_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I_Un">
            <summary>
            Convert unsigned to a native int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U_Un">
            <summary>
            Convert unsigned to a native unsigned int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Box">
            <summary>
            Convert a boxable value to its boxed form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.box?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Newarr">
            <summary>
            Create a new array with elements of type etype.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.newarr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldlen">
            <summary>
            Push the length (of type native unsigned int) of array on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldlen?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelema">
            <summary>
            Load the address of element at index onto the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelema?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_I1">
            <summary>
            Load the element with type int8 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_U1">
            <summary>
            Load the element with type unsigned int8 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_I2">
            <summary>
            Load the element with type int16 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_U2">
            <summary>
            Load the element with type unsigned int16 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_I4">
            <summary>
            Load the element with type int32 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_U4">
            <summary>
            Load the element with type unsigned int32 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_I8">
            <summary>
            Load the element with type signed or unsigned int64 at index onto the top of the stack as a signed int64.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_I">
            <summary>
            Load the element with type native int at index onto the top of the stack as a native int.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_R4">
            <summary>
            Load the element with type float32 at index onto the top of the stack as an F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_R8">
            <summary>
            Load the element with type float64 at index onto the top of the stack as an F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem_Ref">
            <summary>
            Load the element at index onto the top of the stack as an O. The type of the O is the same as the element type of the array pushed on the CIL stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_I">
            <summary>
            Replace array element at index with the i value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_I1">
            <summary>
            Replace array element at index with the int8 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_I2">
            <summary>
            Replace array element at index with the int16 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_I4">
            <summary>
            Replace array element at index with the int32 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_I8">
            <summary>
            Replace array element at index with the int64 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_R4">
            <summary>
            Replace array element at index with the float32 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_R8">
            <summary>
            Replace array element at index with the float64 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem_Ref">
            <summary>
            Replace array element at index with the ref value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldelem">
            <summary>
            Load the element at index onto the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stelem">
            <summary>
            Replace array element at index with the value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Unbox_Any">
            <summary>
            Extract a value-type from obj, its boxed representation, and copy to the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unbox_any?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I1">
            <summary>
            Convert to an int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U1">
            <summary>
            Convert to an unsigned int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I2">
            <summary>
            Convert to an int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U2">
            <summary>
            Convert to an unsigned int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I4">
            <summary>
            Convert to an int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U4">
            <summary>
            Convert to an unsigned int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I8">
            <summary>
            Convert to an int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U8">
            <summary>
            Convert to an unsigned int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Refanyval">
            <summary>
            Push the address stored in a typed reference.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.refanyval?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ckfinite">
            <summary>
            Throw ArithmeticException if value is not a finite number.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ckfinite?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Mkrefany">
            <summary>
            Push a typed reference to ptr of type class onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mkrefany?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldtoken">
            <summary>
            Convert metadata token to its runtime representation.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldtoken?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_U2">
            <summary>
            Convert to unsigned int16, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_U1">
            <summary>
            Convert to unsigned int8, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_I">
            <summary>
            Convert to native int, pushing native int on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_I">
            <summary>
            Convert to a native int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_Ovf_U">
            <summary>
            Convert to a native unsigned int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Add_Ovf">
            <summary>
            Add signed integer values with overflow check.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Add_Ovf_Un">
            <summary>
            Add unsigned integer values with overflow check.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Mul_Ovf">
            <summary>
            Multiply signed integer values. Signed result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Mul_Ovf_Un">
            <summary>
            Multiply unsigned integer values. Unsigned result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Sub_Ovf">
            <summary>
            Subtract native int from a native int. Signed result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Sub_Ovf_Un">
            <summary>
            Subtract native unsigned int from a native unsigned int. Unsigned result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Endfinally">
            <summary>
            End finally clause of an exception block.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.endfinally?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Leave">
            <summary>
            Exit a protected region of code.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.leave?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Leave_S">
            <summary>
            Exit a protected region of code, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.leave_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stind_I">
            <summary>
            Store value of type native int into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Conv_U">
            <summary>
            Convert to native unsigned int, pushing native int on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix7">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix7?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix6">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix6?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix5">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix5?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix4">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix3">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix2">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefix1">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Prefixref">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime 
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefixref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Arglist">
            <summary>
            Return argument list handle for the current method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.arglist?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ceq">
            <summary>
            Push 1 (of type int32) if value1 equals value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ceq?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Cgt">
            <summary>
            Push 1 (of type int32) if value1 greater that value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cgt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Cgt_Un">
            <summary>
            Push 1 (of type int32) if value1 greater that value2, unsigned or unordered, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cgt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Clt">
            <summary>
            Push 1 (of type int32) if value1 lower than value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.clt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Clt_Un">
            <summary>
            Push 1 (of type int32) if value1 lower than value2, unsigned or unordered, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.clt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldftn">
            <summary>
            Push a pointer to a method referenced by method, on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldftn?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldvirtftn">
            <summary>
            Push address of virtual method on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldvirtftn?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarg">
            <summary>
            Load argument onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldarga">
            <summary>
            Fetch the address of the argument indexed.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarga?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Starg">
            <summary>
            Store value to the argument.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.starg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloc">
            <summary>
            Load local variable of index onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Ldloca">
            <summary>
            Load address of local variable with index index.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloca?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Stloc">
            <summary>
            Pop a value from stack into local variable index.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Localloc">
            <summary>
            Allocate space from the local memory pool.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.localloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Endfilter">
            <summary>
            End an exception handling filter clause.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.endfilter?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Unaligned">
            <summary>
            Subsequent pointer instruction might be unaligned.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unaligned?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Volatile">
            <summary>
            Subsequent pointer reference is volatile.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.volatile?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Tailcall">
            <summary>
            Subsequent call terminates current method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.tailcall?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Initobj">
            <summary>
            Initialize the value at address dest.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.initobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Constrained">
            <summary>
            Call a virtual method on a type constrained to be type T.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.constrained?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Cpblk">
            <summary>
            Copy data from memory to memory.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cpblk?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Initblk">
            <summary>
            Set all bytes in a block of memory to a given byte value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.initblk?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Rethrow">
            <summary>
            Rethrow the current exception.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rethrow?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Sizeof">
            <summary>
            Push the size, in bytes, of a type as an unsigned int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sizeof?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Refanytype">
            <summary>
            Push the type token stored in a typed reference.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.refanytype?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilCode.Readonly">
            <summary>
            Specify that the subsequent array address operation performs no type check at runtime, and that it returns a controlled-mutability managed pointer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.readonly?view=net-6.0"/>
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilCodeExtensions">
            <summary>
            Provides extensions for the <see cref="T:AsmResolver.PE.DotNet.Cil.CilCode"/> enum.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilCodeExtensions.ToOpCode(AsmResolver.PE.DotNet.Cil.CilCode)">
            <summary>
            Transforms the raw CIL code to a <see cref="T:AsmResolver.PE.DotNet.Cil.CilOpCode"/>.
            </summary>
            <param name="code">The code to convert.</param>
            <returns>The operation code.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilDisassembler">
            <summary>
            Provides a mechanism for decoding CIL instructions from an input stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilDisassembler.#ctor(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new CIL disassembler using the provided input stream.
            </summary>
            <param name="reader">The input stream to read the code from.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilDisassembler.#ctor(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Cil.ICilOperandResolver)">
            <summary>
            Creates a new CIL disassembler using the provided input stream.
            </summary>
            <param name="reader">The input stream to read the code from.</param>
            <param name="operandResolver">The object responsible for resolving operands.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilDisassembler.ResolveBranchTargets">
            <summary>
            Gets or sets a value indicating whether branch targets should be resolved to
            <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstructionLabel"/> where possible.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilDisassembler.ReadInstructions">
            <summary>
            Reads all instructions from the input stream.
            </summary>
            <returns>The instructions.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilDisassembler.ReadInstruction">
            <summary>
            Reads the next instruction from the input stream.
            </summary>
            <returns>The instruction.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilExtraSection">
            <summary>
            Represents a single section that is appended to the end of a CIL method body, containing additional metadata
            such as exception handlers.
            </summary>
            <remarks>
            This class does not do any verification on the actual contents of the section.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilExtraSection.#ctor(AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes,System.Byte[])">
            <summary>
            Creates a new extra section that can be appended to a method body.
            </summary>
            <param name="attributes">The attributes associated to this section.</param>
            <param name="data">The raw contents of the section.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.Attributes">
            <summary>
            Gets or sets the attributes associated to this section.
            </summary>
            <remarks>
            This property does not update automatically if more sections are added to- or removed from the enclosing
            method body.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.IsEHTable">
            <summary>
            Gets or sets a value indicating the section contains an exception handler table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.IsOptILTable">
            <summary>
            Gets or sets a value indicating the sectio contains an OptIL table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.IsFat">
            <summary>
            Gets or sets a value indicating the data stored in the section is using the fat format.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.HasMoreSections">
            <summary>
            Gets or sets a value indicating there is at least one more section following this section.
            </summary>
            <remarks>
            This property does not update automatically if more sections are added to- or removed from the enclosing
            method body.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilExtraSection.Data">
            <summary>
            Gets or sets the actual contents of the section.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilExtraSection.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single extra section from the provided input stream.
            </summary>
            <param name="reader">The input stream to read from.</param>
            <returns>The extra section that was read.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilExtraSection.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilExtraSection.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes">
            <summary>
            Defines all possible flags that an extra section in a method body can set.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes.EHTable">
            <summary>
            Indicates the extra section contains an exception handler table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes.OptILTable">
            <summary>
            Indicates the extra section contains an OptIL table (not supported anymore by the CLR).
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes.FatFormat">
            <summary>
            Indicates the extra section uses the fat format to store its data.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilExtraSectionAttributes.MoreSections">
            <summary>
            Indicates at least one more section follows this extra section.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilFlowControl">
            <summary>
            Provides members defining all flow control categories of a CIL operation code.  
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Branch">
            <summary>
            Indicates the operation is an unconditional branching operation.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Break">
            <summary>
            Indicates the operation is a debugger break operation.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Call">
            <summary>
            Indicates the operation calls a method, and returns afterwards to the next instruction.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.ConditionalBranch">
            <summary>
            Indicates the operation is a conditional branching operation.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Meta">
            <summary>
            Indicates the operation provides information about a subsequent instruction.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Next">
            <summary>
            Indicates the operation has no special flow control properties and will execute the next instruction
            in the instruction stream.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Phi">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Return">
            <summary>
            Indicates the operation exits the current method, and potentially returns a value.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilFlowControl.Throw">
            <summary>
            Indicates the operation throws an exception.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilInstruction">
            <summary>
            Represents a single instruction in a managed CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.#ctor(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Creates a new CIL instruction with no operand.
            </summary>
            <param name="opCode">The operation to perform.</param>
            <remarks>
            This constructor does not do any verification on the correctness of the instruction.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.#ctor(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Creates a new CIL instruction with no operand.
            </summary>
            <param name="offset">The offset of the instruction, relative to the start of the method body's code.</param>
            <param name="opCode">The operation to perform.</param>
            <remarks>
            This constructor does not do any verification on the correctness of the instruction.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.#ctor(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Object)">
            <summary>
            Creates a new CIL instruction with an operand..
            </summary>
            <param name="opCode">The operation to perform.</param>
            <param name="operand">The operand.</param>
            <remarks>
            This constructor does not do any verification on the correctness of the instruction.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.#ctor(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Object)">
            <summary>
            Creates a new CIL instruction with an operand..
            </summary>
            <param name="offset">The offset of the instruction, relative to the start of the method body's code.</param>
            <param name="opCode">The operation to perform.</param>
            <param name="operand">The operand.</param>
            <remarks>
            This constructor does not do any verification on the correctness of the instruction.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstruction.Offset">
            <summary>
            Gets or sets the offset to the start of the instruction, relative to the start of the code.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstruction.OpCode">
            <summary>
            Gets or sets the operation to perform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstruction.Operand">
            <summary>
            Gets or sets the operand of the instruction, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstruction.Size">
            <summary>
            Gets the size in bytes of the CIL instruction.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.CreateLdcI4(System.Int32)">
            <summary>
            Create a new instruction pushing the provided integer value, using the smallest possible operation code and
            operand size.
            </summary>
            <param name="value">The constant to push.</param>
            <returns>The instruction.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.GetLdcI4OpCodeOperand(System.Int32)">
            <summary>
            Determines the smallest possible operation code and operand required to push the provided integer constant.
            </summary>
            <param name="value">The constant to push.</param>
            <returns>The operation code and operand.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.Equals(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Determines whether the provided instruction is considered equal to the current instruction.
            </summary>
            <param name="other">The instruction to compare against.</param>
            <returns><c>true</c> if the instructions are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.CreateLabel">
            <summary>
            Creates a new label to the current instruction.
            </summary>
            <returns>The label.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsLdloc">
            <summary>
            Determines whether the instruction is using a variant of the ldloc opcodes.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsStloc">
            <summary>
            Determines whether the instruction is using a variant of the stloc opcodes.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsLdarg">
            <summary>
            Determines whether the instruction is using a variant of the ldarg opcodes.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsStarg">
            <summary>
            Determines whether the instruction is using a variant of the starg opcodes.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsBranch">
            <summary>
            Determines whether the instruction is a branching instruction (either conditional or unconditional).
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsUnconditionalBranch">
            <summary>
            Determines whether the instruction is an unconditional branch instruction.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsConditionalBranch">
            <summary>
            Determines whether the instruction is a conditional branch instruction.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.IsLdcI4">
            <summary>
            Determines whether the instruction is an instruction pushing an int32 constant onto the stack.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.GetLdcI4Constant">
            <summary>
            When this instruction is an ldc.i4 variant, gets the in32 constant that is being pushed onto the stack.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.ReplaceWith(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Replaces the operation code used by the instruction with a new one, and clears the operand.
            </summary>
            <param name="opCode">The new operation code.</param>
            <remarks>
            This method may be useful when patching a method body, where reusing the instruction object is favourable.
            This can prevent breaking any references to the instruction (e.g. branch or exception handler targets).
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.ReplaceWith(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Object)">
            <summary>
            Replaces the operation code and operand used by the instruction with new ones.
            </summary>
            <param name="opCode">The new operation code.</param>
            <param name="operand">The new operand.</param>
            <remarks>
            This method may be useful when patching a method body, where reusing the instruction object is favourable.
            This can prevent breaking any references to the instruction (e.g. branch or exception handler targets).
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstruction.ReplaceWithNop">
            <summary>
            Clears the operand and replaces the operation code with a <see cref="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Nop"/> (No-Operation).
            </summary>
            <remarks>
            This method may be useful when patching a method body, where reusing the instruction object is favourable.
            This can prevent breaking any references to the instruction (e.g. branch or exception handler targets).
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilInstructionCollectionExtensions">
            <summary>
            Provides extensions to collections of <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstruction"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionCollectionExtensions.GetIndexByOffset(System.Collections.Generic.IList{AsmResolver.PE.DotNet.Cil.CilInstruction},System.Int32)">
            <summary>
            Searches for an instruction with the given offset.
            </summary>
            <param name="self">The list of instructions.</param>
            <param name="offset">The offset of the instruction to find.</param>
            <returns>The index the instruction is located at, or -1 if an instruction with the provided offset could not
            be found.</returns>
            <remarks>Requires the offsets of the instructions pre-calculated.</remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionCollectionExtensions.GetByOffset(System.Collections.Generic.IList{AsmResolver.PE.DotNet.Cil.CilInstruction},System.Int32)">
            <summary>
            Searches for an instruction with the given offset.
            </summary>
            <param name="self">The list of instructions.</param>
            <param name="offset">The offset of the instruction to find.</param>
            <returns>The instruction with the provided offset, or null if none could be found.</returns>
            <remarks>Requires the offsets of the instructions pre-calculated.</remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter">
            <summary>
            Provides the default implementation of the <see cref="T:AsmResolver.PE.DotNet.Cil.ICilInstructionFormatter"/> interface.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.Instance">
            <summary>
            Gets the default instance of the <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatInstruction(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatLabel(System.Int32)">
            <summary>
            Formats a CIL offset as a label.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatOpCode(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Formats an operation code.
            </summary>
            <param name="opcode">The operation code to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatOperand(AsmResolver.PE.DotNet.Cil.CilOperandType,System.Object)">
            <summary>
            Formats an operand to a human readable string.
            </summary>
            <param name="operandType">The type of operand to format.</param>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the provided operand type is not valid.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatArgument(System.Object)">
            <summary>
            Formats an operand as an <see cref="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineArgument"/> or
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineArgument"/>.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatVariable(System.Object)">
            <summary>
            Formats an operand as an <see cref="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineVar"/> or
            <see cref="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineVar"/>.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatInteger(System.Object)">
            <summary>
            Formats an integer operand.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatFloat(System.Object)">
            <summary>
            Formats an integer operand.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatSignature(System.Object)">
            <summary>
            Formats a reference to a stand-alone signature.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatToken(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Formats a raw metadata token.
            </summary>
            <param name="token">The token to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatSwitch(System.Object)">
            <summary>
            Formats a switch table operand.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatString(System.Object)">
            <summary>
            Formats a string operand.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatBranchTarget(System.Object)">
            <summary>
            Formats a branch target operand.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionFormatter.FormatMember(System.Object)">
            <summary>
            Formats a reference to a member.
            </summary>
            <param name="operand">The operand to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilInstructionLabel">
            <summary>
            Represents a label that references an instruction by its instruction object in a CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.#ctor">
            <summary>
            Creates a new instruction label thar references no instruction yet.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.#ctor(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Creates a new instruction label.
            </summary>
            <param name="instruction">The instruction to reference.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.Instruction">
            <summary>
            Gets or sets the referenced instruction.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.Offset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.Equals(AsmResolver.PE.DotNet.Cil.ICilLabel)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilInstructionLabel.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes">
            <summary>
            Provides all possible flags that can be set in the first (two) byte(s) of a CIL method body.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes.Tiny">
            <summary>
            Indicates the method body is using the tiny format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes.Fat">
            <summary>
            Indicates the method body is using the fat format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes.MoreSections">
            <summary>
            Indicates more sections follow after the raw code of the method body.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes.InitLocals">
            <summary>
            Indicates all locals defined in the method body should be initialized to zero by the runtime.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilOffsetLabel">
            <summary>
            Represents a label to a CIL instruction referenced by a fixed offset relative to the start of the CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.#ctor(System.Int32)">
            <summary>
            Creates a new fixed offset CIL label.
            </summary>
            <param name="offset">The offset of the instruction to reference.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.Offset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.Equals(AsmResolver.PE.DotNet.Cil.ICilLabel)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOffsetLabel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilOpCode">
            <summary>
            Describes the operation that a single CIL instruction performs.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.op_Equality(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Determines whether two operation codes encode the same operation.
            </summary>
            <param name="a">The first operation code.</param>
            <param name="b">The second operation code.</param>
            <returns><c>true</c> if the same operation code is encoded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.op_Inequality(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Determines whether two operation codes do not encode the same operation.
            </summary>
            <param name="a">The first operation code.</param>
            <param name="b">The second operation code.</param>
            <returns><c>true</c> if a different operation code is encoded, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.Mnemonic">
            <summary>
            Gets the mnemonic of the operation code.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.Code">
            <summary>
            Gets the value of the operation code.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.IsLarge">
            <summary>
            Gets a value indicating whether the operation code is large or not. If this value is <c>true</c>, the code
            needs two bytes to be encoded, otherwise it only needs one.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.Size">
            <summary>
            Gets the size in bytes of the operation code.
            </summary>
            <remarks>
            This does not include the operand of the instruction.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.Byte1">
            <summary>
            Gets the first byte that appears in the instruction stream encoding this operation.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.Byte2">
            <summary>
            Gets the second byte that appears in the instruction stream encoding this operation.
            </summary>
            <remarks>
            This property only has meaning if <see cref="P:AsmResolver.PE.DotNet.Cil.CilOpCode.IsLarge"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.StackBehaviourPush">
            <summary>
            Gets a value indicating the stack push behaviour of the instruction.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.StackBehaviourPop">
            <summary>
            Gets a value indicating the stack pop behaviour of the instruction.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.OpCodeType">
            <summary>
            Gets a value indicating the category of the operation code.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.OperandType">
            <summary>
            Gets a value indicating the category of the operand.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilOpCode.FlowControl">
            <summary>
            Gets a value indicating the flow control behaviour of the operation.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.Equals(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Determines whether the provided operation code is encoding the same operation.
            </summary>
            <param name="other">The other operation code.</param>
            <returns><c>true</c> if the same operation code is encoded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilOpCode.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilOpCodes">
            <summary>
            Provides members defining the entire CIL instruction set.
            </summary>
            <remarks>
            See also: <seealso href="https://www.ecma-international.org/wp-content/uploads/ECMA-335_6th_edition_june_2012.pdf"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.SingleByteOpCodes">
            <summary>
            Gets a sorted list of all single-byte operation codes.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.MultiByteOpCodes">
            <summary>
            Gets a sorted list of all multi-byte operation codes.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Nop">
            <summary>
            Do nothing (No operation).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.nop?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Break">
            <summary>
            Inform a debugger that a breakpoint has been reached.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.break?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg_0">
            <summary>
            Load argument 0 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg_1">
            <summary>
            Load argument 1 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg_2">
            <summary>
            Load argument 2 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg_3">
            <summary>
            Load argument 3 onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc_0">
            <summary>
            Load local variable 0 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc_1">
            <summary>
            Load local variable 1 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc_2">
            <summary>
            Load local variable 2 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc_3">
            <summary>
            Load local variable 3 onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc_0">
            <summary>
            Pop a value from stack into local variable 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc_1">
            <summary>
            Pop a value from stack into local variable 1.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc_2">
            <summary>
            Pop a value from stack into local variable 2.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc_3">
            <summary>
            Pop a value from stack into local variable 3.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg_S">
            <summary>
            Load argument onto the stack, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarga_S">
            <summary>
            Fetch the address of argument, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarga_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Starg_S">
            <summary>
            Store value to the argument numbered, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.starg_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc_S">
            <summary>
            Load local variable of index onto stack, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloca_S">
            <summary>
            Load address of local variable with index, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloca_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc_S">
            <summary>
            Pop a value from stack into local variable with index, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldnull">
            <summary>
            Push a null reference on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldnull?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_M1">
            <summary>
            Push -1 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_m1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_0">
            <summary>
            Push 0 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_0?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_1">
            <summary>
            Push 1 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_2">
            <summary>
            Push 2 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_3">
            <summary>
            Push 3 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_4">
            <summary>
            Push 4 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_5">
            <summary>
            Push 5 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_5?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_6">
            <summary>
            Push 6 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_6?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_7">
            <summary>
            Push 7 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_7?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_8">
            <summary>
            Push 8 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4_S">
            <summary>
            Push num onto the stack as int32, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I4">
            <summary>
            Push num of type int32 onto the stack as int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_I8">
            <summary>
            Push num of type int64 onto the stack as int64.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_R4">
            <summary>
            Push num of type float32 onto the stack as F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldc_R8">
            <summary>
            Push num of type float64 onto the stack as F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldc_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Dup">
            <summary>
            Duplicate the value on the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.dup?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Pop">
            <summary>
            Pop value from the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.pop?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Jmp">
            <summary>
            Exit current method and jump to the specified method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.jmp?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Call">
            <summary>
            Call method described by method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.call?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Calli">
            <summary>
            Call method indicated on the stack with arguments described by a calling convention.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.calli?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ret">
            <summary>
            Return from method, possibly with a value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ret?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Br_S">
            <summary>
            Branch to target, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.br_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brfalse_S">
            <summary>
            Branch to target if value is zero (false), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brfalse_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brtrue_S">
            <summary>
            Branch to target if value is non-zero (true), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brtrue_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Beq_S">
            <summary>
            Branch to target if equal, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.beq_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_S">
            <summary>
            Branch to target if greater than or equal to, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_S">
            <summary>
            Branch to target if greater than, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_S">
            <summary>
            Branch to target if less than or equal to, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_S">
            <summary>
            Branch to target if less than, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bne_Un_S">
            <summary>
            Branch to target if unequal or unordered, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bne_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_Un_S">
            <summary>
            Branch to target if greater than or equal to (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_Un_S">
            <summary>
            Branch to target if greater than (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_Un_S">
            <summary>
            Branch to target if less than or equal to (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_Un_S">
            <summary>
            Branch to target if less than (unsigned or unordered), short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_un_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Br">
            <summary>
            Branch to target.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.br?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brfalse">
            <summary>
            Branch to target if value is zero (false).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brfalse?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Brtrue">
            <summary>
            Branch to target if value is non-zero (true).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.brtrue?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Beq">
            <summary>
            Branch to target if equal.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.beq?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge">
            <summary>
            Branch to target if greater than or equal to.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt">
            <summary>
            Branch to target if greater than.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble">
            <summary>
            Branch to target if less than or equal to.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt">
            <summary>
            Branch to target if less than.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bne_Un">
            <summary>
            Branch to target if unequal or unordered.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bne_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bge_Un">
            <summary>
            Branch to target if greater than or equal to (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bge_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Bgt_Un">
            <summary>
            Branch to target if greater than (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.bgt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ble_Un">
            <summary>
            Branch to target if less than or equal to (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ble_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Blt_Un">
            <summary>
            Branch to target if less than (unsigned or unordered).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.blt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Switch">
            <summary>
            Jump to one of n values.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.switch?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_I1">
            <summary>
            Indirect load value of type int8 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_U1">
            <summary>
            Indirect load value of type unsigned int8 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_I2">
            <summary>
            Indirect load value of type int16 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_U2">
            <summary>
            Indirect load value of type unsigned int16 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_I4">
            <summary>
            Indirect load value of type int32 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_U4">
            <summary>
            Indirect load value of type unsigned int32 as int32 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_I8">
            <summary>
            Indirect load value of type signed or unsigned int64 as signed int64 on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_I">
            <summary>
            Indirect load value of type native int as native int on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_R4">
            <summary>
            Indirect load value of type float32 as F on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_R8">
            <summary>
            Indirect load value of type float64 as F on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldind_Ref">
            <summary>
            Indirect load value of type object ref as O on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldind_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_Ref">
            <summary>
            Store value of type object ref (type O) into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_I1">
            <summary>
            Store value of type int8 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_I2">
            <summary>
            Store value of type int16 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_I4">
            <summary>
            Store value of type int32 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_I8">
            <summary>
            Store value of type int64 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_R4">
            <summary>
            Store value of type float32 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_R8">
            <summary>
            Store value of type float64 into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Add">
            <summary>
            Add two values, returning a new value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sub">
            <summary>
            Subtract value2 from value1, returning a new value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Mul">
            <summary>
            Multiply values.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Div">
            <summary>
            Divide two values to return a quotient or floating-point result.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.div?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Div_Un">
            <summary>
            Divide two values, unsigned, returning a quotient.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.div_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Rem">
            <summary>
            Remainder when dividing one value by another.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Rem_Un">
            <summary>
            Remainder when dividing one unsigned value by another.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rem_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.And">
            <summary>
            Bitwise AND of two integral values, returns an integral value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.and?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Or">
            <summary>
            Bitwise OR of two integer values, returns an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.or?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Xor">
            <summary>
            Bitwise XOR of integer values, returns an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.xor?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shl">
            <summary>
            Shift an integer left (shifting in zeros), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shl?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shr">
            <summary>
            Shift an integer right (shift in sign), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Shr_Un">
            <summary>
            Shift an integer right (shift in zero), return an integer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.shr_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Neg">
            <summary>
            Negate value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.neg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Not">
            <summary>
            Bitwise complement (logical not).
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.not?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_I1">
            <summary>
            Convert to int8, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_I2">
            <summary>
            Convert to int16, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_I4">
            <summary>
            Convert to int32, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_I8">
            <summary>
            Convert to int64, pushing int64 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_R4">
            <summary>
            Convert to float32, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_R8">
            <summary>
            Convert to float64, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_U4">
            <summary>
            Convert to unsigned int32, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_U8">
            <summary>
            Convert to unsigned int64, pushing int64 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Callvirt">
            <summary>
            Call a method associated with an object.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.callvirt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cpobj">
            <summary>
            Copy a value type from src to dest.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cpobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldobj">
            <summary>
            Copy the value stored at address src to the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldstr">
            <summary>
            Push a string object for the literal string.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldstr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Newobj">
            <summary>
            Allocate an uninitialized object or value type and call ctor.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.newobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Castclass">
            <summary>
            Cast obj to class.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.castclass?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Isinst">
            <summary>
            Test if obj is an instance of class, returning null or an instance of that class or interface.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.isinst?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_R_Un">
            <summary>
            Convert unsigned integer to floating-point, pushing F on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_r_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Unbox">
            <summary>
            Extract a value-type from obj, its boxed representation, and push a controlled-mutability managed pointer to it to the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unbox?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Throw">
            <summary>
            Throw an exception.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.throw?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldfld">
            <summary>
            Push the value of field of object (or value type) obj, onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldflda">
            <summary>
            Push the address of field of object obj on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldflda?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stfld">
            <summary>
            Replace the value of field of the object obj with value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldsfld">
            <summary>
            Push the value of the static field on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldsfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldsflda">
            <summary>
            Push the address of the static field, field, on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldsflda?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stsfld">
            <summary>
            Replace the value of the static field.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stsfld?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stobj">
            <summary>
            Store a value at an address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I1_Un">
            <summary>
            Convert unsigned to an int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i1_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I2_Un">
            <summary>
            Convert unsigned to an int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i2_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I4_Un">
            <summary>
            Convert unsigned to an int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i4_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I8_Un">
            <summary>
            Convert unsigned to an int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i8_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U1_Un">
            <summary>
            Convert unsigned to an unsigned int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u1_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U2_Un">
            <summary>
            Convert unsigned to an unsigned int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u2_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U4_Un">
            <summary>
            Convert unsigned to an unsigned int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u4_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U8_Un">
            <summary>
            Convert unsigned to an unsigned int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u8_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I_Un">
            <summary>
            Convert unsigned to a native int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U_Un">
            <summary>
            Convert unsigned to a native unsigned int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Box">
            <summary>
            Convert a boxable value to its boxed form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.box?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Newarr">
            <summary>
            Create a new array with elements of type etype.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.newarr?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldlen">
            <summary>
            Push the length (of type native unsigned int) of array on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldlen?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelema">
            <summary>
            Load the address of element at index onto the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelema?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_I1">
            <summary>
            Load the element with type int8 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_U1">
            <summary>
            Load the element with type unsigned int8 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_I2">
            <summary>
            Load the element with type int16 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_U2">
            <summary>
            Load the element with type unsigned int16 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_I4">
            <summary>
            Load the element with type int32 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_U4">
            <summary>
            Load the element with type unsigned int32 at index onto the top of the stack as an int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_I8">
            <summary>
            Load the element with type signed or unsigned int64 at index onto the top of the stack as a signed int64.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_I">
            <summary>
            Load the element with type native int at index onto the top of the stack as a native int.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_R4">
            <summary>
            Load the element with type float32 at index onto the top of the stack as an F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_R8">
            <summary>
            Load the element with type float64 at index onto the top of the stack as an F.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem_Ref">
            <summary>
            Load the element at index onto the top of the stack as an O. The type of the O is the same as the element type of the array pushed on the CIL stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_I">
            <summary>
            Replace array element at index with the i value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_I1">
            <summary>
            Replace array element at index with the int8 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_I2">
            <summary>
            Replace array element at index with the int16 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_I4">
            <summary>
            Replace array element at index with the int32 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_I8">
            <summary>
            Replace array element at index with the int64 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_R4">
            <summary>
            Replace array element at index with the float32 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_r4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_R8">
            <summary>
            Replace array element at index with the float64 value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_r8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem_Ref">
            <summary>
            Replace array element at index with the ref value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem_ref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldelem">
            <summary>
            Load the element at index onto the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldelem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stelem">
            <summary>
            Replace array element at index with the value on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stelem?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Unbox_Any">
            <summary>
            Extract a value-type from obj, its boxed representation, and copy to the top of the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unbox_any?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I1">
            <summary>
            Convert to an int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U1">
            <summary>
            Convert to an unsigned int8 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I2">
            <summary>
            Convert to an int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U2">
            <summary>
            Convert to an unsigned int16 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I4">
            <summary>
            Convert to an int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U4">
            <summary>
            Convert to an unsigned int32 (on the stack as int32) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I8">
            <summary>
            Convert to an int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U8">
            <summary>
            Convert to an unsigned int64 (on the stack as int64) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u8?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Refanyval">
            <summary>
            Push the address stored in a typed reference.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.refanyval?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ckfinite">
            <summary>
            Throw ArithmeticException if value is not a finite number.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ckfinite?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Mkrefany">
            <summary>
            Push a typed reference to ptr of type class onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mkrefany?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldtoken">
            <summary>
            Convert metadata token to its runtime representation.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldtoken?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_U2">
            <summary>
            Convert to unsigned int16, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_U1">
            <summary>
            Convert to unsigned int8, pushing int32 on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_I">
            <summary>
            Convert to native int, pushing native int on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_I">
            <summary>
            Convert to a native int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_Ovf_U">
            <summary>
            Convert to a native unsigned int (on the stack as native int) and throw an exception on overflow.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_ovf_u?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Add_Ovf">
            <summary>
            Add signed integer values with overflow check.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Add_Ovf_Un">
            <summary>
            Add unsigned integer values with overflow check.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.add_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Mul_Ovf">
            <summary>
            Multiply signed integer values. Signed result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Mul_Ovf_Un">
            <summary>
            Multiply unsigned integer values. Unsigned result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.mul_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sub_Ovf">
            <summary>
            Subtract native int from a native int. Signed result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub_ovf?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sub_Ovf_Un">
            <summary>
            Subtract native unsigned int from a native unsigned int. Unsigned result shall fit in same size.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sub_ovf_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Endfinally">
            <summary>
            End finally clause of an exception block.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.endfinally?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Leave">
            <summary>
            Exit a protected region of code.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.leave?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Leave_S">
            <summary>
            Exit a protected region of code, short form.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.leave_s?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stind_I">
            <summary>
            Store value of type native int into memory at address.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stind_i?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Conv_U">
            <summary>
            Convert to native unsigned int, pushing native int on stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.conv_u?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix7">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix7?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix6">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix6?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix5">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix5?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix4">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix4?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix3">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix3?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix2">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix2?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefix1">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefix1?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Prefixref">
            <summary>
            This prefix opcode is reserved and currently not implemented in the runtime
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.prefixref?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Arglist">
            <summary>
            Return argument list handle for the current method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.arglist?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ceq">
            <summary>
            Push 1 (of type int32) if value1 equals value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ceq?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cgt">
            <summary>
            Push 1 (of type int32) if value1 greater that value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cgt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cgt_Un">
            <summary>
            Push 1 (of type int32) if value1 greater that value2, unsigned or unordered, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cgt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Clt">
            <summary>
            Push 1 (of type int32) if value1 lower than value2, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.clt?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Clt_Un">
            <summary>
            Push 1 (of type int32) if value1 lower than value2, unsigned or unordered, else push 0.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.clt_un?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldftn">
            <summary>
            Push a pointer to a method referenced by method, on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldftn?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldvirtftn">
            <summary>
            Push address of virtual method on the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldvirtftn?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarg">
            <summary>
            Load argument onto the stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldarga">
            <summary>
            Fetch the address of the argument indexed.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldarga?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Starg">
            <summary>
            Store value to the argument.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.starg?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloc">
            <summary>
            Load local variable of index onto stack.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Ldloca">
            <summary>
            Load address of local variable with index index.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldloca?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Stloc">
            <summary>
            Pop a value from stack into local variable index.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.stloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Localloc">
            <summary>
            Allocate space from the local memory pool.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.localloc?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Endfilter">
            <summary>
            End an exception handling filter clause.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.endfilter?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Unaligned">
            <summary>
            Subsequent pointer instruction might be unaligned.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.unaligned?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Volatile">
            <summary>
            Subsequent pointer reference is volatile.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.volatile?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Tailcall">
            <summary>
            Subsequent call terminates current method.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.tailcall?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Initobj">
            <summary>
            Initialize the value at address dest.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.initobj?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Constrained">
            <summary>
            Call a virtual method on a type constrained to be type T.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.constrained?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Cpblk">
            <summary>
            Copy data from memory to memory.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.cpblk?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Initblk">
            <summary>
            Set all bytes in a block of memory to a given byte value.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.initblk?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Rethrow">
            <summary>
            Rethrow the current exception.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.rethrow?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Sizeof">
            <summary>
            Push the size, in bytes, of a type as an unsigned int32.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.sizeof?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Refanytype">
            <summary>
            Push the type token stored in a typed reference.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.refanytype?view=net-6.0"/>
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodes.Readonly">
            <summary>
            Specify that the subsequent array address operation performs no type check at runtime, and that it returns a controlled-mutability managed pointer.
            </summary>
            <remarks>
            See also: <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.readonly?view=net-6.0"/>
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilOpCodeType">
            <summary>
            Provides members for all operation code categories.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.Annotation">
            <summary>
            Deprecated, should not be used.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.Macro">
            <summary>
            Indicates the operation code is a macro instruction that expands to another instruction, but taking less space.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.Internal">
            <summary>
            Indicates the operation code is a reserved instruction.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.ObjModel">
            <summary>
            Indicates the operation code applies to objects.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.Prefix">
            <summary>
            Indicates the operation code is a prefix to another instruction.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOpCodeType.Primitive">
            <summary>
            Indicates the operation code is a built-in primitive instruction.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilOperandType">
            <summary>
            Provides members defining all categories of operands that each CIL instruction can have.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineBrTarget">
            <summary>
            Indicates the CIL instruction has a branch target (a signed 32-bit offset relative to the next instruction's
            offset) as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineField">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a field as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineI">
            <summary>
            Indicates the CIL instruction has a single 32-bit integer as operand. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineI8">
            <summary>
            Indicates the CIL instruction has a single 64-bit integer as operand. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineMethod">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a method as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineNone">
            <summary>
            Indicates the CIL instruction has no operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlinePhi">
            <summary>
            Indicates the CIL instruction has a list of phi variables as operand.
            </summary>
            <remarks>
            This operand type is not used in the default CIL instruction set, and is only meant to be used by the
            runtime itself. 
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineR">
            <summary>
            Indicates the CIL instruction has a 64-bit floating point number as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineSig">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a standalone signature as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineString">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a string in the #US stream as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineSwitch">
            <summary>
            Indicates the CIL instruction has a jump table (an array of 32-bit offsets relative to the next instruction's
            offset) as operand.  
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineTok">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a type or member as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineType">
            <summary>
            Indicates the CIL instruction has a metadata token referencing a type as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineVar">
            <summary>
            Indicates the CIL instruction has a 16-bit variable index as operand. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineBrTarget">
            <summary>
            Indicates the CIL instruction has a short branch target (a signed 8-bit offset relative to the next
            instruction's offset) as operand. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineI">
            <summary>
            Indicates the CIL instruction has a signed 8-bit integer as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineR">
            <summary>
            Indicates the CIL instruction has a 32-bit floating point number as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineVar">
            <summary>
            Indicates the CIL instruction has an 8-bit variable index as operand. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.InlineArgument">
            <summary>
            Indicates the CIL instruction has a 16-bit parameter index as operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilOperandType.ShortInlineArgument">
            <summary>
            Indicates the CIL instruction has an 8-bit parameter index as operand.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody">
             <summary>
             Represents a CIL method body using the fat format.
             </summary>
             <remarks>
             The fat method body format is used when a CIL method body's code size is larger than 64 bytes, has  local
             variables, its max stack size is greater than 8, or uses extra sections (e.g. for storing exception handlers).
            
             This class does not do any encoding/decoding of the bytes that make up the actual CIL instructions, nor does
             it do any verification of the code.
             </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.#ctor(AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes,System.UInt16,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.IReadableSegment)">
            <summary>
            Creates a new fat method body.
            </summary>
            <param name="attributes">The attributes associated to the method body.</param>
            <param name="maxStack">The maximum amount of values that can be pushed onto the stack.</param>
            <param name="localVarSigToken">The metadata token that defines the local variables for the method body.</param>
            <param name="code">The raw code of the method.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.IsFat">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.Attributes">
            <summary>
            Gets or sets the attributes associated to the method body.
            </summary>
            <remarks>
            This property always has the <see cref="F:AsmResolver.PE.DotNet.Cil.CilMethodBodyAttributes.Fat"/> flag set.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.HasSections">
            <summary>
            Gets or sets a value indicating whether the method body stores extra sections.
            </summary>
            <remarks>
            This property does not automatically update when <see cref="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.ExtraSections"/> is changed.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.InitLocals">
            <summary>
            Gets or sets a value indicating whether all locals defined by this method body should be initialized
            to zero by the runtime upon starting execution of the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.MaxStack">
            <summary>
            Gets or sets a value indicating the maximum amount of values that can be pushed onto the stack by the
            code stored in the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.LocalVarSigToken">
            <summary>
            Gets or sets the metadata token referencing a signature that defines all local variables in the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.ExtraSections">
            <summary>
            Gets a collection of extra metadata sections that are appended to the method body.
            </summary>
            <remarks>
            These sections are used to encode any exception handler in the method body.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.FromReader(AsmResolver.IErrorListener,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a raw method body from the given binary input stream using the fat method body format.
            </summary>
            <param name="errorListener">The object responsible for recording parser errors.</param>
            <param name="reader">The binary input stream to read from.</param>
            <returns>The raw method body.</returns>
            <exception cref="T:System.FormatException">Occurs when the method header indicates an method body that is not in the
            fat format.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawFatMethodBody.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilRawMethodBody">
            <summary>
            When overridden from this class, represents a chunk of CIL code that implements a method body.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawMethodBody.#ctor(AsmResolver.IReadableSegment)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawMethodBody.IsFat">
            <summary>
            Gets a value indicating whether the method body is using the fat format.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawMethodBody.Code">
            <summary>
            Gets or sets the raw bytes that make up the CIL code of the method body.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawMethodBody.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a raw method body from the given binary input stream.
            </summary>
            <param name="reader">The binary input stream to read from.</param>
            <returns>The raw method body.</returns>
            <exception cref="T:System.NotSupportedException">Occurs when the method header indicates an invalid or unsupported
            method body format.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawMethodBody.FromReader(AsmResolver.IErrorListener,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a raw method body from the given binary input stream.
            </summary>
            <param name="errorListener">The object responsible for recording parser errors.</param>
            <param name="reader">The binary input stream to read from.</param>
            <returns>The raw method body.</returns>
            <exception cref="T:System.NotSupportedException">Occurs when the method header indicates an invalid or unsupported
            method body format.</exception>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody">
             <summary>
             Represents a CIL method body using the tiny format.
             </summary>
             <remarks>
             The tiny method body format is used when a CIL method body's code size is less than 64 bytes, has no local
             variables, its max stack size is less than or equal to 8, and has no extra sections (e.g. no exception handlers).
            
             This class does not do any encoding/decoding of the bytes that make up the actual CIL instructions, nor does
             it do any verification of the code.
             </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.#ctor(System.Byte[])">
            <summary>
            Creates a new method body using a buffer of assembled CIL instructions.
            </summary>
            <param name="code">The buffer containing the raw CIL instructions.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.#ctor(AsmResolver.IReadableSegment)">
            <summary>
            Creates a new method body using a buffer of assembled CIL instructions.
            </summary>
            <param name="code">The buffer containing the raw CIL instructions.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.IsFat">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.FromReader(AsmResolver.IErrorListener,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a raw method body from the given binary input stream using the tiny method body format.
            </summary>
            <param name="errorListener">The object responsible for recording parser errors.</param>
            <param name="reader">The binary input stream to read from.</param>
            <returns>The raw method body.</returns>
            <exception cref="T:System.FormatException">Occurs when the method header indicates an method body that is not in the
            tiny format.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.CilRawTinyMethodBody.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.CilStackBehaviour">
            <summary>
            Provides members defining all possible stack behaviours that a single CIL operation can have.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Pop0">
             <summary>
             Indicates the operation pops no values from the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Pop1">
             <summary>
             Indicates the operation pops one value from the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Pop1_Pop1">
             <summary>
             Indicates the operation pops one value off the stack for the first operand, and one value of the stack
             for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_Pop1">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, and a value off the stack
             for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_PopI">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off
             the stack for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_PopI8">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off
             the stack for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_PopI_PopI">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the
             stack for the second operand, and a 32-bit integer off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_PopR4">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, and a 32-bit floating
             point number off the stack for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopI_PopR8">
             <summary>
             Indicates the operation pops a 32-bit integer off the stack for the first operand, and a 64-bit floating
             point number off the stack for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef">
             <summary>
             Indicates the operation pops a reference off the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_Pop1">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, and a value off the stack for
             the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, and a 32-bit integer off the
             stack for the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_PopI">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a value off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_PopI8">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a 64-bit integer off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_PopR4">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a 32-bit integer off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_PopR8">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a 64-bit floating point number off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_PopRef">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a reference off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopRef_PopI_Pop1">
             <summary>
             Indicates the operation pops a reference off the stack for the first operand, a value off the stack for the
             second operand, and a 32-bit integer off the stack for the third operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PopAll">
            <summary>
            Indicates the operation clears the evaluation stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Push0">
             <summary>
             Indicates the operation pushes no values onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Push1">
             <summary>
             Indicates the operation pushes one value onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.Push1_Push1">
             <summary>
             Indicates the operation pushes 1 value onto the stack for the first operand, and 1 value onto the stack for
             the second operand.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PushI">
             <summary>
             Indicates the operation pushes a 32-bit integer onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PushI8">
             <summary>
             Indicates the operation pushes a 64-bit integer onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PushR4">
             <summary>
             Indicates the operation pushes a 32-bit floating point number onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PushR8">
             <summary>
             Indicates the operation pushes a 64-bit floating point number onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.PushRef">
             <summary>
             Indicates the operation pushes a reference onto the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.VarPop">
             <summary>
             Indicates the operation pops a variable amount of values off the stack.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Cil.CilStackBehaviour.VarPush">
             <summary>
             Indicates the operation pushes a variable amount of values onto the stack.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver">
            <summary>
            Provides an implementation of the <see cref="T:AsmResolver.PE.DotNet.Cil.ICilOperandResolver"/> that always returns <c>null</c>.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver.Instance">
            <summary>
            Gets the singleton instance of the empty operand resolver.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver.ResolveMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver.ResolveString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver.ResolveLocalVariable(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.EmptyOperandResolver.ResolveParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.ICilInstructionFormatter">
            <summary>
            Provides members for formatting a CIL instruction to a human readable string.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilInstructionFormatter.FormatInstruction(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Formats a single instruction to a string.
            </summary>
            <param name="instruction">The instruction to format.</param>
            <returns>The string representing the instruction.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.ICilLabel">
            <summary>
            Represents a label used to reference an instruction in a CIL method body. 
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Cil.ICilLabel.Offset">
            <summary>
            Gets the offset of the referenced instruction.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder">
            <summary>
            Provides members for serializing high level representations of an operand in a CIL instruction.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder.GetVariableIndex(System.Object)">
            <summary>
            Transforms the provided variable operand into its variable index.
            </summary>
            <param name="operand">The variable operand.</param>
            <returns>The variable index.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder.GetArgumentIndex(System.Object)">
            <summary>
            Transforms the provided argument operand into its argument index.
            </summary>
            <param name="operand">The argument operand.</param>
            <returns>The argument index.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder.GetStringToken(System.Object)">
            <summary>
            Transforms the provided string operand into a string token.
            </summary>
            <param name="operand">The string operand.</param>
            <returns>The string token.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder.GetMemberToken(System.Object)">
            <summary>
            Transforms the provided member into a metadata token that references the member.
            </summary>
            <param name="operand">The member.</param>
            <returns>The metadata token.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Cil.ICilOperandResolver">
            <summary>
            Provides members for resolving raw operands of decoded CIL instructions to higher level representations.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandResolver.ResolveMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Resolves a member operand.
            </summary>
            <param name="token">The metadata token of the referenced member.</param>
            <returns>The member, or <c>null</c> if the metadata token could not be resolved to a member.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandResolver.ResolveString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Resolves a string operand.
            </summary>
            <param name="token">The metadata token of the referenced string/</param>
            <returns>The string, or <c>null</c> if the metadata token could not be resolved to a string.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandResolver.ResolveLocalVariable(System.Int32)">
            <summary>
            Resolves a local variable operand.
            </summary>
            <param name="index">The index of the local variable to resolve.</param>
            <returns>The local variable, or <c>null</c> if the index could not be resolved to a local variable.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Cil.ICilOperandResolver.ResolveParameter(System.Int32)">
            <summary>
            Resolves a parameter operand.
            </summary>
            <param name="index">The index of the parameter to resolve.</param>
            <returns>The parameter, or <c>null</c> if the index could not be resolved to a local variable.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.DotNetDirectory">
            <summary>
            Provides a basic implementation of a CLR 2.0 data directory present in a PE image containing .NET metadata.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.#ctor">
            <summary>
            Creates a new .NET data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.MajorRuntimeVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.MinorRuntimeVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.Metadata">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.Flags">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.EntryPoint">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.DotNetResources">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.StrongName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.CodeManagerTable">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.VTableFixups">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.ExportAddressTable">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.DotNetDirectory.ManagedNativeHeader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetMetadata">
            <summary>
            Obtains the data directory containing the metadata of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.Metadata"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetResources">
            <summary>
            Obtains the data directory containing the embedded resources data of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.DotNetResources"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetStrongName">
            <summary>
            Obtains the data directory containing the strong name signature of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.StrongName"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetCodeManagerTable">
            <summary>
            Obtains the data directory containing the code manager table of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.CodeManagerTable"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetExportAddressTable">
            <summary>
            Obtains the data directory containing the export address table of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.ExportAddressTable"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetVTableFixups">
            <summary>
            Obtains the data directory containing the VTable fixups of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.VTableFixups"/> property
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.DotNetDirectory.GetManagedNativeHeader">
            <summary>
            Obtains the data directory containing the managed native header of the .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.ManagedNativeHeader"/> property
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.DotNetDirectoryFlags">
            <summary>
            Provides all possible values for the .NET data directory flags.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.ILOnly">
            <summary>
            Indicates the .NET image only contains methods implemented using the CIL instruction set.
            </summary>
            <remarks>
            Mixed-mode applications should set this flag to zero.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.Bit32Required">
            <summary>
            Indicates the .NET image requires a 32-bit architecture to run on.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.ILLibrary">
            <summary>
            Indicates the .NET image is a .NET library.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.StrongNameSigned">
            <summary>
            Indicates the .NET image is signed with a strong name.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.NativeEntryPoint">
            <summary>
            Indicates the entry point defined in <see cref="P:AsmResolver.PE.DotNet.DotNetDirectory.EntryPoint"/> is a relative virtual address
            to a native function.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.TrackDebugData">
            <summary>
            Indicates the debug data is tracked.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.Bit32Preferred">
            <summary>
            Indicates the application will run in an 32-bit environment if it is possible.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.IDotNetDirectory">
            <summary>
            Represents a data directory containing the CLR 2.0 header and data directories of a .NET binary.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.MajorRuntimeVersion">
            <summary>
            Gets or sets the major runtime version of the directory format.
            </summary>
            <remarks>
            This field is set to 2 in most .NET binaries.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.MinorRuntimeVersion">
            <summary>
            Gets or sets the minor runtime version of the directory format.
            </summary>
            <remarks>
            This field is set to 5 in most .NET binaries.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.Metadata">
            <summary>
            Gets or sets the data directory containing the metadata of the .NET binary.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.Flags">
            <summary>
            Gets or sets the flags associated to the .NET binary.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.EntryPoint">
            <summary>
            Gets or sets the metadata token or entry point virtual address, depending on whether
            <see cref="F:AsmResolver.PE.DotNet.DotNetDirectoryFlags.NativeEntryPoint"/> is set in <see cref="P:AsmResolver.PE.DotNet.IDotNetDirectory.Flags" />.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.DotNetResources">
            <summary>
            Gets or sets the data directory containing the embedded resources data of the .NET binary (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.StrongName">
            <summary>
            Gets or sets the data directory containing the strong name signature of the .NET binary (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.CodeManagerTable">
            <summary>
            Gets or sets the data directory containing the code manager table of the .NET binary (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.VTableFixups">
            <summary>
            Gets or sets the data directory containing the VTable fixups that need to be applied when executing mixed
            mode applications (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.ExportAddressTable">
            <summary>
            Gets or sets the data directory containing the addresses to native stubs of exports defined in the
            .NET binary (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.IDotNetDirectory.ManagedNativeHeader">
            <summary>
            Gets or sets the data directory containing the managed native header of a mixed mode application (if available).
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream">
            <summary>
            Represents the metadata stream containing blob signatures referenced by entries in the tables stream.
            </summary>
            <remarks>
            Like most metadata streams, the blob stream does not necessarily contain just valid blobs. It can contain
            (garbage) data that is never referenced by any of the tables in the tables stream. The only guarantee that the
            blob heap provides, is that any blob index in the tables stream is the start address (relative to the start of
            the blob stream) of a blob signature that is prefixed by a length.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.DefaultName">
            <summary>
            The default name of a blob stream, as described in the specification provided by ECMA-335.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.#ctor">
            <summary>
            Initializes the blob stream with its default name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.#ctor(System.String)">
            <summary>
            Initializes the blob stream with a custom name.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.GetBlobByIndex(System.UInt32)">
            <summary>
            Gets a blob by its blob index.
            </summary>
            <param name="index">The offset into the heap to start reading.</param>
            <returns>
            The blob, excluding the bytes encoding the length of the blob, or <c>null</c> if the index was invalid.
            </returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.TryGetBlobReaderByIndex(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Gets a blob binary reader by its blob index.
            </summary>
            <param name="index">The offset into the heap to start reading.</param>
            <param name="reader">When this method returns <c>true</c>, this parameter contains the created binary reader.</param>
            <returns>
            <c>true</c> if a blob reader could be created at the provided index, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.BlobStream.TryFindBlobIndex(System.Byte[],System.UInt32@)">
            <summary>
            Searches the stream for the provided blob.
            </summary>
            <param name="blob">The blob to search for.</param>
            <param name="index">When the function returns <c>true</c>, contains the index at which the blob was found.</param>
            <returns><c>true</c> if the blob index was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream">
            <summary>
            Provides an implementation of a blob stream that obtains blobs from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.#ctor(System.Byte[])">
            <summary>
            Creates a new blob stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new blob stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.#ctor(System.String,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new blob stream with the provided segment in a file as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.GetBlobByIndex(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.TryGetBlobReaderByIndex(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Blob.SerializedBlobStream.TryFindBlobIndex(System.Byte[],System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream">
            <summary>
            Represents a metadata stream with contents in a custom data format.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new custom metadata stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="data">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.#ctor(System.String,AsmResolver.ISegment)">
            <summary>
            Creates a new custom metadata stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="contents">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.Contents">
            <summary>
            Gets or sets the raw contents of the stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.DefaultMetadataStreamReader">
            <summary>
            Provides a default implementation for the <see cref="T:AsmResolver.PE.DotNet.Metadata.DefaultMetadataStreamReader"/> interface, which is able
            to read all metadata streams defined by the ECMA-335, and creates instances of <see cref="T:AsmResolver.PE.DotNet.Metadata.CustomMetadataStream"/>
            when an unknown metadata stream was read.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.DefaultMetadataStreamReader.Instance">
            <summary>
            Gets a default instance
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.DefaultMetadataStreamReader.ReadStream(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader,AsmResolver.IO.BinaryStreamReader@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.FieldRvaDataReader">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.PE.DotNet.Metadata.IFieldRvaDataReader"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.FieldRvaDataReader.ResolveFieldData(AsmResolver.IErrorListener,AsmResolver.PE.DotNet.Metadata.IMetadata,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream">
            <summary>
            Represents the metadata stream containing GUIDs referenced by entries in the tables stream.
            </summary>
            <remarks>
            Like most metadata streams, the GUID stream does not necessarily contain just valid strings. It can contain
            (garbage) data that is never referenced by any of the tables in the tables stream. The only guarantee that the
            GUID heap provides, is that any blob index in the tables stream is the start address (relative to the start of
            the GUID stream) of a GUID.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.GuidSize">
            <summary>
            The size of a single GUID in the GUID stream.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.DefaultName">
            <summary>
            The default name of a GUID stream, as described in the specification provided by ECMA-335.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.#ctor">
            <summary>
            Initializes the GUID stream with its default name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.#ctor(System.String)">
            <summary>
            Initializes the GUID stream with a custom name.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.GetGuidByIndex(System.UInt32)">
            <summary>
            Gets a GUID by its GUID index.
            </summary>
            <param name="index">The offset into the heap to start reading.</param>
            <returns>The GUID.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.GuidStream.TryFindGuidIndex(System.Guid,System.UInt32@)">
            <summary>
            Searches the stream for the provided GUID.
            </summary>
            <param name="guid">The GUID to search for.</param>
            <param name="index">When the function returns <c>true</c>, contains the index at which the GUID was found.</param>
            <returns><c>true</c> if the GUID index was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream">
            <summary>
            Provides an implementation of a GUID stream that obtains GUIDs from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.#ctor(System.Byte[])">
            <summary>
            Creates a new GUID stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new GUID stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.#ctor(System.String,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new GUID stream with the provided file segment reader as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.GetGuidByIndex(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Guid.SerializedGuidStream.TryFindGuidIndex(System.Guid,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.IFieldRvaDataReader">
            <summary>
            Provides members for reading data referenced by a row in the FieldRVA table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IFieldRvaDataReader.ResolveFieldData(AsmResolver.IErrorListener,AsmResolver.PE.DotNet.Metadata.IMetadata,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow@)">
            <summary>
            Reads a data segment referenced by a row in the FieldRVA table.
            </summary>
            <param name="listener">The object responsible for recording parser errors.</param>
            <param name="metadata">The metadata directory to read from.</param>
            <param name="fieldRvaRow">The row referencing the data.</param>
            <returns>The data segment, or <c>null</c> if no data was referenced.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.ILazyMetadataStream">
            <summary>
            Represents a metadata stream that is initialized lazily.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.ILazyMetadataStream.Initialize(AsmResolver.PE.DotNet.Metadata.IMetadata)">
            <summary>
            Finalizes the initialization process of the metadata stream.
            </summary>
            <param name="parentMetadata">The metadata directory that defines the stream.</param>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.IMetadata">
            <summary>
            Represents a data directory containing metadata for a managed executable, including fields from the metadata
            header, as well as the streams containing metadata tables and blob signatures.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.MajorVersion">
            <summary>
            Gets or sets the major version of the metadata directory format.
            </summary>
            <remarks>
            This field is usually set to 1.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.MinorVersion">
            <summary>
            Gets or sets the minor version of the metadata directory format.
            </summary>
            <remarks>
            This field is usually set to 1.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.VersionString">
            <summary>
            Gets or sets the string containing the runtime version that the .NET binary was built for.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.Flags">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.IsEncMetadata">
            <summary>
            Gets a value indicating whether the metadata directory is loaded as Edit-and-Continue metadata.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadata.Streams">
            <summary>
            Gets a collection of metadata streams that are defined in the metadata header.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadata.GetStream(System.String)">
            <summary>
            Gets a stream by its name.
            </summary>
            <param name="name">The name of the stream to search.</param>
            <returns>The stream</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Occurs when the stream is not present in the metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadata.GetStream``1">
            <summary>
            Gets a stream by its type.
            </summary>
            <typeparam name="TStream">The type of the stream.</typeparam>
            <returns>The stream</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Occurs when the stream is not present in the metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadata.TryGetStream(System.String,AsmResolver.PE.DotNet.Metadata.IMetadataStream@)">
            <summary>
            Gets a stream by its name.
            </summary>
            <param name="name">The name of the stream to search.</param>
            <param name="stream">The found stream, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadata.TryGetStream``1(``0@)">
            <summary>
            Gets a stream by its name.
            </summary>
            <typeparam name="TStream">The type of the stream.</typeparam>
            <param name="stream">The found stream, or <c>null</c> if no match was found.</param>
            <returns><c>true</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.IMetadataStream">
            <summary>
            Represents a single metadata stream in the metadata directory of a managed executable file.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadataStream.Name">
            <summary>
            Gets or sets the name of the metadata stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.IMetadataStream.CanRead">
            <summary>
            Gets a value indicating whether the raw contents of the stream can be read using a binary stream reader.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadataStream.CreateReader">
            <summary>
            Creates a binary reader that reads the raw contents of the metadata stream.
            </summary>
            <returns>The reader.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when <see cref="P:AsmResolver.PE.DotNet.Metadata.IMetadataStream.CanRead"/> is <c>false</c>.</exception>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.IMetadataStreamReader">
            <summary>
            Provides members for reading a stream stored in the metadata directory of a .NET image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.IMetadataStreamReader.ReadStream(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads the contents of a metadata stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="header">The header of the metadata stream.</param>
            <param name="reader">The input stream to read from.</param>
            <returns>The read metadata stream.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Metadata">
            <summary>
            Provides a basic implementation of a metadata directory in a managed PE.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.MajorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.MinorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.Reserved">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.VersionString">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.Flags">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.IsEncMetadata">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Metadata.Streams">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.FromFile(System.String)">
            <summary>
            Reads a .NET metadata directory from a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The read metadata.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.FromBytes(System.Byte[])">
            <summary>
            Interprets the provided binary data as a .NET metadata directory.
            </summary>
            <param name="data">The raw data.</param>
            <returns>The read metadata.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Reads a .NET metadata directory from a file.
            </summary>
            <param name="file">The file to read.</param>
            <returns>The read metadata.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Interprets the provided binary stream as a .NET metadata directory.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The read metadata.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.FromReader(AsmResolver.IO.BinaryStreamReader,AsmResolver.PE.DotNet.Metadata.MetadataReaderContext)">
            <summary>
            Interprets the provided binary stream as a .NET metadata directory.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="context">The context in which the reader is situated in.</param>
            <returns>The read metadata.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.GetStreamHeaders(System.UInt32)">
            <summary>
            Constructs new metadata stream headers for all streams in the metadata directory.
            </summary>
            <param name="offset">The offset of the first stream header.</param>
            <returns>A list of stream headers.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.WriteStreamHeaders(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader[])">
            <summary>
            Writes a collection of stream headers to an output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="headers">The headers to write.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.WriteStreams(AsmResolver.IO.IBinaryStreamWriter)">
            <summary>
            Writes the contents of all streams to an output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.GetStream(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.GetStream``1">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.TryGetStream(System.String,AsmResolver.PE.DotNet.Metadata.IMetadataStream@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.TryGetStream``1(``0@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Metadata.GetStreams">
            <summary>
            Obtains the list of streams defined in the data directory.
            </summary>
            <returns>The streams.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.Metadata.Metadata.Streams"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.MetadataHeap">
            <summary>
            Provides a base implementation of a metadata heap.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataHeap.#ctor(System.String)">
            <summary>
            Initializes the metadata heap with a name.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataHeap.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataHeap.CanRead">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataHeap.IndexSize">
            <summary>
            Gets a value indicating whether any index into this metadata heap will need 2 or 4 bytes to be encoded.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataHeap.CreateReader">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext">
            <summary>
            Provides a context for a .NET metadata directory reader.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.#ctor(AsmResolver.ISegmentReferenceFactory)">
            <summary>
            Constructs a new metadata reader context.
            </summary>
            <param name="factory">The factory object responsible for translating RVAs to references.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.#ctor(AsmResolver.ISegmentReferenceFactory,AsmResolver.IErrorListener,AsmResolver.PE.DotNet.Metadata.IMetadataStreamReader)">
            <summary>
            Constructs a new metadata reader context.
            </summary>
            <param name="referenceFactory">The factory object responsible for translating RVAs to references.</param>
            <param name="errorListener">The object responsible for collecting any errors during the parsing.</param>
            <param name="metadataStreamReader">The object responsible for reading metadata streams in the .NET data directory.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.ReferenceFactory">
            <summary>
            Gets the factory responsible for translating RVAs to references.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.ErrorListener">
            <summary>
            Gets the object responsible for collecting any errors during the parsing.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.MetadataStreamReader">
            <summary>
            Gets the object responsible for reading metadata streams in the .NET data directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.FromReaderContext(AsmResolver.PE.PEReaderContext)">
            <summary>
            Constructs a metadata reader context from a PE reader context.
            </summary>
            <param name="context">The context to transform.</param>
            <returns>The constructed context.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.MarkAsFatal">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataReaderContext.RegisterException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.MetadataSignature">
            <summary>
            Provides members defining all possible signatures that a metadata directory can start with.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.MetadataSignature.Bsjb">
            <summary>
            Indicates the BSJB metadata directory format is used.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.MetadataSignature.ComPlus">
            <summary>
            Indicates the legacy COM+ metadata directory format is used.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader">
            <summary>
            Represents a raw metadata stream header, defining the offset, size and name of a metadata stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.#ctor(System.UInt32,System.UInt32,System.String)">
            <summary>
            Creates a new metadata stream header.
            </summary>
            <param name="offset">The offset to the contents of the stream.</param>
            <param name="size">The size in bytes of the contents.</param>
            <param name="name">The name of the stream.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the name is too long.</exception>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.Offset">
            <summary>
            Gets the offset (relative to the start of the metadata directory) referencing the beginning of the contents
            of the stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.Size">
            <summary>
            Gets the number of bytes the stream contains.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.Name">
            <summary>
            Gets the name of the stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single metadata stream header from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The header.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.MetadataStreamList">
            <summary>
            Provides an implementation of a lazy-initialized list of metadata streams present in a metadata directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamList.#ctor(AsmResolver.PE.DotNet.Metadata.IMetadata,AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.PE.DotNet.Metadata.MetadataStreamHeader[],AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Prepares a new lazy-initialized metadata stream list.
            </summary>
            <param name="owner">The owner of the metadata stream list.</param>
            <param name="context">The reader context.</param>
            <param name="streamHeaders">The stream headers.</param>
            <param name="directoryReader">The input stream containing the metadata directory.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.MetadataStreamList.Count">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamList.Initialize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.MetadataStreamList.PostInitialize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream">
            <summary>
            Represents the metadata stream containing Portable PDB debug data that is associated to a .NET module.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.DefaultName">
            <summary>
            The default name of a PDB stream, as described in the specification provided by Portable PDB v1.0.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.Id">
            <summary>
            Gets the unique identifier representing the debugging metadata blob content.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.EntryPoint">
            <summary>
            Gets or sets the token of the entry point method, or 9 if not applicable.
            </summary>
            <remarks>
            This should be the same value as stored in the metadata header.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.TypeSystemRowCounts">
            <summary>
            Gets an array of row counts of every portable PDB table in the tables stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.UpdateRowCounts(AsmResolver.PE.DotNet.Metadata.Tables.TablesStream)">
            <summary>
            Synchronizes the row counts stored in <see cref="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.TypeSystemRowCounts"/> with the tables in the provided
            tables stream.
            </summary>
            <param name="stream">The tables stream to pull the data from.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.UpdateRowCounts(System.UInt32[])">
            <summary>
            Synchronizes the row counts stored in <see cref="P:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.TypeSystemRowCounts"/> with the tables in the provided
            tables stream row counts.
            </summary>
            <param name="rowCounts">The tables stream row counts to pull in.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.ComputeReferencedTypeSystemTables">
            <summary>
            Computes the valid bitmask for the type system table rows referenced by this pdb stream.
            </summary>
            <returns>The bitmask.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.PdbStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream">
            <summary>
            Provides an implementation of a PDB stream that obtains GUIDs from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream.#ctor(System.Byte[])">
            <summary>
            Creates a new PDB stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new PDB stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream.#ctor(System.String,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new PDB stream with the provided file segment reader as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Pdb.SerializedPdbStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.SerializedMetadata">
            <summary>
            Provides an implementation of a metadata directory that is stored in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.SerializedMetadata.#ctor(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a metadata directory from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="directoryReader">The input stream containing the metadata directory.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when any of the arguments are <c>null</c>.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an unsupported metadata directory format was encountered.</exception>
            <exception cref="T:System.BadImageFormatException">Occurs when the metadata directory header is invalid.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.SerializedMetadata.GetStreams">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream">
            <summary>
            Provides an implementation of a strings stream that obtains strings from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.#ctor(System.Byte[])">
            <summary>
            Creates a new strings stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new strings stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.#ctor(System.String,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new strings stream with the provided file segment reader as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.GetStringByIndex(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.SerializedStringsStream.TryFindStringIndex(AsmResolver.Utf8String,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream">
            <summary>
            Represents the metadata stream containing the logical strings heap of a managed executable file.
            </summary>
            <remarks>
            Like most metadata streams, the strings stream does not necessarily contain just valid strings. It can contain
            (garbage) data that is never referenced by any of the tables in the tables stream. The only guarantee that the
            strings heap provides, is that any string index in the tables stream is the start address (relative to the
            start of the strings stream) of a UTF-8 string that is zero terminated.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream.DefaultName">
            <summary>
            The default name of a strings stream, as described in the specification provided by ECMA-335.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream.#ctor">
            <summary>
            Initializes the strings stream with its default name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream.#ctor(System.String)">
            <summary>
            Initializes the strings stream with a custom name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream.GetStringByIndex(System.UInt32)">
            <summary>
            Gets a string by its string index.
            </summary>
            <param name="index">The offset into the heap to start reading.</param>
            <returns>The string, or <c>null</c> if the index was invalid.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Strings.StringsStream.TryFindStringIndex(AsmResolver.Utf8String,System.UInt32@)">
            <summary>
            Searches the stream for the provided string.
            </summary>
            <param name="value">The string to search for.</param>
            <param name="index">When the function returns <c>true</c>, contains the index at which the string was found.</param>
            <returns><c>true</c> if the string index was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex">
            <summary>
            Provides members defining all coded indices that can appear in the tables stream.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.TypeDefOrRef">
            <summary>
            Indicates the index is an index to a member in either the TypeRef, TypeDef or TypeSpec table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasConstant">
            <summary>
            Indicates the index is an index to a member in either the Field, Parameter or Property table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasCustomAttribute">
            <summary>
            Indicates the index is an index to a member in one of the following tables:
            MethodDef, Field, TypeRef, TypeDef, Parameter, InterfaceImpl, MemberRef, Module, DeclSecurity, Property, Event,
            StandAloneSig, ModuleRef, TypeSpec, Assembly, AssemblyRef, File, ExportedType, ManifestResource, GenericParam,
            GenericParamConstraint or MethodSpec.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasFieldMarshal">
            <summary>
            Indicates the index is an index to a member in either the Field or Parameter table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasDeclSecurity">
            <summary>
            Indicates the index is an index to a member in either the TypeDef, MethodDef or Assembly table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.MemberRefParent">
            <summary>
            Indicates the index is an index to a member in either the TypeDef, TypeRef, ModuleRef, MethodDef or TypeSpec
            table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasSemantics">
            <summary>
            Indicates the index is an index to a member in either the Event or Property table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.MethodDefOrRef">
            <summary>
            Indicates the index is an index to a member in either the MethodDef or MemberRef table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.MemberForwarded">
            <summary>
            Indicates the index is an index to a member in either the Field or MethodDef table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.Implementation">
            <summary>
            Indicates the index is an index to a member in either the File, AssemblyRef or ExportedType table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.CustomAttributeType">
            <summary>
            Indicates the index is an index to a member in either the MethodDef or MemberRef table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.ResolutionScope">
            <summary>
            Indicates the index is an index to a member in either the Module, ModuleRef, AssemblyRef or TypeRef table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.TypeOrMethodDef">
            <summary>
            Indicates the index is an index to a member in either the TypeDef or MethodDef table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex.HasCustomDebugInformation">
            <summary>
            Indicates the index is an index to a member in one of the following tables:
            MethodDef, Field, TypeRef, TypeDef, Parameter, InterfaceImpl, MemberRef, Module, DeclSecurity, Property,
            Event, StandAloneSig, ModuleRef, TypeSpec, Assembly, AssemblyRef, File, ExportedType, ManifestResource,
            GenericParam, GenericParamConstraint, MethodSpec, Document, LocalScope, LocalVariable, LocalConstant,
            or ImportScope
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout">
            <summary>
            Provides a description of a single column in a metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.#ctor(System.String,AsmResolver.PE.DotNet.Metadata.Tables.ColumnType)">
            <summary>
            Defines a new column layout, using a fixed size column type.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="type">The value type of the column.</param>
            <exception cref="T:System.ArgumentException">Occurs when the provided column type does not have a fixed size.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.#ctor(System.String,AsmResolver.PE.DotNet.Metadata.Tables.ColumnType,AsmResolver.IndexSize)">
            <summary>
            Defines a new column layout, using a fixed size column type.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="type">The value type of the column.</param>
            <param name="size">The size of the column.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.#ctor(System.String,AsmResolver.PE.DotNet.Metadata.Tables.ColumnType,System.UInt32)">
            <summary>
            Defines a new column layout, using a fixed size column type.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="type">The value type of the column.</param>
            <param name="size">The size of the column.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.Type">
            <summary>
            Gets the data type that this column persists.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.Size">
            <summary>
            Gets the size in bytes of each cell in this column.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.ColumnType">
            <summary>
            Provides all possible data types that a single cell in a metadata table can contain.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable">
            <summary>
            Represents a metadata table stored in the tables stream of a managed executable.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.Layout">
            <summary>
            Gets the layout of the table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.IndexSize">
            <summary>
            Gets the size of an index into this table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.Item(System.Int32)">
            <summary>
            Gets or sets the row at the provided index.
            </summary>
            <param name="index">The index of the row to get.</param>
            <exception cref="T:System.IndexOutOfRangeException">Occurs when the index is too small or too large for this table.</exception>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.IsSorted">
            <summary>
            Gets or sets a value indicating whether the table is considered sorted.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.GetByRid(System.UInt32)">
            <summary>
            Gets the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.TryGetCell(System.UInt32,System.Int32,System.UInt32@)">
            <summary>
            Attempts to get the contents of a cell in the table by its row identifier and column index.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="column">The column index.</param>
            <param name="value">When successful, the contents of the cell, converted to an unsigned integer.</param>
            <returns><c>true</c> if the cell existed and was obtained successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.TryGetByRid(System.UInt32,AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow@)">
            <summary>
            Attempts to get the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">When successful, the read row.</param>
            <returns><c>true</c> if the RID existed and the row was obtained successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.TryGetRowByKey(System.Int32,System.UInt32,AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow@)">
            <summary>
            Gets a single row in a table by a key. This requires the table to be sorted.
            </summary>
            <param name="keyColumnIndex">The column number to get the key from.</param>
            <param name="key">The key to search.</param>
            <param name="row">When this functions returns <c>true</c>, this parameter contains the first row that
            contains the given key.</param>
            <returns><c>true</c> if the row was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.SetByRid(System.UInt32,AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow)">
            <summary>
            Sets the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">The new contents of the row.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.UpdateTableLayout(AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Updates the table layout.
            </summary>
            <param name="layout">The new table layout.</param>
            <remarks>
            This method is used to update the sizes of each column, and therefore requires the new layout to have the
            same names and column types as the original one.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <summary>
            Serializes the table to an output stream, according to the table layout provided in <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable.Layout" />.
            </summary>
            <param name="writer">The output stream to write to.</param>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.IndexEncoder">
            <summary>
            Provides a mechanism for translating between metadata tokens and coded indices.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IndexEncoder.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.TablesStream,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex[])">
            <summary>
            Creates a new index encoder.
            </summary>
            <param name="tableStream">The tables stream containing the tables the encoder targets.</param>
            <param name="tables">The table indices to encode for.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.IndexEncoder.IndexSize">
            <summary>
            Gets the size of the indices encoded by the index encoder.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IndexEncoder.EncodeToken(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Translates a metadata token to its corresponding coded index.
            </summary>
            <param name="token">The metadata token to encode.</param>
            <returns>The coded index.</returns>
            <exception cref="T:System.ArgumentException">
            Occurs when the provided metadata token is part of an unsupported metadata table.
            </exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.IndexEncoder.DecodeIndex(System.UInt32)">
            <summary>
            Translates a coded index to its corresponding metadata token.
            </summary>
            <param name="codedIndex">The coded index to decode.</param>
            <returns>The decoded metadata token.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange">
            <summary>
            Represents a range of metadata tokens, indicated by a starting and ending row identifier within a metadata table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Empty">
            <summary>
            Represents the empty metadata range.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,System.UInt32,System.UInt32)">
            <summary>
            Initializes the range.
            </summary>
            <param name="table">The table.</param>
            <param name="startRid">The starting row identifier.</param>
            <param name="endRid">The ending row identifier. This identifier is exclusive.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,System.UInt32,System.UInt32)">
            <summary>
            Initializes the range.
            </summary>
            <param name="redirectionTable">The table that is used for translating raw indices.</param>
            <param name="table">The table.</param>
            <param name="startRid">The starting row identifier.</param>
            <param name="endRid">The ending row identifier. This identifier is exclusive.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Table">
            <summary>
            Gets the index of the metadata table this range is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.StartRid">
            <summary>
            Gets the first row identifier that this range includes.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.EndRid">
            <summary>
            Gets the row identifier indicating the end of the range. The range excludes this row identifier.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Count">
            <summary>
            Gets the number of metadata rows this range spans.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.IsEmpty">
            <summary>
            Gets a value indicating whether the range is empty or not.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.RedirectionTable">
            <summary>
            Gets the table that is used for translating raw indices.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.IsRedirected">
            <summary>
            Gets a value indicating whether the range is associated to a redirection table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.GetEnumerator">
            <summary>
            Obtains an enumerator that enumerates all metadata tokens within the range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.System#Collections#Generic#IEnumerable{AsmResolver#PE#DotNet#Metadata#Tables#MetadataToken}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Equals(AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator">
            <summary>
            Represents an enumerator that enumerates all metadata tokens within a token range.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange)">
            <summary>
            Initializes a new token enumerator.
            </summary>
            <param name="range">The range to enumerate from.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataRange.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1">
            <summary>
            Provides a base implementation of a metadata table in the table stream of a managed executable file.
            </summary>
            <typeparam name="TRow">The type of rows that this table stores.</typeparam>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Creates a new metadata table using the provided layout.
            </summary>
            <param name="tableIndex">The index of the table.</param>
            <param name="layout">The layout of the table.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout,System.Boolean)">
            <summary>
            Creates a new metadata table using the provided layout.
            </summary>
            <param name="tableIndex">The index of the table.</param>
            <param name="layout">The layout of the table.</param>
            <param name="isSorted">Indicates the table is sorted or not.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.TableIndex">
            <summary>
            Gets the index of the table in the tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Layout">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.IndexSize">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Item(System.Int32)">
            <inheritdoc cref="T:AsmResolver.PE.DotNet.Metadata.Tables.IMetadataTable" />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.IsSorted">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.AsmResolver#PE#DotNet#Metadata#Tables#IMetadataTable#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Version">
            <summary>
            Gets the version number of the list.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Rows">
            <summary>
            Gets the internal list of rows that are stored in the metadata table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.IsInitialized">
            <summary>
            Gets a value indicating the <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Rows"/> property is initialized or not.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Capacity">
            <summary>
            Gets or sets the total number of rows that the underlying array can store.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.GetRowRef(System.UInt32)">
            <summary>
            Gets a mutable reference to a row within the table.
            </summary>
            <param name="rid">The RID of the row to obtain a reference for.</param>
            <returns>The row reference.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.GetRowRef(System.UInt32,System.Int32@)">
            <summary>
            Gets a mutable reference to a row within the table.
            </summary>
            <param name="rid">The RID of the row to obtain a reference for.</param>
            <param name="version">The version of the underlying buffer upon obtaining the reference.</param>
            <returns>The row reference.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.GetRows">
            <summary>
            Obtains all rows in the metadata table.
            </summary>
            <returns>The rows.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Rows"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.GetByRid(System.UInt32)">
            <summary>
            Gets the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.TryGetCell(System.UInt32,System.Int32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.TryGetByRid(System.UInt32,`0@)">
            <summary>
            Attempts to get the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">When successful, the read row.</param>
            <returns><c>true</c> if the RID existed an the row was obtained successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.TryGetRowByKey(System.Int32,System.UInt32,`0@)">
            <summary>
            Gets a single row in a table by a key. This requires the table to be sorted.
            </summary>
            <param name="keyColumnIndex">The column number to get the key from.</param>
            <param name="key">The key to search.</param>
            <param name="row">When this functions returns <c>true</c>, this parameter contains the first row that
            contains the given key.</param>
            <returns><c>true</c> if the row was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.AsmResolver#PE#DotNet#Metadata#Tables#IMetadataTable#TryGetRowByKey(System.Int32,System.UInt32,AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.SetByRid(System.UInt32,`0)">
            <summary>
            Sets the contents of a row by its row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">The new contents of the row.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.UpdateTableLayout(AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable`1.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken">
            <summary>
            Represents a metadata token, referencing a member using a table and a row index.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Zero">
            <summary>
            Represents the zero metadata token, or the absence of a metadata token.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.op_Implicit(System.Int32)~AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken">
            <summary>
            Converts a 32-bit integer to a metadata token.
            </summary>
            <param name="token">The token to convert.</param>
            <returns>The metadata token.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.op_Implicit(System.UInt32)~AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken">
            <summary>
            Converts a 32-bit unsigned integer to a metadata token.
            </summary>
            <param name="token">The token to convert.</param>
            <returns>The metadata token.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.op_Equality(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Determines whether two metadata tokens are considered equal. That is, both the table index and the row
            identifier match.
            </summary>
            <param name="a">The first metadata token.</param>
            <param name="b">The second metadata token.</param>
            <returns><c>true</c> if the tokens are considered equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.op_Inequality(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Determines whether two metadata tokens are not considered equal. That is, either the table index or the row
            identifier (or both) does not match the other.
            </summary>
            <param name="a">The first metadata token.</param>
            <param name="b">The second metadata token.</param>
            <returns><c>true</c> if the tokens are not considered equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.#ctor(System.UInt32)">
            <summary>
            Creates a new metadata token from a raw 32 bit integer.
            </summary>
            <param name="value">The raw metadata token.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,System.UInt32)">
            <summary>
            Creates a new metadata token from a table index and a row index.
            </summary>
            <param name="table">The table.</param>
            <param name="rid">The row index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="rid"/> is too large.</exception>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Table">
            <summary>
            Gets the table that the metadata token references.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Rid">
            <summary>
            Gets the row index within the table specified by <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Table"/> that the metadata token references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.ToUInt32">
            <summary>
            Converts the metadata token to an unsigned 32 bit integer.
            </summary>
            <returns>The raw metadata token.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.ToInt32">
            <summary>
            Converts the metadata token to a signed 32 bit integer.
            </summary>
            <returns>The raw metadata token.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Equals(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Determines whether the metadata token refers to the same member as another metadata token.
            </summary>
            <param name="other">The other metadata token.</param>
            <returns><c>true</c> if the token refers to the same member, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken.CompareTo(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes">
            <summary>
            Provides members defining all possible flags that can be assigned to an assembly definition or reference.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.PublicKey">
            <summary>
            The assembly holds the full (unhashed) public key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureNone">
            <summary>
            The assembly uses an unspecified processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureMsil">
            <summary>
            The assembly uses a neutral processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureX86">
            <summary>
            The assembly uses a x86 pe32 processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureIa64">
            <summary>
            The assembly uses an itanium pe32+ processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureAmd64">
            <summary>
            The assembly uses an AMD x64 pe32+ processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ArchitectureMask">
            <summary>
            Bits describing the processor architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.Specified">
            <summary>
            Propagate PA flags to Assembly record.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.FullMask">
            <summary>
            Bits describing the PA incl. Specified.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.EnableJitCompileTracking">
            <summary>
            From "DebuggableAttribute".
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.DisableJitCompileOptimizer">
            <summary>
            From "DebuggableAttribute".
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.Retargetable">
            <summary>
            The assembly can be retargeted (at runtime) to an assembly from a different publisher.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ContentDefault">
            <summary>
            The assembly contains .NET Framework code.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ContentWindowsRuntime">
            <summary>
            The assembly contains Windows Runtime code.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes.ContentMask">
            <summary>
            Bits describing the content type.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow">
            <summary>
            Represents a single row in the assembly definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyHashAlgorithm,System.UInt16,System.UInt16,System.UInt16,System.UInt16,AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the assembly definition table.
            </summary>
            <param name="hashAlgorithm">The hashing algorithm used to sign the assembly.</param>
            <param name="majorVersion">The major version number of the assembly.</param>
            <param name="minorVersion">The minor version number of the assembly.</param>
            <param name="buildNumber">The build version number of the assembly.</param>
            <param name="revisionNumber">The revision version number of the assembly.</param>
            <param name="attributes">The attributes associated to the assembly.</param>
            <param name="publicKey">The index into the #Blob stream referencing the public key of the assembly to use
            for verification of a signature, or 0 if the assembly was not signed.</param>
            <param name="name">The index into the #Strings stream referencing the name of the assembly.</param>
            <param name="culture">The index into the #Strings stream referencing the locale string of the assembly.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.HashAlgorithm">
            <summary>
            Gets or sets the hashing algorithm that was used to sign the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.MajorVersion">
            <summary>
            Gets or sets the major version number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.MinorVersion">
            <summary>
            Gets or sets the minor version number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.BuildNumber">
            <summary>
            Gets or sets the build number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.RevisionNumber">
            <summary>
            Gets or sets the revision number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.PublicKey">
            <summary>
            Gets or sets an index into the #Blob stream referencing the public key of the assembly to use for verification of
            a signature.
            </summary>
            <remarks>
            When this field is set to zero, no public key is stored.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Culture">
            <summary>
            Gets or sets an index into the #Strings stream referencing the locale string of the assembly.
            </summary>
            <remarks>
            When this field is set to zero, the default culture is used.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyHashAlgorithm">
            <summary>
            Provides members defining all hash algorithms that can be used to hash public keys of assemblies.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow">
            <summary>
            Represents a single row in the assembly operating system metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly operating system row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly operating system table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the assembly operating system metadata table.
            </summary>
            <param name="platformId">The identifier of the platform the assembly is targeting.</param>
            <param name="majorVersion">The major version of the platform the assembly is targeting.</param>
            <param name="minorVersion">The minor version of the platform the assembly is targeting.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.PlatformId">
            <summary>
            Gets or sets the identifier of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.MajorVersion">
            <summary>
            Gets or sets the major version of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.MinorVersion">
            <summary>
            Gets or sets the minor version of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly operating system row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyOSRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow">
            <summary>
            Represents a single row in the assembly processor metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly processor row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly processor table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the assembly processor metadata table.
            </summary>
            <param name="processorId">The processor identifier the assembly is targeting.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.ProcessorId">
            <summary>
            Gets or sets the processor identifier the assembly is targeting.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly processor row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyProcessorRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow">
            <summary>
            Represents a single row in the assembly definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16,AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyAttributes,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the assembly reference table.
            </summary>
            <param name="majorVersion">The major version number of the assembly.</param>
            <param name="minorVersion">The minor version number of the assembly.</param>
            <param name="buildNumber">The build version number of the assembly.</param>
            <param name="revisionNumber">The revision version number of the assembly.</param>
            <param name="attributes">The attributes associated to the assembly.</param>
            <param name="publicKeyOrToken">The index into the #Blob stream referencing the public key or token of the
            assembly to use for verification of a signature, or 0 if the assembly was not signed.</param>
            <param name="name">The index into the #Strings stream referencing the name of the assembly.</param>
            <param name="culture">The index into the #Strings stream referencing the locale string of the assembly.</param>
            <param name="hashValue">The index into the #Blob stream referencing the hash value of the assembly reference.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.MajorVersion">
            <summary>
            Gets or sets the major version number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.MinorVersion">
            <summary>
            Gets or sets the minor version number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.BuildNumber">
            <summary>
            Gets or sets the build number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.RevisionNumber">
            <summary>
            Gets or sets the revision number of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.PublicKeyOrToken">
            <summary>
            Gets or sets an index into the #Blob stream referencing the public key or token of the assembly to use for
            verification of a signature.
            </summary>
            <remarks>
            When this field is set to zero, no public key or token is stored.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Culture">
            <summary>
            Gets or sets an index into the #Strings stream referencing the locale string of the assembly.
            </summary>
            <remarks>
            When this field is set to zero, the default culture is used.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.HashValue">
            <summary>
            Gets or sets an index into the #Blob stream referencing the hash value of the assembly reference.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly reference row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow">
            <summary>
            Represents a single row in the assembly reference operating system metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly reference operating system row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly reference operating system table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the assembly reference operating system metadata table.
            </summary>
            <param name="platformId">The identifier of the platform the assembly is targeting.</param>
            <param name="majorVersion">The major version of the platform the assembly is targeting.</param>
            <param name="minorVersion">The minor version of the platform the assembly is targeting.</param>
            <param name="assemblyReference">The index of the AssemblyRef that this operating system row
            was assigned to.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.PlatformId">
            <summary>
            Gets or sets the identifier of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.MajorVersion">
            <summary>
            Gets or sets the major version of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.MinorVersion">
            <summary>
            Gets or sets the minor version of the platform the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.AssemblyReference">
            <summary>
            Gets or sets an index into the AssemblyRef table referencing the assembly reference that this operating system row
            was assigned to.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly operating system row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefOSRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow">
            <summary>
            Represents a single row in the assembly reference processor metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single assembly reference processor row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the assembly reference processor table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the assembly processor metadata table.
            </summary>
            <param name="processorId">The processor identifier the assembly is targeting.</param>
            <param name="assemblyReference">The index of the AssemblyRef that this processor row was assigned to.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.ProcessorId">
            <summary>
            Gets or sets the processor identifier the assembly is targeting.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.AssemblyReference">
            <summary>
            Gets or sets an index into the AssemblyRef table referencing the assembly reference that this processor row
            was assigned to.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow)">
            <summary>
            Determines whether this row is considered equal to the provided assembly processor row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyRefProcessorRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow">
            <summary>
            Represents a single row in the class layout metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single class layout row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the class layout table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.#ctor(System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the class layout metadata table,
            </summary>
            <param name="packingSize">The alignment in bytes of each field in the type. </param>
            <param name="classSize">The size in bytes of the type.</param>
            <param name="parent">The index into the TypeDef table indicating the type that this layout is assigned to.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.PackingSize">
            <summary>
            Gets or sets the alignment in bytes of each field in the type.
            </summary>
            <remarks>
            This value should be a power of two between 0 and 128.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.ClassSize">
            <summary>
            Gets or sets the size in bytes of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Parent">
            <summary>
            Gets or sets an index into the TypeDef table indicating the type that this layout is assigned to.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow)">
            <summary>
            Determines whether this row is considered equal to the provided class layout row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow">
            <summary>
            Represents a single row in the constants metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single constant row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the constants table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the constants metadata table.
            </summary>
            <param name="type">The type of constant that is stored in the blob stream. </param>
            <param name="parent">The HasConstant index (an index into either the Field, Parameter or Property table)
            that is the owner of the constant.</param>
            <param name="value">The index into the #Blob stream containing the serialized constant value.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the constants metadata table.
            </summary>
            <param name="type">The type of constant that is stored in the blob stream. </param>
            <param name="padding">The single padding byte between the type and parent columns.</param>
            <param name="parent">The HasConstant index (an index into either the Field, Parameter or Property table)
            that is the owner of the constant.</param>
            <param name="value">The index into the #Blob stream containing the serialized constant value.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Type">
            <summary>
            Gets or sets the type of constant that is stored in the blob stream.
            </summary>
            <remarks>This field must always be a value-type.</remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Padding">
            <summary>
            Gets or sets the single padding byte between the type and parent columns.
            </summary>
            <remarks>This field should always be zero.</remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Parent">
            <summary>
            Gets a HasConstant index (an index into either the Field, Parameter or Property table) that is the owner
            of the constant.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Value">
            <summary>
            Gets or sets an index into the #Blob stream containing the serialized constant value.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow)">
            <summary>
            Determines whether this row is considered equal to the provided constant row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow">
            <summary>
            Represents a single row in the custom attribute metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single custom attribute row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the custom attribute table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the custom attribute metadata table.
            </summary>
            <param name="parent">The HasCustomAttribute index that this attribute is assigned to.</param>
            <param name="type">The CustomAttributeType index (an index into either the Method or MemberRef table) defining the
            constructor to call when initializing the custom attribute.</param>
            <param name="value">The index into the #Blob stream containing the arguments of the constructor call.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Parent">
            <summary>
            Gets a HasCustomAttribute index (an index into either the Method, Field, TypeRef, TypeDef,
            Param, InterfaceImpl, MemberRef, Module, DeclSecurity, Property, Event, StandAloneSig, ModuleRef,
            TypeSpec, Assembly, AssemblyRef, File, ExportedType, ManifestResource, GenericParam, GenericParamConstraint,
            or MethodSpec table) that this attribute is assigned to.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Type">
            <summary>
            Gets a CustomAttributeType index (an index into either the Method or MemberRef table) defining the
            constructor to call when initializing the custom attribute.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Value">
            <summary>
            Gets or sets an index into the #Blob stream containing the arguments of the constructor call.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow)">
            <summary>
            Determines whether this row is considered equal to the provided custom attribute row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow">
            <summary>
            Represents a single row in the Portable PDB custom debug information metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB custom debug information metadata table.
            </summary>
            <param name="parent">
            A coded index defining the member that this debug information is associated to.
            </param>
            <param name="kind">
            An index into the GUID stream referencing the type of debug data that is stored in this record.
            </param>
            <param name="value">
            An index into the blob stream referencing the data of the record.
            </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Parent">
            <summary>
            Gets or sets a coded index defining the member that this debug information is associated to.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Kind">
            <summary>
            Gets or sets an index into the GUID stream referencing the type of debug data that is stored in this record.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Value">
            <summary>
            Gets or sets an index into the blob stream referencing the data of the record.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB custom debug information row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the custom debug information table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow)">
            <summary>
            Determines whether this row is considered equal to the provided custom debug information row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomDebugInformationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode">
            <summary>
            Provides members defining all operations that can be performed during an edit-and-continue session.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.FuncDefault">
            <summary>
            Indicates the default operation is applied.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.MethodCreate">
            <summary>
            Indicates a method is being created.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.FieldCreate">
            <summary>
            Indicates a field is being created.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.ParamCreate">
            <summary>
            Indicates a parameter is being created.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.PropertyCreate">
            <summary>
            Indicates a property is being created.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode.EventCreate">
            <summary>
            Indicates an event is being created.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow">
            <summary>
            Represents a single row in the Portable PDB Document metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB Document metadata table.
            </summary>
            <param name="name">The index into the blob stream referencing the name of the document.</param>
            <param name="hashAlgorithm">The index into the GUID stream referencing the hash algorithm identifier.</param>
            <param name="hash">The index into the blob stream referencing the hash of the document.</param>
            <param name="language">The index into the GUID stream referencing the language identifier.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Name">
            <summary>
            Gets or sets an index into the blob stream referencing the name of the document.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.HashAlgorithm">
            <summary>
            Gets or sets an index into the GUID stream referencing the hash algorithm identifier.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Hash">
            <summary>
            Gets or sets an index into the blob stream referencing the hash of the document.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Language">
            <summary>
            Gets or sets an index into the GUID stream referencing the language identifier.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB Document row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the document table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow)">
            <summary>
            Determines whether this row is considered equal to the provided document row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.DocumentRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType">
            <summary>
            Provides members defining all element types that can be used to indicate the type of a blob signature or constant.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow">
            <summary>
            Represents a single row in the Edit-and-Continue log metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single edit-and-continue log row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the edit-and-continue log table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.DeltaFunctionCode)">
            <summary>
            Creates a new row for the edit-and-continue log metadata table.
            </summary>
            <param name="token">The metadata token to apply the delta function to.</param>
            <param name="funcCode">The delta function to apply.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Token">
            <summary>
            Gets or sets the metadata token to apply the delta function to.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.FuncCode">
            <summary>
            Gets or sets the delta function to apply.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow)">
            <summary>
            Determines whether this row is considered equal to the provided edit-and-continue log row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncLogRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow">
            <summary>
            Represents a single row in the Edit-and-Continue remap metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single edit-and-continue remap row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the edit-and-continue remap table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Creates a new row for the edit-and-continue remap metadata table.
            </summary>
            <param name="token">The token that was remapped.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Token">
            <summary>
            Gets or sets the token that was remapped.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow)">
            <summary>
            Determines whether this row is considered equal to the provided edit-and-continue remap row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EncMapRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventAttributes">
            <summary>
            Provides members defining all flags that can be associated to an event definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventAttributes.SpecialName">
            <summary>
            Specifies that the event is using a special name.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventAttributes.RtSpecialName">
            <summary>
            Specifies that the runtime should check the name encoding.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow">
            <summary>
            Represents a single row in the event map metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single event definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the event definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the event definition metadata table.
            </summary>
            <param name="attributes">The attributes associated to the event definition.</param>
            <param name="name">The index into the #Strings stream referencing the name of the event.</param>
            <param name="eventType">The TypeDefOrRef index (an index into either the TypeRef, TypeDef or TypeSpec table)
            indicating the type of the event.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the event definition.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the event.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.EventType">
            <summary>
            Gets a TypeDefOrRef index (an index into either the TypeRef, TypeDef or TypeSpec table) indicating the
            type of the event.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided event definitino row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow">
            <summary>
            Represents a single row in the event map metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single event map row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the event map table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the event map metadata table.
            </summary>
            <param name="parent">The index into the TypeDef table that this mapping is associating to an event list.</param>
            <param name="eventList">The index into the Event table indicating the first event that is defined in the event list.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Parent">
            <summary>
            Gets or sets an index into the TypeDef table that this mapping is associating to an event list.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.EventList">
            <summary>
            Gets or sets an index into the Event table indicating the first event that is defined in the event list.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow)">
            <summary>
            Determines whether this row is considered equal to the provided event map row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventMapRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow">
            <summary>
            Represents a single row in the event pointer metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single event pointer row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the event pointer table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the event pointer metadata table.
            </summary>
            <param name="event">The index into the Event table that this pointer references.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Event">
            <summary>
            Gets or sets an index into the Event table that this pointer references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow)">
            <summary>
            Determines whether this row is considered equal to the provided event pointer row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventPointerRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow">
            <summary>
            Represents a single row in the exported type metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single exported type row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the exported type table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the exported type metadata table.
            </summary>
            <param name="attributes">The attributes associated to the exported type.</param>
            <param name="typeDefinitionId">The RID hint of the type definition that was exported.</param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
            <param name="ns">The index into the #Strings heap containing the namespace of the type reference.</param>
            <param name="implementation">The Implementation index (an index into either the File, ExportedType or AssemblyRef table),
            indicating the scope that can be used to resolve the exported type.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the exported type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.TypeDefinitionId">
            <summary>
            Gets or sets the RID hint of the type definition that was exported.
            </summary>
            <remarks>
            This field is used as a hint only. If the entry in the table does not match the name and namespace referenced
            by <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Name"/> and <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Namespace"/> respectively, then the CLR falls back to a search for the
            type definition.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Namespace">
            <summary>
            Gets or sets an index into the #Strings heap containing the namespace of the type reference.
            </summary>
            <remarks>
            This value can be zero. If it is not, it should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Implementation">
            <summary>
            Gets or sets an Implementation index (an index into either the File, ExportedType or AssemblyRef table), indicating
            the scope that can be used to resolve the exported type.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow)">
            <summary>
            Determines whether this row is considered equal to the provided exported type row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes">
            <summary>
            Provides members defining all flags that can be associated to a field definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.FieldAccessMask">
            <summary>
            The bitmask that is being used to get the access level of the field.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.PrivateScope">
            <summary>
            Specifies the field cannot be referenced.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Private">
            <summary>
            Specifies the field can only be accessed by its declaring type.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.FamilyAndAssembly">
            <summary>
            Specifies the field can only be accessed by sub-types in the same assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Assembly">
            <summary>
            Specifies the field can only be accessed by members in the same assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Family">
            <summary>
            Specifies the field can only be accessed by this type and sub-types.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.FamilyOrAssembly">
            <summary>
            Specifies the field can only be accessed by sub-types and anyone in the assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Public">
            <summary>
            Specifies the field can be accesed by anyone who has visibility to this scope.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Static">
            <summary>
            Specifies the field can be accessed without requiring an instance.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.InitOnly">
            <summary>
            Specifies the field can only be initialized and not being written after the initialization.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.Literal">
            <summary>
            Specifies the field's value is at compile time constant.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.NotSerialized">
            <summary>
            Specifies the field does not have to be serialized when the type is remoted.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.SpecialName">
            <summary>
            Specifies the field uses a special name.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.PInvokeImpl">
            <summary>
            Specifies the field is an implementation that is being forwarded through PInvoke.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.ReservedMask">
            <summary>
            Reserved flags for runtime use only.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.RuntimeSpecialName">
            <summary>
            Specifies the runtime should check the name encoding.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.HasFieldMarshal">
            <summary>
            Specifies the field has got marshalling information.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.HasDefault">
            <summary>
            Specifies the field has got a default value.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes.HasFieldRva">
            <summary>
            Specifies the field has got an RVA.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow">
            <summary>
            Represents a single row in the field definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the field definition metadata table.
            </summary>
            <param name="attributes">The attributes associated to the field definition.</param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
            <param name="signature">The index into the #Blob heap containing the signature of the field.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the field definition.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Signature">
            <summary>
            Gets or sets an index into the #Blob heap containing the signature of the field. This includes the field type.
            </summary>
            <remarks>
            This value should always index a valid field signature.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided field definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow">
            <summary>
            Represents a single row in the field layout metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field layout row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field layout table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the field layout metadata table.
            </summary>
            <param name="offset">The offset of the field relative to the start of the enclosing structure type.</param>
            <param name="field">The index into the Field type referencing the field that this layout was assigned to.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Offset">
            <summary>
            Gets or sets the offset of the field relative to the start of the enclosing structure type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Field">
            <summary>
            Gets or sets an index into the Field type referencing the field that this layout was assigned to.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow)">
            <summary>
            Determines whether this row is considered equal to the provided field layout row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldLayoutRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow">
            <summary>
            Represents a single row in the field marshal metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field marshal row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field marshal table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the field marshal metadata table.
            </summary>
            <param name="parent">The HasFieldMarshal index (an index into either the Field or Parameter table) that this
            field marshaller is assigned to.</param>
            <param name="nativeType">The index into the #Blob stream containing the marshaller data.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Parent">
            <summary>
            Gets a HasFieldMarshal index (an index into either the Field or Parameter table) that this field marshaller
            is assigned to.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.NativeType">
            <summary>
            Gets or sets an index into the #Blob stream containing the marshaller data.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow)">
            <summary>
            Determines whether this row is considered equal to the provided field marshal row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldMarshalRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow">
            <summary>
            Represents a single row in the field pointer metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field pointer row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field pointer table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the field pointer metadata table.
            </summary>
            <param name="field">The index into the Field table that this pointer references.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Field">
            <summary>
            Gets or sets an index into the Field table that this pointer references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow)">
            <summary>
            Determines whether this row is considered equal to the provided field pointer row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldPointerRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow">
            <summary>
            Represents a single row in the implementation map metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.FromReader(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field RVA row from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field RVA table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.#ctor(AsmResolver.ISegmentReference,System.UInt32)">
            <summary>
            Creates a new row for the field RVA metadata table.
            </summary>
            <param name="data">The reference to the start of the initial field data.</param>
            <param name="field">The index into the Field table indicating the field that was assigned an initial value.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Data">
            <summary>
            Gets a reference to the start of the initial field data.
            </summary>
            <remarks>
            This field deviates from the original specification as described in ECMA-335. It replaces the RVA column of
            the field RVA row. Only the RVA of this reference is only considered when comparing two field RVA rows
            for equality.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Field">
            <summary>
            Gets or sets an index into the Field table indicating the field that was assigned an initial value.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow)">
            <summary>
            Determines whether this row is considered equal to the provided field RVA row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
            <remarks>
            When comparing both data fields, only the RVA is considered in this equality test. The exact type is ignored.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldRvaRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a file reference.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileAttributes.ContainsMetadata">
            <summary>
            Specifies the file reference contains metadata.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileAttributes.ContainsNoMetadata">
            <summary>
            Specifies the file references doesn't contain metadata.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow">
            <summary>
            Represents a single row in the file metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single file row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the file table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the file reference metadata table.
            </summary>
            <param name="attributes">The attributes associated to the file reference.</param>
            <param name="name">The index into the #Strings stream referencing the name of the file.</param>
            <param name="hashValue">The  index into the #Blob stream referencing the hash value of the file.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the file reference.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the file.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.HashValue">
            <summary>
            Gets or sets an index into the #Blob stream referencing the hash value of the file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow)">
            <summary>
            Determines whether this row is considered equal to the provided file row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a generic parameter.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.NonVariant">
            <summary>
            Specifies the generic parameter has no special variance rules applied to it.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.Covariant">
            <summary>
            Specifies the generic parameter is covariant and can appear as the result type of a method, the type of a read-only field, a declared base type or an implemented interface.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.Contravariant">
            <summary>
            Specifies the generic parameter is contravariant and can appear as a parameter type in method signatures.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.VarianceMask">
            <summary>
            Provides a mask for variance of type parameters, only applicable to generic parameters for generic interfaces and delegates
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.SpecialConstraintMask">
            <summary>
            Provides a mask for additional constraint rules.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.ReferenceTypeConstraint">
            <summary>
            Specifies the generic parameter's type argument must be a type reference.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.NotNullableValueTypeConstraint">
            <summary>
            Specifies the generic parameter's type argument must be a value type and not nullable.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes.DefaultConstructorConstraint">
            <summary>
            Specifies the generic parameter's type argument must have a public default constructor.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow">
            <summary>
            Represents a single row in the generic parameter metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single generic parameter row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the generic parameter table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates anew row for the generic parameter constraint metadata table.
            </summary>
            <param name="owner">The index into the GenericParam table indicating the owner of the constraint.</param>
            <param name="constraint">The TypeDefOrRef index (an index into either the TypeRef, TypeDef or TypeSpec table)
            indicating the constraint that was put on the generic parameter.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Owner">
            <summary>
            Gets or sets an index into the GenericParam table indicating the owner of the constraint.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Constraint">
            <summary>
            Gets a TypeDefOrRef index (an index into either the TypeRef, TypeDef or TypeSpec table) indicating the
            constraint that was put on the generic parameter.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow)">
            <summary>
            Determines whether this row is considered equal to the provided generic parameter constraint row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow">
            <summary>
            Represents a single row in the generic parameter metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single generic parameter row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the generic parameter table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.#ctor(System.UInt16,AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the generic parameter metadata table.
            </summary>
            <param name="number"></param>
            <param name="attributes"></param>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Number">
            <summary>
            Gets or sets the index of the generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Owner">
            <summary>
            Gets a TypeOrMethodDef index (an index into either the TypeDef or MethodDef table) indicating the owner
            of the generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the generic parameter.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow)">
            <summary>
            Determines whether this row is considered equal to the provided generic parameter row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow">
            <summary>
            Represents a single row in a metadata table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow.TableIndex">
            <summary>
            Gets or sets the index of the table that this row is stored in.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Writes the row to an output stream.
            </summary>
            <param name="writer">The output stream writer.</param>
            <param name="layout">The new layout of the table.</param>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes">
            <summary>
            Provides members defining all possible flags that can be assigned to a P/Invoke implementation mapping.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.NoMangle">
            <summary>
            Indicates no name mangling was used.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CharSetNotSpec">
            <summary>
            Indicates the character set was not specified.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CharSetAnsi">
            <summary>
            Indicates the character set used is ANSI.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CharSetUnicode">
            <summary>
            Indicates the character set used is unicode.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CharSetAuto">
            <summary>
            Indicates the character set is determined by the runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CharSetMask">
            <summary>
            Provides a mask for the character set.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.BestFitUseAssem">
            <summary>
            Indicates best fit mapping behavior when converting Unicode characters to ANSI characters is determined
            by the runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.BestFitEnabled">
            <summary>
            Indicates best-fit mapping behavior when converting Unicode characters to ANSI characters is enabled.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.BestFitDisabled">
            <summary>
            Indicates best-fit mapping behavior when converting Unicode characters to ANSI characters is disabled.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.BestFitMask">
            <summary>
            Provides a mask for the best-fit behaviour.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.ThrowOnUnmappableCharUseAssem">
            <summary>
            Indicates the throw behaviour on an unmappable Unicode character is undefined.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.ThrowOnUnmappableCharEnabled">
            <summary>
            Indicates the runtime will throw an exception on an unmappable Unicode character that is converted to an
            ANSI "?" character.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.ThrowOnUnmappableCharDisabled">
            <summary>
            Indicates the runtime will not throw an exception on an unmappable Unicode character that is converted to an
            ANSI "?" character.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.ThrowOnUnmappableCharMask">
            <summary>
            Provides a mask for the throw on unmappable behaviour.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.SupportsLastError">
            <summary>
            Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed
            method.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvWinapi">
            <summary>
            Indicates P/Invoke will use the native calling convention appropriate to target windows platform.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvCdecl">
            <summary>
            Indicates P/Invoke will use the C calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvStdcall">
            <summary>
            Indicates P/Invoke will use the stdcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvThiscall">
            <summary>
            Indicates P/Invoke will use the thiscall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvFastcall">
            <summary>
            Indicates P/Invoke will use the fastcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes.CallConvMask">
            <summary>
            Provides a mask for the calling convention flags.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow">
            <summary>
            Represents a single row in the implementation map metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single implementation map row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the implementation map table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the implementation map metadata table.
            </summary>
            <param name="attributes">The attributes associated to the implementation mapping.</param>
            <param name="memberForwarded">The MemberForwarded index (an index into either the Field or Method table)
            indicating the member that was assigned P/Invoke information.</param>
            <param name="importName">The index into the #Strings stream referencing the name of the imported member.</param>
            <param name="importScope">The  index into the ModuleRef table indicating the module that this imported member defines.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the implementation mapping.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.MemberForwarded">
            <summary>
            Gets a MemberForwarded index (an index into either the Field or Method table) indicating the member that was
            assigned P/Invoke information.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.ImportName">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the imported member.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.ImportScope">
            <summary>
            Gets or sets an index into the ModuleRef table indicating the module that this imported member defines.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow)">
            <summary>
            Determines whether this row is considered equal to the provided implementation map row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow">
            <summary>
            Represents a single row in the Portable PDB import scope metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB import scope metadata table.
            </summary>
            <param name="parent">
            An index into the import parent scope defining the parent scope, or 0 if it is the root scope.
            </param>
            <param name="imports">
            An index into the blob stream referencing the imports that this scope defines.
            </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Parent">
            <summary>
            Gets or sets an index into the import parent scope defining the parent scope, or 0 if it is the root scope.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Imports">
            <summary>
            Gets or sets an index into the blob stream referencing the imports that this scope defines.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB import scope row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the import scope table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow)">
            <summary>
            Determines whether this row is considered equal to the provided import scope row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImportScopeRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow">
            <summary>
            Represents a single row in the interface implementation metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single interface implementation row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the interface implementation table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the interface implementation metadata table.
            </summary>
            <param name="class">The index into the TypeDef table indicating the type that implements the interface.</param>
            <param name="interface">The TypeDefOrRef (an index to a row in either the TypeRef, TypeDef or TypeSpec table)
            indicating the interface that was implemented by the type.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Class">
            <summary>
            Gets or sets an index into the TypeDef table indicating the type that implements the interface.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Interface">
            <summary>
            Gets a TypeDefOrRef (an index to a row in either the TypeRef, TypeDef or TypeSpec table) indicating the
            interface that was implemented by the type.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow)">
            <summary>
            Determines whether this row is considered equal to the provided interface implementation row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow">
            <summary>
            Represents a single row in the Portable PDB local constant metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB Local Constant metadata table.
            </summary>
            <param name="name">An index into the strings stream referencing the name of the constant.</param>
            <param name="signature">An index into the blob stream referencing the signature of the constant.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Name">
            <summary>
            Gets or sets an index into the strings stream referencing the name of the constant.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Signature">
            <summary>
            Gets or sets an index into the blob stream referencing the signature of the constant.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB local constant row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the local constant table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow)">
            <summary>
            Determines whether this row is considered equal to the provided local constant row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalConstantRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow">
            <summary>
            Represents a single row in the Portable PDB local scope metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB Local Scope metadata table.
            </summary>
            <param name="method">An index into the method table that defines the scope.</param>
            <param name="importScope">An index into the import scope table that defines the scope.</param>
            <param name="variableList">An index into the local variable table referencing the first local variable in the method.</param>
            <param name="constantList">An index into the local constant table referencing the first constant in the method.</param>
            <param name="startOffset">The starting CIL offset of the scope.</param>
            <param name="length">The number of CIL bytes the scope spans.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Method">
            <summary>
            Gets or sets an index into the method table that defines the scope.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.ImportScope">
            <summary>
            Gets or sets an index into the import scope table that defines the scope.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.VariableList">
            <summary>
            Gets or sets an index into the local variable table referencing the first local variable in the method.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.ConstantList">
            <summary>
            Gets or sets an index into the local constant table referencing the first constant in the method.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.StartOffset">
            <summary>
            Gets or sets The starting CIL offset of the scope.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Length">
            <summary>
            Gets or sets the number of CIL bytes the scope spans.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB local scope row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the local socpe table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow)">
            <summary>
            Determines whether this row is considered equal to the provided local scope row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalScopeRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableAttributes">
            <summary>
            Provides members defining all possible flags that can be assigned to a local variable.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableAttributes.DebuggerHidden">
            <summary>
            Indicates the local variable should be hidden in a debugger view.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow">
            <summary>
            Represents a single row in the Portable PDB local variable metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableAttributes,System.UInt16,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB Local Variable metadata table.
            </summary>
            <param name="attributes">The attributes associated to the local variable.</param>
            <param name="index">The index of the local variable.</param>
            <param name="name">An index into the strings stream referencing the name of the local variable.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the local variable.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Index">
            <summary>
            Gets or sets the index of the local variable.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Name">
            <summary>
            Gets or sets an index into the strings stream referencing the name of the local variable.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB local variable row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the local variable table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow)">
            <summary>
            Determines whether this row is considered equal to the provided local variable row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.LocalVariableRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a manifest resource.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes.Public">
            <summary>
            Specifies the resource is exported from the asembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes.Private">
            <summary>
            Specifies the resource is private to the assembly.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow">
            <summary>
            Represents a single row in the manifest resource metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single manifest resource row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the manifest resource table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.#ctor(System.UInt32,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the manifest resource metadata table.
            </summary>
            <param name="offset">The byte offset within the referenced file at which the resource record begins. </param>
            <param name="attributes">The attributes associated with this resource.</param>
            <param name="name">The index into the #Strings heap referencing the name of the resource.</param>
            <param name="implementation">The Implementation index (an index into either the File, AssemblyRef or
            ExportedType table) indicating the file that contains the resource data. </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Offset">
            <summary>
            Gets or sets the byte offset within the referenced file at which the resource record begins.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Attributes">
            <summary>
            Gets or sets the attributes associated with this resource.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap referencing the name of the resource.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Implementation">
            <summary>
            Gets or sets an Implementation index (an index into either the File, AssemblyRef or ExportedType table) indicating
            the file that contains the resource data.
            </summary>
            <remarks>
            When this field is set to zero, the resource data is embedded into the current assembly.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow)">
            <summary>
            Determines whether this row is considered equal to the provided manifest resource row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow">
            <summary>
            Represents a single row in the member reference metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single member reference row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the member reference table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the member reference metadata table.
            </summary>
            <param name="parent">The MemberRefParent index indicating the parent member reference or definition that
            defines or can resolve the member reference.</param>
            <param name="name">The index into the #Strings heap containing the name of the member reference.</param>
            <param name="signature">The index into the #Blob heap containing the signature of the member.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Parent">
            <summary>
            Gets a MemberRefParent index (an index into either the TypeDef, TypeRef, ModuleRef, Method or TypeSpec table)
            indicating the parent member reference or definition that defines or can resolve the member reference.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the member reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Signature">
            <summary>
            Gets or sets an index into the #Blob heap containing the signature of the member.
            </summary>
            <remarks>
            This value should always index a valid member signature. This value can also be used to determine whether
            the member reference is a field or a method.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow)">
            <summary>
            Determines whether this row is considered equal to the provided member reference row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator">
            <summary>
            Provides a mechanism for enumerating all column cells in a row of a metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.IMetadataRow)">
            <summary>
            Creates a new metadata row column enumerator.
            </summary>
            <param name="row"></param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MetadataRowColumnEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a method definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.CompilerControlled">
            <summary>
            Specifies the method can't be referenced.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Private">
            <summary>
            Specifies the method can only be accessed by its declaring type.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.FamilyAndAssembly">
            <summary>
            Specifies the method can only be accessed by sub-types in the same assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Assembly">
            <summary>
            Specifies the method can only be accessed by members in the same assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Family">
            <summary>
            Specifies that the method can only be accessed by this type and sub-types.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.FamilyOrAssembly">
            <summary>
            Specifies the method can only be accessed by sub-types and anyone in the assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Public">
            <summary>
            Specifies the method can be accesed by anyone who has visibility to this scope.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.MemberAccessMask">
            <summary>
            Provides a bitmask for all flags related to member access.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.UnmanagedExport">
            <summary>
            Indicates that the managed method is exported by thunk to unmanaged code.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Static">
            <summary>
            Specifies the method can be accessed without requiring an instance.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Final">
            <summary>
            Specifies the method cannot be overridden.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Virtual">
            <summary>
            Specifies the method is virtual.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.HideBySig">
            <summary>
            Specifies the method is being distinguished by it's name + signature.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.ReuseSlot">
            <summary>
            Specifies the method reuses an existing slot in vtable.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.NewSlot">
            <summary>
            Specifies the method always gets a new slot in the vtable.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.VtableLayoutMask">
            <summary>
            Provides a bitmask for flags related to the vtable layout.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.CheckAccessOnOverride">
            <summary>
            Indicates that the method can only be overridden when it is also accessible.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Abstract">
            <summary>
            Indicates the method is abstract and needs to be overridden in a derived class.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.SpecialName">
            <summary>
            Specifies that the method uses a special name.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.RuntimeSpecialName">
            <summary>
            Specifies that the runtime should check the name encoding.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.PInvokeImpl">
            <summary>
            Specifies that the method is an implementation that is being forwarded through PInvoke.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.HasSecurity">
            <summary>
            Specifies the method has security associate with it.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.RequireSecObject">
            <summary>
            Specifies the method calls another method containing security code.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow">
            <summary>
            Represents a single row in the Portable PDB Document metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB Method Debug Information metadata table.
            </summary>
            <param name="document">
            The index into the Document table referencing the document that declares the method.
            </param>
            <param name="sequencePoints">
            The index into the blob stream referencing an array of sequence points that make up the method.
            </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Document">
            <summary>
            Gets or sets an index into the Document table referencing the document that declares the method, or 0
            if the method does not have sequence points or spans multiple documents.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.SequencePoints">
            <summary>
            Gets or sets an index into the blob stream referencing an array of sequence points that make up the method,
            or 0 if no sequence points are available.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB Method Debug Information row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the method debug information table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow)">
            <summary>
            Determines whether this row is considered equal to the provided method debug information row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDebugInformationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow">
            <summary>
            Represents a single row in the method definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.FromReader(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single method definition row from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the method definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.#ctor(AsmResolver.ISegmentReference,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the method definition metadata table.
            </summary>
            <param name="body">The reference to the beginning of the method body. </param>
            <param name="implAttributes">The characteristics of the implementation of the method body.</param>
            <param name="attributes">The attributes associated to the method.</param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
            <param name="signature">The index into the #Blob heap containing the signature of the method.</param>
            <param name="parameterList">The index into the Param (or ParamPtr) table, representing the first parameter
            that this method defines.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Body">
             <summary>
             Gets a reference to the beginning of the method body.
             </summary>
             <remarks>
             This field deviates from the original specification as described in ECMA-335. It replaces the RVA column of
             the method definition row. Only the RVA of this reference is only considered when comparing two method definition
             rows for equality.
            
             If this value is null, the method does not define any method body.
             </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.ImplAttributes">
            <summary>
            Gets or sets the characteristics of the implementation of the method body.
            </summary>
            <remarks>
            These attributes dictate the format of <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Body"/>.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the method.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Signature">
            <summary>
            Gets or sets an index into the #Blob heap containing the signature of the method. This includes the return type,
            as well as parameter types.
            </summary>
            <remarks>
            This value should always index a valid method signature.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.ParameterList">
            <summary>
            Gets or sets an index into the Param (or ParamPtr) table, representing the first parameter that this method defines.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided method definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
            <remarks>
            When comparing both method bodies, only the RVA is considered in this equality test. The exact type is ignored.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes">
            <summary>
            Provides members defining all flags that dictate the implementation of a method body.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.IL">
            <summary>
            Method implementation is IL.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.Native">
            <summary>
            Method implementation is native.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.OPTIL">
            <summary>
            Method implementation is OPTIL.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.Runtime">
            <summary>
            Method implementation is provided by the runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.CodeTypeMask">
            <summary>
            Provides a bitmask for obtaining the flags related to the code type of the method.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.Unmanaged">
            <summary>
            Method implementation is unmanaged.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.Managed">
            <summary>
            Method implementation is managed.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.ManagedMask">
            <summary>
            Provides a bitmask for obtaining the flags specifying whether the code is managed or unmanaged.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.ForwardRef">
            <summary>
            Indicates the method is defined; used primarily in merge scenarios.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.NoOptimization">
            <summary>
            Method will not be optimized when generating native code.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.PreserveSig">
            <summary>
            Indicates the method signature is not to be mangled to do HRESULT conversion.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.InternalCall">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.Synchronized">
            <summary>
            Method is single threaded through the body.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplAttributes.NoInlining">
            <summary>
            Method may not be inlined.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow">
            <summary>
            Represents a single row in the method implementation metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single method implementation row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the method implementation table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the method implementation metadata table.
            </summary>
            <param name="class">The index into the TypeDef table indicating the class that inherited methods from an interface.</param>
            <param name="methodBody">The MethodDefOrRef index indicating the method which provides the implementation
            for the interface method.</param>
            <param name="methodDeclaration">The MethodDefOrRef index indicating the interface method which is implemented.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Class">
            <summary>
            Gets or sets an index into the TypeDef table indicating the class that inherited methods from an interface.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.MethodBody">
            <summary>
            Gets a MethodDefOrRef index (an index into either the Method or MemberRef table) indicating the method
            which provides the implementation for the interface method.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.MethodDeclaration">
            <summary>
            Gets a MethodDefOrRef index (an index into either the Method or MemberRef table) indicating the interface
            method which is implemented.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow)">
            <summary>
            Determines whether this row is considered equal to the provided method implementation row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodImplementationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow">
            <summary>
            Represents a single row in the method pointer metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single field pointer row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the field pointer table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the method pointer metadata table.
            </summary>
            <param name="method">The index into the Method table that this pointer references.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Method">
            <summary>
            Gets or sets an index into the Method table that this pointer references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow)">
            <summary>
            Determines whether this row is considered equal to the provided method pointer row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodPointerRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a method semantics row.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.Setter">
            <summary>
            The method is a setter for a property.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.Getter">
            <summary>
            The method is a getter for a property.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.Other">
            <summary>
            The method is an unspecified method for a property or event.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.AddOn">
            <summary>
            The method is an AddOn for an event.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.RemoveOn">
            <summary>
            The method is a RemoveOn for an event.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes.Fire">
            <summary>
            The method is used to fire an event.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow">
            <summary>
            Represents a single row in the method semantics metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single method semantics row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the method semantics table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the method semantics table.
            </summary>
            <param name="attributes">The semantic attributes that are assigned to the method.</param>
            <param name="method">The index into the method definition table indicating the method that was assigned
            special semantics.</param>
            <param name="association">The index into the method definition table indicating the method that was assigned
            special semantics.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Attributes">
            <summary>
            Gets or sets the semantic attributes that are assigned to the method.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Method">
            <summary>
            Gets or sets an index into the method definition table indicating the method that was assigned special semantics.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Association">
            <summary>
            Gets a HasSemantics index (an index into either the event or property table) indicating the member the method
            is associated with.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow)">
            <summary>
            Determines whether this row is considered equal to the provided method semantics row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow">
            <summary>
            Represents a single row in the method specification metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single method specification row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the method specification table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the method specification metadata table.
            </summary>
            <param name="method">The index into the method definition table indicating the method to be instantiated.</param>
            <param name="instantiation">The index into the #Blob stream referencing the instantiation parameters of the method.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Method">
            <summary>
            Gets or sets an index into the method definition table indicating the method to be instantiated.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Instantiation">
            <summary>
            Gets or sets an index into the #Blob stream referencing the instantiation parameters of the method.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow)">
            <summary>
            Determines whether this row is considered equal to the provided method specification row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow">
            <summary>
            Represents a single row in the module definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single module definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the module definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.#ctor(System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the module definition metadata table.
            </summary>
            <param name="generation">The generation number of the module.</param>
            <param name="name">The index into the #Strings heap containing the name of the module. </param>
            <param name="mvid">The index into the #GUID heap containing the unique identifier to distinguish
            between two versions of the same module.</param>
            <param name="encId"></param>
            <param name="encBaseId"></param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Generation">
            <summary>
            Gets or sets the generation number of the module.
            </summary>
            <remarks>
            This value is reserved and should be set to zero.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Mvid">
            <summary>
            Gets or sets an index into the #GUID heap containing the unique identifier to distinguish between two versions
            of the same module.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.EncId">
            <summary>
            Gets or sets an index into the #GUID heap containing the unique identifier to distinguish between two
            edit-and-continue generations.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.EncBaseId">
            <summary>
            Gets or sets an index into the #GUID heap containing the base identifier of an edit-and-continue generation.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided module row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow">
            <summary>
            Represents a single row in the module definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single module reference row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the module reference table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the module reference metadata table.
            </summary>
            <param name="name">The index into the #Strings heap referencing the name of the external module that was
            imported.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap referencing the name of the external module that was imported.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow)">
            <summary>
            Determines whether this row is considered equal to the provided module row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow">
            <summary>
            Represents a single row in the nested class metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single nested class row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the nested class table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the nested class metadata table.
            </summary>
            <param name="nestedClass">The index into the TypeDef table indicating the class that was nested into another class.</param>
            <param name="enclosingClass">The index into the TypeDef table indicating the enclosing class.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.NestedClass">
            <summary>
            Gets or sets an index into the TypeDef table indicating the class that was nested into another class.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.EnclosingClass">
            <summary>
            Gets or sets an index into the TypeDef table indicating the enclosing class.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow)">
            <summary>
            Determines whether this row is considered equal to the provided nested class row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.NestedClassRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a parameter definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes.In">
            <summary>
            Parameter is an input parameter.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes.Out">
            <summary>
            Parameter is an output parameter.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes.Optional">
            <summary>
            Parameter is an optional parameter.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes.HasDefault">
            <summary>
            Parameter has got a default value.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes.HasFieldMarshal">
            <summary>
            Parameter has got field marshalling information.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow">
            <summary>
            Represents a single row in the parameter definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single parameter definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the parameter definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes,System.UInt16,System.UInt32)">
            <summary>
            Creates a new row for the parameter definition metadata table.
            </summary>
            <param name="attributes">The attributes associated to the parameter.</param>
            <param name="sequence">The index of the parameter definition.</param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Sequence">
            <summary>
            Gets or sets the index of the parameter definition.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            If this value is zero, the parameter name is considered <c>null</c>.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided parameter definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow">
            <summary>
            Represents a single row in the parameter pointer metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single parameter pointer row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the parameter pointer table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the parameter pointer metadata table.
            </summary>
            <param name="parameter">The index into the Parameter table that this pointer references.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Parameter">
            <summary>
            Gets or sets an index into the Parameter table that this pointer references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow)">
            <summary>
            Determines whether this row is considered equal to the provided parameter pointer row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterPointerRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a property definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes.None">
            <summary>
            The property has no attribute.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes.SpecialName">
            <summary>
            The property uses a special name.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes.RuntimeSpecialName">
            <summary>
            The runtime should check the name encoding.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes.HasDefault">
            <summary>
            The property has got a default value.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow">
            <summary>
            Represents a single row in the property definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single property definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the property definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the property definition metadata table.
            </summary>
            <param name="attributes">The attributes associated to the property definition.</param>
            <param name="name">The index into the #Strings stream referencing the name of the property.</param>
            <param name="type">The index into the #Blob stream referencing the signature of the property.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the property definition.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings stream referencing the name of the property.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Type">
            <summary>
            Gets or sets an index into the #Blob stream referencing the signature of the property. This includes the property
            type.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided parameter definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow">
            <summary>
            Represents a single row in the property map metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single property map row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the property map table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the property map metadata table.
            </summary>
            <param name="parent">The index into the TypeDef table that this mapping is associating to an property list.</param>
            <param name="propertyList">The index into the Event table indicating the first property that is defined in
            the property list.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Parent">
            <summary>
            Gets or sets an index into the TypeDef table that this mapping is associating to an property list.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.PropertyList">
            <summary>
            Gets or sets an index into the Event table indicating the first property that is defined in the property list.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow)">
            <summary>
            Determines whether this row is considered equal to the provided property map row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyMapRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow">
            <summary>
            Represents a single row in the property pointer metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single property pointer row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the property pointer table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the property pointer metadata table.
            </summary>
            <param name="property">The index into the Property table that this pointer references.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Property">
            <summary>
            Gets or sets an index into the Property table that this pointer references.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow)">
            <summary>
            Determines whether this row is considered equal to the provided property pointer row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyPointerRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction">
            <summary>
            Provides members defining all possible flags that can be assigned to a security declaration attribute.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.Demand">
            <summary>
            Indicates all callers higher in the call stack are required to have been granted the permission specified
            by the current permission object.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.Assert">
            <summary>
            Indicates the calling code can access the resource identified by the current permission object,
            even if callers higher in the stack have not been granted permission to access the resource.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.Deny">
            <summary>
            Indicates the ability to access the resource specified by the current permission object is denied to callers,
            even if they have been granted permission to access it.
            </summary>
            <remarks>
            This value is deprecated.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.PermitOnly">
            <summary>
            Indicatges only the resources specified by this permission object can be accessed, even if the code has
            been granted permission to access other resources.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.LinkDemand">
            <summary>
            Indicates the immediate caller is required to have been granted the specified permission.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.InheritanceDemand">
            <summary>
            Indicates the derived class inheriting the class or overriding a method is required to have been granted the
            specified permission.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.RequestMinimum">
            <summary>
            Indicates the request for the minimum permissions required for code to run. This action can only be used
            within the scope of the assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.RequestOptional">
            <summary>
            Indicates the request for additional permissions that are optional (not required to run). This request
            implicitly refuses all other permissions not specifically requested. This action can only be used within
            the scope of the assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction.RequestRefuse">
            <summary>
            The request that permissions that might be misused will not be granted to the calling code.
            This action can only be used within the scope of the assembly.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow">
            <summary>
            Represents a single row in the security declaration metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single security declaration row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the security declaration table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the security declaration metadata table.
            </summary>
            <param name="action">The action to be performed.</param>
            <param name="parent">The HasDeclSecurity index that this security attribute is assigned to.</param>
            <param name="permissionSet">The index into the #Blob stream referencing the permission set assigned to the member.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Action">
            <summary>
            Gets or sets the action to be performed.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Parent">
            <summary>
            Gets a HasDeclSecurity index (an index into either the TypeDef, Method or Assembly table) that this
            security attribute is assigned to.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.PermissionSet">
            <summary>
            Gets or sets an index into the #Blob stream referencing the permission set assigned to the member.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow)">
            <summary>
            Determines whether this row is considered equal to the provided security declaration row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow">
            <summary>
            Represents a single row in the stand-alone signature metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single stand-alone signature row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the stand-alone signature table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the stand-alone signature metadata table.
            </summary>
            <param name="signature">The index into the #Blob stream referencing the signature that was exposed by this row.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Signature">
            <summary>
            Gets or sets an index into the #Blob stream referencing the signature that was exposed by this row.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow)">
            <summary>
            Determines whether this row is considered equal to the provided stand-alone signature row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow">
            <summary>
            Represents a single row in the Portable PDB state machine method metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the Portable PDB state machine method metadata table.
            </summary>
            <param name="moveNextMethod">
            An index into the method table referencing the MoveNext method of an async state machine.
            </param>
            <param name="kickoffMethod">
            An index into the method table referencing the kickoff method of an async state machine.
            </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.MoveNextMethod">
            <summary>
            Gets or sets an index into the method table referencing the MoveNext method of an async state machine.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.KickoffMethod">
            <summary>
            Gets or sets an index into the method table referencing the kickoff method of an async state machine.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single Portable PDB state machine method row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the state machine method table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow)">
            <summary>
            Determines whether this row is considered equal to the provided state machine method row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.StateMachineMethodRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a type definition.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NotPublic">
            <summary>
            Class is not public scope.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Public">
            <summary>
            Class is public scope.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedPublic">
            <summary>
            Class is nested with public visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedPrivate">
            <summary>
            Class is nested with private visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedFamily">
            <summary>
            Class is nested with family visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedAssembly">
            <summary>
            Class is nested with assembly visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedFamilyAndAssembly">
            <summary>
            Class is nested with family and assembly visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.NestedFamilyOrAssembly">
            <summary>
            Class is nested with family or assembly visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.VisibilityMask">
            <summary>
            Provides a bitmask for obtaining flags related to visibility.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.AutoLayout">
            <summary>
            Class fields are auto-laid out
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.SequentialLayout">
            <summary>
            Class fields are laid out sequentially
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.ExplicitLayout">
            <summary>
            Layout is supplied explicitly
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.LayoutMask">
            <summary>
            Provides a bitmask for obtaining flags related to the layout of the type.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Class">
            <summary>
            BaseType is a class.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Interface">
            <summary>
            BaseType is an interface.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.ClassSemanticsMask">
            <summary>
            Provides a bitmask for obtaining flags related to the semantics of the type.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Abstract">
            <summary>
            Class is abstract.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Sealed">
            <summary>
            Class is concrete and may not be extended.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.SpecialName">
            <summary>
            Class name is special. Name describes how.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.RuntimeSpecialName">
            <summary>
            Runtime should check name encoding.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Import">
            <summary>
            Class / interface is imported.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Serializable">
            <summary>
            The class is Serializable.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.AnsiClass">
            <summary>
            LPTSTR is interpreted as ANSI in this class.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.UnicodeClass">
            <summary>
            LPTSTR is interpreted as UNICODE.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.AutoClass">
            <summary>
            LPTSTR is interpreted automatically
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.CustomFormatClass">
            <summary>
            A non-standard encoding specified by CustomFormatMask.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.StringFormatMask">
            <summary>
            Provides a bitmask for obtaining flag related to string format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.BeforeFieldInit">
            <summary>
            Initialize the class any time before first static field access.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.Forwarder">
            <summary>
            This ExportedType is a type forwarder.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes.HasSecurity">
            <summary>
            Class has security associate with it.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow">
            <summary>
            Represents a single row in the type definition metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single type definition row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the type definition table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the type definition metadata table.
            </summary>
            <param name="attributes">The attributes associated to the type.</param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
            <param name="ns">The index into the #Strings heap containing the namespace of the type reference.</param>
            <param name="extends">The TypeDefOrRef coded index representing the base type of this type.</param>
            <param name="fieldList">The index into the Field (or FieldPtr) table, representing the first field defined
            in the type. </param>
            <param name="methodList">The index into the Method (or MethodPtr) table, representing the first method defined
            in the type. </param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Attributes">
            <summary>
            Gets or sets the attributes associated to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Namespace">
            <summary>
            Gets or sets an index into the #Strings heap containing the namespace of the type reference.
            </summary>
            <remarks>
            This value can be zero. If it is not, it should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Extends">
            <summary>
            Gets a TypeDefOrRef coded index (an index to a row in either the TypeRef, TypeDef or TypeSpec table)
            representing the base type of this type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.FieldList">
            <summary>
            Gets or sets an index into the Field (or FieldPtr) table, representing the first field defined in the type.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.MethodList">
            <summary>
            Gets or sets an index into the Method (or MethodPtr) table, representing the first method defined in the type.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow)">
            <summary>
            Determines whether this row is considered equal to the provided type definition row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow">
            <summary>
            Represents a single row in the type reference metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single type reference row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the type reference table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new row for the type reference metadata table.
            </summary>
            <param name="resolutionScope">The  ResolutionScope coded index  containing the scope that can resolve this
            type reference. </param>
            <param name="name">The index into the #Strings heap containing the name of the type reference.</param>
            <param name="ns">The index into the #Strings heap containing the namespace of the type reference.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.ResolutionScope">
            <summary>
            Gets a ResolutionScope coded index (an index to a row in either the Module, ModuleRef, AssemblyRef or TypeRef table)
            containing the scope that can resolve this type reference.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Name">
            <summary>
            Gets or sets an index into the #Strings heap containing the name of the type reference.
            </summary>
            <remarks>
            This value should always index a non-empty string.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Namespace">
            <summary>
            Gets or sets an index into the #Strings heap containing the namespace of the type reference.
            </summary>
            <remarks>
            This value can be zero. If it is not, it should always index a non-empty string.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow)">
            <summary>
            Determines whether this row is considered equal to the provided type reference row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow">
            <summary>
            Represents a single row in the type specification metadata table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <summary>
            Reads a single type specification row from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the type specification table.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.#ctor(System.UInt32)">
            <summary>
            Creates a new row for the type specification metadata table.
            </summary>
            <param name="signature">The index into the #Blob stream referencing the type signature that was exposed by
            this row.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.TableIndex">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Signature">
            <summary>
            Gets or sets an index into the #Blob stream referencing the type signature that was exposed by this row.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Equals(AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow)">
            <summary>
            Determines whether this row is considered equal to the provided module row.
            </summary>
            <param name="other">The other row.</param>
            <returns><c>true</c> if the rows are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1">
            <summary>
            Provides an implementation of a metadata table that was serialized to a PE file.
            </summary>
            <typeparam name="TRow">The type of rows that this table stores.</typeparam>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.ReadRowDelegate">
            <summary>
            Defines a method that reads a single row from an input stream, using the provided table layout.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the table.</param>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.ReadRowExtendedDelegate">
            <summary>
            Defines a method that reads a single row from an input stream, using the provided table layout.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <param name="layout">The layout of the table.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.#ctor(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout,System.Boolean,AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable{`0}.ReadRowDelegate)">
            <summary>
            Reads a metadata table from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="tableIndex">The index of the table.</param>
            <param name="originalLayout">The layout of the table.</param>
            <param name="isSorted">Indicates the table is sorted or not.</param>
            <param name="readRow">The method to use for reading each row in the table.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.#ctor(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex,AsmResolver.PE.DotNet.Metadata.Tables.TableLayout,System.Boolean,AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable{`0}.ReadRowExtendedDelegate)">
            <summary>
            Reads a metadata table from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <param name="tableIndex">The index of the table.</param>
            <param name="originalLayout">The layout of the table.</param>
            <param name="isSorted">Indicates the table is sorted or not.</param>
            <param name="readRow">The method to use for reading each row in the table.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.Count">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedMetadataTable`1.GetRows">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream">
            <summary>
            Provides an implementation of a tables stream that obtains tables from a readable segment in a file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream._combinedRowCounts">
            <summary>
            Same as <see cref="F:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream._rowCounts"/> but may contain row counts from an external tables stream.
            This is required for metadata directories containing Portable PDB debug data.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream._indexSizes">
            <summary>
            Contains the initial sizes of every column type.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.#ctor(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,System.String,System.Byte[])">
            <summary>
            Creates a new tables stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.#ctor(AsmResolver.PE.DotNet.Metadata.MetadataReaderContext,System.String,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new tables stream with the provided file segment reader as the raw contents of the stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.Initialize(AsmResolver.PE.DotNet.Metadata.IMetadata)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.GetColumnSize(AsmResolver.PE.DotNet.Metadata.Tables.ColumnType)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.SerializedTableStream.GetTables">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TableIndex">
            <summary>
            Provides members defining all metadata tables that can be present in a tables stream.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TableIndexExtensions">
            <summary>
            Provides extension methods to the <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.TableIndex"/> enumeration.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TableIndexExtensions.IsValidTableIndex(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Determines whether the provided index is a valid table index.
            </summary>
            <param name="index">The index.</param>
            <returns><c>true</c> if valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TableLayout">
            <summary>
            Provides a description of the layout of a table in the tables metadata stream. This includes information about
            the name, data type and size in bytes of each column.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TableLayout.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.ColumnLayout[])">
            <summary>
            Defines a new layout for a metadata table.
            </summary>
            <param name="columns">The column layouts.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TableLayout.Columns">
            <summary>
            Gets a collection of columns that this table defines.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TableLayout.RowSize">
            <summary>
            Gets the total size in bytes of a single row in the table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TableLayout.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream">
            <summary>
            Represents the metadata stream containing tables defining each member in a .NET assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.CompressedStreamName">
            <summary>
            The default name of a table stream using the compressed format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.EncStreamName">
            <summary>
            The default name of a table stream using the Edit-and-Continue, uncompressed format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.MinimalStreamName">
            <summary>
            The default name of a table stream using the minimal format.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.UncompressedStreamName">
            <summary>
            The default name of a table stream using the uncompressed format.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.#ctor">
            <summary>
            Creates a new, empty tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Reserved">
            <summary>
            Reserved, for future use.
            </summary>
            <remarks>
            This field must be set to 0 by the CoreCLR implementation of the runtime.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.MajorVersion">
            <summary>
            Gets or sets the major version number of the schema.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.MinorVersion">
            <summary>
            Gets or sets the minor version number of the schema.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Flags">
            <summary>
            Gets or sets the flags of the tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.StringIndexSize">
            <summary>
            Gets or sets a value indicating each string index in the tables stream is a 4 byte integer instead of a
            2 byte integer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GuidIndexSize">
            <summary>
            Gets or sets a value indicating each GUID index in the tables stream is a 4 byte integer instead of a
            2 byte integer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.BlobIndexSize">
            <summary>
            Gets or sets a value indicating each blob index in the tables stream is a 4 byte integer instead of a
            2 byte integer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasPaddingBit">
            <summary>
            Gets or sets a value indicating the tables were created with an extra bit in columns.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasDeltaOnly">
            <summary>
            Gets or sets a value indicating the tables stream contains only deltas.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasExtraData">
            <summary>
            Gets or sets a value indicating the tables stream persists an extra 4 bytes of data.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasDeletedTokens">
            <summary>
            Gets or sets a value indicating the tables stream may contain _Delete tokens.
            This only occurs in ENC metadata.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Log2LargestRid">
            <summary>
            Gets the bit-length of the largest relative identifier (RID) in the table stream.
            </summary>
            <remarks>
            This value is ignored by the CoreCLR implementation of the runtime, and the standard compilers always set
            this value to 1.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ExtraData">
            <summary>
            Gets or sets the extra 4 bytes data that is persisted after the row counts of the tables stream.
            </summary>
            <remarks>
            This value is not specified by the ECMA-335 and is only present when <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasExtraData"/> is
            set to <c>true</c>. Writing to this value does not automatically update <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasExtraData"/>,
            and is only persisted in the final output if <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasExtraData"/> is set to <c>true</c>.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasExternalRowCounts">
            <summary>
            Gets a value indicating whether the tables stream is assigned with row counts that originate from an
            external .NET metadata file.
            </summary>
            <remarks>
            This value is typically set to <c>false</c>, except for Portable PDB metadata table streams.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ExternalRowCounts">
            <summary>
            Gets or sets an array of row counts originating from an external .NET metadata file that this table stream
            should consider when encoding indices.
            </summary>
            <remarks>
            This value is typically <c>null</c>, except for Portable PDB metadata table streams.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Tables">
            <summary>
            Gets a collection of all tables in the tables stream.
            </summary>
            <remarks>
            This collection always contains all tables, in the same order as <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.TableIndex"/> defines, regardless
            of whether a table actually has elements or not.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.TableLayouts">
            <summary>
            Gets the layout of all tables in the stream.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTableRowCount(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Obtains the implied table row count for the provided table index.
            </summary>
            <param name="table">The table index.</param>
            <returns>The row count.</returns>
            <remarks>
            This method takes any external row counts from <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ExternalRowCounts"/> into account.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTableIndexSize(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Obtains the implied table index size for the provided table index.
            </summary>
            <param name="table">The table index.</param>
            <returns>The index size.</returns>
            <remarks>
            This method takes any external row counts from <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ExternalRowCounts"/> into account.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.SynchronizeTableLayoutsWithFlags">
            <summary>
            Updates the layouts of each metadata table, according to the <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Flags"/> property.
            </summary>
            <remarks>
            This method should be called after updating any of the index sizes in any of the <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Flags"/>,
            <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.StringIndexSize"/>, <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.BlobIndexSize"/> or <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GuidIndexSize"/> properties.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ComputeValidBitmask">
            <summary>
            Computes the valid bitmask of the tables stream, which is a 64-bit integer where each bit specifies whether
            a table is present in the stream or not.
            </summary>
            <returns>The valid bitmask.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.ComputeSortedBitmask">
            <summary>
            Computes the sorted bitmask of the tables stream, which is a 64-bit integer where each bit specifies whether
            a table is sorted or not.
            </summary>
            <returns>The valid bitmask.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTablesCount(System.UInt64)">
            <summary>
            Gets a value indicating the total number of tables in the stream.
            </summary>
            <param name="validBitmask">The valid bitmask, indicating all present tables in the stream.</param>
            <returns>The number of tables.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTablesSize(System.UInt64)">
            <summary>
            Computes the total amount of bytes that each table combined needs.
            </summary>
            <param name="validBitmask">The valid bitmask, indicating all present tables in the stream.</param>
            <returns>The total amount of bytes.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.WriteRowCounts(AsmResolver.IO.IBinaryStreamWriter,System.UInt64)">
            <summary>
            Writes for each present table the row count to the output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="validBitmask">The valid bitmask, indicating all present tables in the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.WriteTables(AsmResolver.IO.IBinaryStreamWriter,System.UInt64)">
            <summary>
            Writes each present table to the output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="validBitmask">The valid bitmask, indicating all present tables in the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.HasTable(System.UInt64,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Determines whether a table is present in the tables stream, based on a valid bitmask.
            </summary>
            <param name="validMask">The valid bitmask, indicating all present tables in the stream.</param>
            <param name="table">The table to verify existence of.</param>
            <returns><c>true</c> if the table is present, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.IsSorted(System.UInt64,AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Determines whether a table is sorted in the tables stream, based on a sorted bitmask.
            </summary>
            <param name="sortedMask">The sorted bitmask, indicating all sorted tables in the stream.</param>
            <param name="table">The table to verify.</param>
            <returns><c>true</c> if the table is sorted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTable(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Gets a table by its table index.
            </summary>
            <param name="index">The table index.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTable``1">
            <summary>
            Gets a table by its row type.
            </summary>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
            <returns>The table.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTable``1(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Gets a table by its row type.
            </summary>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
            <param name="index">The table index.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetColumnSize(AsmResolver.PE.DotNet.Metadata.Tables.ColumnType)">
            <summary>
            Gets a value indicating the size of a column in a table.
            </summary>
            <param name="columnType">The column type to verify.</param>
            <returns>The column size.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetIndexEncoder(AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex)">
            <summary>
            Gets an encoder/decoder for a particular coded index.
            </summary>
            <param name="index">The type of coded index to encode/decode.</param>
            <returns>The encoder.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetFieldRange(System.UInt32)">
            <summary>
            Gets the range of metadata tokens referencing fields that a type defines.
            </summary>
            <param name="typeDefRid">The row identifier of the type definition to obtain the fields from.</param>
            <returns>The range of metadata tokens.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetMethodRange(System.UInt32)">
            <summary>
            Gets the range of metadata tokens referencing methods that a type defines.
            </summary>
            <param name="typeDefRid">The row identifier of the type definition to obtain the methods from.</param>
            <returns>The range of metadata tokens.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetParameterRange(System.UInt32)">
            <summary>
            Gets the range of metadata tokens referencing parameters that a method defines.
            </summary>
            <param name="methodDefRid">The row identifier of the method definition to obtain the parameters from.</param>
            <returns>The range of metadata tokens.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetPropertyRange(System.UInt32)">
            <summary>
            Gets the range of metadata tokens referencing properties that a property map row defines.
            </summary>
            <param name="propertyMapRid">The row identifier of the property map to obtain the properties from.</param>
            <returns>The range of metadata tokens.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetEventRange(System.UInt32)">
            <summary>
            Gets the range of metadata tokens referencing events that a event map row defines.
            </summary>
            <param name="eventMapRid">The row identifier of the event map to obtain the events from.</param>
            <returns>The range of metadata tokens.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTables">
            <summary>
            Obtains the collection of tables in the tables stream.
            </summary>
            <returns>The tables, including empty tables if there are any.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.Tables"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TablesStream.GetTableLayouts">
            <summary>
            Gets an ordered collection of the current table layouts.
            </summary>
            <returns>The table layouts.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags">
            <summary>
            Provides members for all possible flags that the tables stream defines.
            </summary>
            <remarks>
            This enum is based on the CoreCLR implementation of the runtime, and therefore contains more members than the
            ECMA-335 specifies. For reference see https://github.com/dotnet/coreclr/blob/fcd2d3278ba2eb4da78ddee979fb4c475bd14b37/src/md/inc/metamodel.h#L247
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.LongStringIndices">
            <summary>
            Indicates each string index in the tables stream is a 4 byte integer instead of a 2 byte integer. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.LongGuidIndices">
            <summary>
            Indicates each GUID index in the tables stream is a 4 byte integer instead of a 2 byte integer. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.LongBlobIndices">
            <summary>
            Indicates each blob index in the tables stream is a 4 byte integer instead of a 2 byte integer. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.PaddingBit">
            <summary>
            Indicates tables are created with an extra bit in columns.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.DeltaOnly">
            <summary>
            Indicates the tables stream contains only deltas.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.ExtraData">
            <summary>
            Indicates the tables stream persists an extra 4 bytes of data.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.Tables.TablesStreamFlags.HasDelete">
            <summary>
            Indicates the tables stream may contain _Delete tokens. This only occurs in ENC metadata.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.Tables.TypeReferenceHash">
             <summary>
             Provides an implementation for the Type Reference Hash (TRH) as introduced by GData.
             This hash is used as an alternative to the ImpHash to identify malware families based on
             the type references imported by the .NET image.
            
             Reference:
             https://www.gdatasoftware.com/blog/2020/06/36164-introducing-the-typerefhash-trh
             </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TypeReferenceHash.GetTypeReferenceHash(AsmResolver.PE.IPEImage)">
            <summary>
            If the provided image is a .NET image, computes the Type Reference Hash (TRH) as introduced by GData to
            identify malware based on its imported type references.
            </summary>
            <param name="image">The image to get the TRH from.</param>
            <returns>The hash.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the provided image does not contain .NET metadata.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.Tables.TypeReferenceHash.GetTypeReferenceHash(AsmResolver.PE.DotNet.Metadata.IMetadata)">
            <summary>
            Computes the Type Reference Hash (TRH) as introduced by GData to identify malware based on its
            imported type references.
            </summary>
            <param name="metadata">The metadata directory to get the TRH from.</param>
            <returns>The hash.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the provided image does not contain .NET metadata.</exception>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream">
            <summary>
            Provides an implementation of a user-strings stream that obtains strings from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.#ctor(System.Byte[])">
            <summary>
            Creates a new user-strings stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new user-strings stream with the provided byte array as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="rawData">The raw contents of the stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.#ctor(System.String,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Creates a new user-strings stream with the provided file segment reader as the raw contents of the stream.
            </summary>
            <param name="name">The name of the stream.</param>
            <param name="reader">The raw contents of the stream.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.GetStringByIndex(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.SerializedUserStringsStream.TryFindStringIndex(System.String,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream">
            <summary>
            Represents the metadata streams containing the user strings referenced by CIL method bodies.
            </summary>
            <remarks>
            Like most metadata streams, the user strings stream does not necessarily contain just valid strings. It can contain
            (garbage) data that is never referenced by any of the tables in the tables stream. The only guarantee that the
            strings heap provides, is that any string index in a CIL method body is the start address (relative to the start
            of the #US stream) of a unicode string, prefixed by a length, and suffixed by one extra terminator byte.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.DefaultName">
            <summary>
            The default name of a user-strings stream, as described in the specification provided by ECMA-335.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.#ctor">
            <summary>
            Initializes the user-strings stream with its default name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.#ctor(System.String)">
            <summary>
            Initializes the user-strings stream with a custom name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.GetStringByIndex(System.UInt32)">
            <summary>
            Gets a string by its string index.
            </summary>
            <param name="index">The offset into the heap to start reading.</param>
            <returns>The string, or <c>null</c> if the index was invalid.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.TryFindStringIndex(System.String,System.UInt32@)">
            <summary>
            Searches the stream for the provided string.
            </summary>
            <param name="value">The string to search for.</param>
            <param name="index">When the function returns <c>true</c>, contains the index at which the string was found.</param>
            <returns><c>true</c> if the string index was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream.TryFindStringToken(System.String,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken@)">
            <summary>
            Searches the stream for the provided string.
            </summary>
            <param name="value">The string to search for.</param>
            <param name="token">When the function returns <c>true</c>, contains the token for which the string was found.</param>
            <returns><c>true</c> if the string token was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Resources.DotNetResourcesDirectory">
            <summary>
            Represents a data directory containing the data of all manifest resources stored in a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.DotNetResourcesDirectory.GetManifestResourceData(System.UInt32)">
            <summary>
            Gets the manifest resource data by its offset.
            </summary>
            <param name="offset">The offset of the resource data, relative to the start of the data directory.</param>
            <returns>The data, or <c>null</c> if the offset is not a valid offset.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.DotNetResourcesDirectory.TryCreateManifestResourceReader(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Gets a reader starting at the beginning of the resource data referenced by the provided offset.
            </summary>
            <param name="offset">The offset of the resource data, relative to the start of the data directory.</param>
            <param name="reader">When this method returns <c>true</c>, this parameter contains the created binary reader.</param>
            <returns>
            <c>true</c> if a blob reader could be created at the provided offset, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory">
            <summary>
            Provides an implementation of a .NET resources directory that obtains blobs from a readable segment in a file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.#ctor(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory"/> using an input stream as
            raw contents of the directory.
            </summary>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.#ctor(AsmResolver.IReadableSegment)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory"/> using a readable data segment
            as raw contents of the directory.
            </summary>
            <param name="contents">The input stream.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.GetManifestResourceData(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.Resources.SerializedDotNetResourcesDirectory.TryCreateManifestResourceReader(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.SerializedDotNetDirectory">
            <summary>
            Provides an implementation of a .NET directory that was stored in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a .NET directory from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when any of the arguments are <c>null</c>.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetMetadata">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetResources">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetStrongName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetCodeManagerTable">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetVTableFixups">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetExportAddressTable">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.SerializedDotNetDirectory.GetManagedNativeHeader">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.RsaPublicKeyMagic">
            <summary>
            Provides members for all valid RSA public key structures supported by AsmResolver.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.RsaPublicKeyMagic.Rsa1">
            <summary>
            Indicates the structure is a public key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.RsaPublicKeyMagic.Rsa2">
            <summary>
            Indicates the structure is a private key.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.SignatureAlgorithm">
            <summary>
            Provides members for identifying cryptographic algorithms supported by AsmResolver. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.SignatureAlgorithm.RsaSign">
            <summary>
            RSA public key signature algorithm. This algorithm is supported by the Microsoft Base Cryptographic Provider.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure">
            <summary>
            Provides a base for strong name key structures.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.ReadBlobHeader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType,System.Byte,AsmResolver.PE.DotNet.StrongName.SignatureAlgorithm)">
            <summary>
            Reads and verifies the blob header at the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="expectedType">The expected structure type to read.</param>
            <param name="expectedVersion">The expected structure version to read.</param>
            <param name="expectedAlgorithm">The expected algorithm.</param>
            <exception cref="T:System.FormatException">Occurs when the input stream is not in the correct format.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported algorithm is specified.</exception>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.Type">
            <summary>
            Gets the type of structure that is encoded.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.Version">
            <summary>
            Gets the version number of the structure.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.SignatureAlgorithm">
            <summary>
            Gets the algorithm used.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructure.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType">
            <summary>
            Provides members for all predefined types of public key structures used by cryptographic service providers (CSP).
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.SimpleBlob">
            <summary>
            The key is a session key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.PublicKeyBlob">
            <summary>
            The key is a public key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.PrivateKeyBlob">
            <summary>
            The key is a public/private key pair.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.PlainTextKeyBlob">
            <summary>
            The key is a session key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.OpaqueKeyBlob">
            <summary>
            The key is a session key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.PublicKeyBlobEx">
            <summary>
            The key is a public key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.SymmetricWrapKeyBlob">
            <summary>
            The key is a symmetric key.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.StrongName.StrongNameKeyStructureType.KeyStateBlob">
            <summary>
            The BLOB is a key state BLOB.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey">
            <summary>
            Represents a public/private key pair in the RSA crypto system.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.FromFile(System.String)">
            <summary>
            Reads a private key from an input file.
            </summary>
            <param name="path">The path to the strong-name key file.</param>
            <returns>The private key.</returns>
            <exception cref="T:System.FormatException">Occurs when the input stream is not in the correct format.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported algorithm is specified.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a private key from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The private key.</returns>
            <exception cref="T:System.FormatException">Occurs when the input stream is not in the correct format.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported algorithm is specified.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.#ctor(System.UInt32)">
            <summary>
            Creates a new empty private key.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.#ctor(System.Security.Cryptography.RSAParameters@)">
            <summary>
            Imports a public/private key pair from an instance of <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="parameters">The RSA parameters to import.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.Type">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.Version">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.Magic">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.P">
            <summary>
            Gets or sets the first prime number used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.Q">
            <summary>
            Gets or sets the second prime number used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.DP">
            <summary>
            Gets or sets the first exponent (equal to d mod (p-1)) used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.DQ">
            <summary>
            Gets or sets the second exponent (equal to d mod (q-1)) used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.InverseQ">
            <summary>
            Gets or sets the coefficient which is equal to the modular inverse of q mod p, used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.PrivateExponent">
            <summary>
            Gets or sets the private exponent used in the RSA crypto system.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.ToRsaParameters">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey">
            <summary>
            Represents the public key in a RSA crypto system.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.FromFile(System.String)">
            <summary>
            Reads a private key from an input file.
            </summary>
            <param name="path">The path to the strong-name key file.</param>
            <returns>The private key.</returns>
            <exception cref="T:System.FormatException">Occurs when the input stream is not in the correct format.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported algorithm is specified.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a private key from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The private key.</returns>
            <exception cref="T:System.FormatException">Occurs when the input stream is not in the correct format.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported algorithm is specified.</exception>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.#ctor(System.Byte[],System.UInt32)">
            <summary>
            Creates a new strong name public key.
            </summary>
            <param name="modulus">The modulus to use in the RSA crypto system.</param>
            <param name="publicExponent">The public exponent to use in the RSA crypto system.</param>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.#ctor(System.Security.Cryptography.RSAParameters@)">
            <summary>
            Imports a public key from an instance of <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <param name="parameters">The RSA parameters to import.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.Type">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.Version">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.SignatureAlgorithm">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.Magic">
            <summary>
            Gets the magic header number defining the type of RSA public key structure.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.BitLength">
            <summary>
            Gets the number of bits used by the modulus parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.PublicExponent">
            <summary>
            Gets or sets the public exponent used in the RSA crypto system.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.Modulus">
            <summary>
            Gets or sets the modulus used in the RSA crypto system.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.CreatePublicKeyBlob(AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyHashAlgorithm)">
            <summary>
            Prepares a blob signature containing the full public key of an assembly.
            </summary>
            <param name="hashAlgorithm">The hash algorithm that is used to hash the PE file.</param>
            <returns>The blob signature.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.ToRsaParameters">
            <summary>
            Translates the strong name parameters to an instance of <see cref="T:System.Security.Cryptography.RSAParameters"/>.
            </summary>
            <returns>The converted RSA parameters.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNamePublicKey.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.StrongName.StrongNameSigner">
            <summary>
            Provides a mechanism for adding a strong name signature to a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNameSigner.#ctor(AsmResolver.PE.DotNet.StrongName.StrongNamePrivateKey)">
            <summary>
            Creates a new strong name signer instance.
            </summary>
            <param name="privateKey">The private key to use.</param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.StrongName.StrongNameSigner.PrivateKey">
            <summary>
            Gets the private key to use for signing the image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.StrongName.StrongNameSigner.SignImage(System.IO.Stream,AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyHashAlgorithm)">
            <summary>
            Finalizes a delay-signed PE image.
            </summary>
            <param name="imageStream">The stream containing the image to sign.</param>
            <param name="hashAlgorithm">The hashing algorithm to use.</param>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET image.</exception>
            <exception cref="T:System.ArgumentException">Occurs when the image does not contain a strong name directory of the right size.</exception>
        </member>
        <member name="T:AsmResolver.PE.DotNet.VTableFixups.VTableFixup">
            <summary>
            Represents a VTable declared by the VTable fixups directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixup.#ctor(AsmResolver.PE.DotNet.VTableFixups.VTableType)">
            <summary>
            Creates a new VTable fixup.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableFixup.Tokens">
            <summary>
            Gets a list of the tokens added to this vtable.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixup.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single vtable from the provided input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <returns></returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixup.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixup.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory">
            <summary>
            Represents the VTable fixups directory in the Cor20 header.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableFixupsDirectory.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection">
            <summary>
            Represents the segment of the metadata tokens of a VTable.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.Type">
            <summary>
            Gets or sets the type of the entries
            </summary>
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.InsertItem(System.Int32,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.GetReferenceToIndex(System.Int32)">
            <summary>
            Constructs a reference to an element within the collection.
            </summary>
            <param name="index">The index of the element to reference.</param>
            <returns>The reference.</returns>
        </member>
        <member name="M:AsmResolver.PE.DotNet.VTableFixups.VTableTokenCollection.GetOffsetToIndex(System.Int32)">
            <summary>
            Gets the byte offset to an element within the collection that is relative to the start of the list.
            </summary>
            <param name="index">The index of the element to reference.</param>
            <returns>The offset.</returns>
        </member>
        <member name="T:AsmResolver.PE.DotNet.VTableFixups.VTableType">
            <summary>
            Types of VTable entries
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.VTableFixups.VTableType.VTable32Bit">
            <summary>
            VTable slots are 32 bits.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.VTableFixups.VTableType.VTable64Bit">
            <summary>
            VTable slots are 64 bits.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.VTableFixups.VTableType.VTableFromUnmanaged">
            <summary>
            Transition from unmanaged to managed code.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.DotNet.VTableFixups.VTableType.VTableCallMostDerived">
            <summary>
            Call most derived method described by the token (only valid for virtual methods)
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Exceptions.ExceptionDirectory`1">
            <summary>
            Provides a basic implementation of the <see cref="T:AsmResolver.PE.Exceptions.IExceptionDirectory"/> directory.
            </summary>
            <typeparam name="TFunction">The type of functions to store.</typeparam>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.ExceptionDirectory`1.Entries">
            <summary>
            Gets a collection of functions that are stored in the table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.ExceptionDirectory`1.GetEntries">
            <summary>
            Obtains the entries in the exception handler table.
            </summary>
            <returns>The entries.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Exceptions.ExceptionDirectory`1.Entries"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.ExceptionDirectory`1.AsmResolver#PE#Exceptions#IExceptionDirectory#GetEntries">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exceptions.IExceptionDirectory">
            <summary>
            Represents the data directory containing a table of functions in a portable executable
            that use Structured Exception Handling (SEH).
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.IExceptionDirectory.GetEntries">
            <summary>
            Gets a collection of functions defined by the exception handler directory.
            </summary>
            <returns>The functions.</returns>
        </member>
        <member name="T:AsmResolver.PE.Exceptions.IRuntimeFunction">
            <summary>
            Represents a single entry in an exception data directory of a portable executable (PE).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.IRuntimeFunction.Begin">
            <summary>
            Gets the address to the beginning of the referenced function.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.IRuntimeFunction.End">
            <summary>
            Gets the address to the end of the referenced function.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64ExceptionDirectory.GetEntries">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction">
            <summary>
            Represents a single runtime function in a Structured Exception Handler (SEH) table of a portable executable
            targeting the x64 (AMD64) architecture.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.EntrySize">
            <summary>
            Get th
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.#ctor(AsmResolver.ISegmentReference,AsmResolver.ISegmentReference,AsmResolver.PE.Exceptions.X64.X64UnwindInfo)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction"/> class.
            </summary>
            <param name="begin">The reference to the beginning of the function. </param>
            <param name="end">The reference to the end of the function.</param>
            <param name="unwindInfo">The unwind information associated to the function.</param>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.Begin">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.End">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.UnwindInfo">
            <summary>
            Gets or sets the unwind information associated to the function.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single <see cref="T:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction"/> from the provided input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <returns>The read function entry.</returns>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64RuntimeFunction.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exceptions.X64.X64UnwindFlags">
            <summary>
            Defines all possible flags that can be assigned to an instance of <see cref="T:AsmResolver.PE.Exceptions.X64.X64UnwindInfo"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exceptions.X64.X64UnwindFlags.NoHandler">
            <summary>
            Indicates no handlers.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exceptions.X64.X64UnwindFlags.ExceptionHandler">
            <summary>
            Indicates the function has an exception handler that should be called when looking for functions
            that need to examine exceptions.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exceptions.X64.X64UnwindFlags.TerminationHandler">
            <summary>
            Indicates the function has a termination handler that should be called when unwinding an exception.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exceptions.X64.X64UnwindFlags.ChainedUnwindInfo">
            <summary>
            Indicates This unwind info structure is not the primary one for the procedure. Instead, the chained
            unwind info entry is the contents of a previous entry.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Exceptions.X64.X64UnwindInfo">
            <summary>
            Encodes the effects a function has on the stack pointer, and where the nonvolatile
            registers are saved on the stack.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.#ctor">
            <summary>
            Creates a new empty instance of the <see cref="T:AsmResolver.PE.Exceptions.X64.X64UnwindInfo"/> class.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.Version">
            <summary>
            Gets or sets the version number of the unwind info..
            </summary>
            <remarks>
            Should be 1.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.Flags">
            <summary>
            Gets or sets the flags associated to the unwind information.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsExceptionHandler">
            <summary>
            Gets or sets a value indicating whether the function has an exception handler that should be called when
            looking for functions that need to examine exceptions.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsTerminationHandler">
            <summary>
            Gets or sets a value indicating whether the function has a termination handler that should be called
            when unwinding an exception.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsChained">
            <summary>
            Gets or sets a value indicating whether this unwind info structure is not the primary one for the procedure.
            Instead, the chained unwind info entry is the contents of a previous RUNTIME_FUNCTION entry.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.SizeOfProlog">
            <summary>
            Gets or sets the length of the function prolog in bytes.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.FrameRegister">
            <summary>
            Gets the number of the nonvolatile register used as the frame pointer, using the same encoding for the
            operation info field of UNWIND_CODE nodes.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.FrameRegisterOffset">
            <summary>
            If <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.FrameRegister"/> is nonzero, gets or sets the scaled offset from RSP that is applied to the
            FP register when it is established.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.UnwindCodes">
            <summary>
            Gets or sets an array of items that explains the effect of the prolog on the nonvolatile registers and RSP.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.ExceptionHandler">
            <summary>
            When <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsExceptionHandler"/> or <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsTerminationHandler"/> is <c>true</c>, gets or sets
            the reference to the exception handler assigned to this unwind information.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.ExceptionHandlerData">
            <summary>
            When <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsExceptionHandler"/> or <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsTerminationHandler"/> is <c>true</c>, gets or sets
            the reference to the exception handler data assigned to this unwind information.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.ChainedFunction">
            <summary>
            When <see cref="P:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.IsChained"/> is <c>true</c>, gets or sets the function that this unwind information is
            chained with.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads unwind information from the provided input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
            <returns>The read unwind information.</returns>
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exceptions.X64.X64UnwindInfo.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.Builder.ExportAddressTableBuffer">
            <summary>
            Provides a mechanism for building up a table of exported addresses in the export data directory of
            a portable executable (PE) file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportAddressTableBuffer.AddSymbol(AsmResolver.PE.Exports.ExportedSymbol)">
            <summary>
            Adds a single symbol to the address table buffer.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportAddressTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportAddressTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer">
            <summary>
            Provides a mechanism for building an export data directory in a portable executable (PE) file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.ExportDirectoryHeaderSize">
            <summary>
            Gets the raw size in bytes of an export directory header.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.#ctor">
            <summary>
            Creates a new empty export directory buffer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.IsEmpty">
            <summary>
            Gets a value indicating whether the export directory buffer is empty or not.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.AddDirectory(AsmResolver.PE.Exports.IExportDirectory)">
            <summary>
            Adds an export directory and its contents to the buffer.
            </summary>
            <param name="exportDirectory">The export directory to add.</param>
            <exception cref="T:System.InvalidProgramException">Occurs when a second directory is added.</exception>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.ExportDirectoryBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.Builder.NameTableBuffer">
            <summary>
            Represents a mutable buffer that stores strings referenced by exported symbols in the export data directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.NameTableBuffer.AddName(System.String)">
            <summary>
            Adds the provided name to the buffer if it does not exist yet.
            </summary>
            <param name="name">The name to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.NameTableBuffer.GetNameRva(System.String)">
            <summary>
            When the name was registered in the buffer, obtains the relative virtual address (RVA) to the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The RVA.</returns>
            <remarks>
            This method should only be used after the hint-name table has been relocated to the right location in the
            PE file.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.NameTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.NameTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer">
            <summary>
            Provides a mechanism for building up an ordinal and name-pointer table in an export data directory
            of a portable executable file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.#ctor(AsmResolver.PE.Exports.Builder.NameTableBuffer)">
            <summary>
            Creates a new empty ordinal and name-pointer table buffer.
            </summary>
            <param name="nameTableBuffer">The table containing the names of all exports.</param>
        </member>
        <member name="P:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.OrdinalTableRva">
            <summary>
            Gets the relative virtual address (RVA) to the ordinal table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.OrdinalTableSize">
            <summary>
            Gets the raw size in bytes of the ordinal table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.NamePointerTableRva">
            <summary>
            Gets the relative virtual address (RVA) to the name pointer table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.NamePointerTableSize">
            <summary>
            Gets the raw size in bytes of the name pointer.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.AddSymbol(AsmResolver.PE.Exports.ExportedSymbol)">
            <summary>
            When the symbol is exported by name, adds the ordinal and name pointer pair to the buffer.
            </summary>
            <param name="symbol">The symbol to register.</param>
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.Builder.OrdinalNamePointerTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.ExportDirectory">
            <summary>
            Provides a basic implementation of the <see cref="T:AsmResolver.PE.Exports.IExportDirectory"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportDirectory.#ctor">
            <summary>
            Initializes a new empty symbol export directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportDirectory.#ctor(System.String)">
            <summary>
            Creates a new symbol export directory.
            </summary>
            <param name="name">The name of the library exporting the symbols.</param>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.ExportFlags">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.TimeDateStamp">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.MajorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.MinorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.BaseOrdinal">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportDirectory.Entries">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportDirectory.GetName">
            <summary>
            Obtains the name of the library that is exporting symbols.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Exports.ExportDirectory.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportDirectory.GetExports">
            <summary>
            Obtains the list of exported symbols defined by the export directory.
            </summary>
            <returns>The exported symbols..</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Exports.ExportDirectory.Entries"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.Exports.ExportedSymbol">
            <summary>
            Represents a single symbol that is exported by a dynamically linked library.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbol.#ctor(AsmResolver.ISegmentReference)">
            <summary>
            Creates a new symbol that is exported by ordinal.
            </summary>
            <param name="address">The reference to the segment representing the symbol.</param>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbol.#ctor(AsmResolver.ISegmentReference,System.String)">
            <summary>
            Creates a new symbol that is exported by name.
            </summary>
            <param name="address">The reference to the segment representing the symbol.</param>
            <param name="name">The name of the symbol.</param>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.ParentDirectory">
            <summary>
            Gets the export directory this symbol was added to (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.Ordinal">
            <summary>
            Gets the ordinal of the exported symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.IsByOrdinal">
            <summary>
            Gets a value indicating whether the symbol is exported by ordinal number.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.IsByName">
            <summary>
            Gets a value indicating whether the symbol is exported by name.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.Name">
            <summary>
            Gets or sets the name of the exported symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.ExportedSymbol.Address">
            <summary>
            Gets or sets the reference to the segment representing the symbol.
            </summary>
            <remarks>
            For exported functions, this reference points to the first instruction that is executed.
            For exported fields, this reference points to the first byte of data that this field consists of.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbol.GetReference">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.ExportedSymbolCollection">
            <summary>
            Represents a collection of exported symbols within an export data directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.#ctor(AsmResolver.PE.Exports.IExportDirectory)">
            <summary>
            Creates a new instance of the exported symbol collection.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.OnClearItems">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.OnInsertItem(System.Int32,AsmResolver.PE.Exports.ExportedSymbol)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.OnInsertRange(System.Int32,System.Collections.Generic.IEnumerable{AsmResolver.PE.Exports.ExportedSymbol})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.OnRemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.ExportedSymbolCollection.OnSetItem(System.Int32,AsmResolver.PE.Exports.ExportedSymbol)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Exports.IExportDirectory">
            <summary>
            Represents the data directory containing exported symbols that other images can access through dynamic linking.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.ExportFlags">
            <summary>
            Gets or sets the flags associated to the export directory.
            </summary>
            <remarks>
            This field is reserved and should be zero.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.TimeDateStamp">
            <summary>
            Gets or sets the time and date that the exports data was created.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.MajorVersion">
            <summary>
            Gets or sets the user major version number.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.MinorVersion">
            <summary>
            Gets or sets the user minor version number.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.Name">
            <summary>
            Gets or sets the name of the exports directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.BaseOrdinal">
            <summary>
            Gets or sets the base ordinal of the exports directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Exports.IExportDirectory.Entries">
            <summary>
            Gets an ordered list of symbols that are exported by the portable executable (PE) image.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Exports.SerializedExportDirectory">
            <summary>
            Provides an implementation of an exports directory that was read from an existing PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Exports.SerializedExportDirectory.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single export directory from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.PE.Exports.SerializedExportDirectory.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Exports.SerializedExportDirectory.GetExports">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.HintNameTableBuffer">
            <summary>
            Provides a mechanism for building up a table consisting of hint-name pairs.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.AddModule(AsmResolver.PE.Imports.IImportedModule)">
            <summary>
            Adds the name of the module and the names of all named entries to the hint-name table.
            </summary>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.GetModuleNameRva(AsmResolver.PE.Imports.IImportedModule)">
            <summary>
            Gets the virtual address to the beginning of the name of a module.
            </summary>
            <param name="module">The module to obtain the name RVA for.</param>
            <returns>The virtual address.</returns>
            <remarks>
            This method should only be used after the hint-name table has been relocated to the right location in the
            PE file.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.GetHintNameRva(AsmResolver.PE.Imports.ImportedSymbol)">
            <summary>
            Gets the virtual address to the beginning of the hint-name pair associated to an imported member.
            </summary>
            <param name="member">The member to obtain the hint-name RVA for.</param>
            <returns>The virtual address.</returns>
            <remarks>
            This method should only be used after the hint-name table has been relocated to the right location in the
            PE file.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.HintNameTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.IImportAddressProvider">
            <summary>
            Defines members for resolving thunk RVAs to members in the import directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.IImportAddressProvider.GetThunkRva(System.String,System.String)">
            <summary>
            Obtains the RVA of a thunk.
            </summary>
            <param name="module">The name of the module that defines the imported member.</param>
            <param name="member">The name of the imported member.</param>
            <returns>The RVA</returns>
            <exception cref="T:System.ArgumentException">Occurs when the member could not be found.</exception>
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.ImportAddressDirectoryBuffer">
            <summary>
            Provides a mechanism for building an import address directory in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportAddressDirectoryBuffer.#ctor(AsmResolver.PE.Imports.Builder.HintNameTableBuffer,System.Boolean)">
            <summary>
            Creates a new import address directory buffer, using the provided hint-name table to obtain addresses to names
            of an imported member.
            </summary>
            <param name="hintNameTable">The hint-name table that is used to reference names of modules or members.</param>
            <param name="is32Bit">Indicates the import directory should use 32-bit addresses or 64-bit addresses.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportAddressDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportAddressDirectoryBuffer.CreateThunkTable">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer">
            <summary>
            Provides a mechanism for building an import lookup directory in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.#ctor(System.Boolean)">
            <summary>
            Creates a new import lookup directory.
            </summary>
            <param name="is32Bit">Indicates the import directory should use 32-bit addresses or 64-bit addresses.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.ImportAddressDirectory">
            <summary>
            Gets the import address directory that is linked to this lookup directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.AddModule(AsmResolver.PE.Imports.IImportedModule)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase">
            <summary>
            Provides a base for the import lookup and address directory buffers.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.#ctor(AsmResolver.PE.Imports.Builder.HintNameTableBuffer,System.Boolean)">
            <summary>
            Initializes the new import directory buffer with a hint-name table.
            </summary>
            <param name="hintNameTable">The hint-name table that is used to reference names of modules or members.</param>
            <param name="is32Bit">Indicates the import directory should use 32-bit addresses or 64-bit addresses.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.Is32Bit">
            <summary>
            Gets a value indicating the import directory should use 32-bit addresses or 64-bit addresses.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.Count">
            <summary>
            Gets the number of modules that were added to the import directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.Modules">
            <summary>
            Gets an ordered list of modules that were added to the buffer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.HintNameTable">
            <summary>
            Gets the hint-name table that is used to reference names of modules or members.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.AddModule(AsmResolver.PE.Imports.IImportedModule)">
            <summary>
            Creates a thunk table for a module and its imported members, and adds it to the buffer.
            </summary>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.GetModuleThunkTable(AsmResolver.PE.Imports.IImportedModule)">
            <summary>
            Obtains the thunk table of a module.
            </summary>
            <param name="module">The module to get the associated thunk table for.</param>
            <returns>The thunk table.</returns>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.GetThunkRva(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.CreateThunkTable">
            <summary>
            Creates a new thunk table buffer.
            </summary>
            <returns>The buffer.</returns>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ImportDirectoryBufferBase.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.Builder.ThunkTableBuffer">
            <summary>
            Provides a mechanism for building up a thunk table for an import directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.#ctor(AsmResolver.PE.Imports.Builder.HintNameTableBuffer,System.Boolean,System.Boolean)">
            <summary>
            Creates a new thunk table buffer, that uses the provided hint-name table to reference names.
            </summary>
            <param name="hintNameTable">The hint-name table containing the names of each imported member</param>
            <param name="is32Bit">Indicates whether the thunk-table should use 32-bit addresses or 64-bit addresses.</param>
            <param name="isIat">Indicates the buffer contains the import address table or lookup table.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.Is32Bit">
            <summary>
            Gets a value indicating whether the thunk-table should use 32-bit addresses or 64-bit addresses.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.ThunkSize">
            <summary>
            Gets the size of a single entry in the thunk table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.AddMember(AsmResolver.PE.Imports.ImportedSymbol)">
            <summary>
            Creates a thunk for the specified member, and adds it to the table.
            </summary>
            <param name="entry">The member to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.GetMemberThunkRva(AsmResolver.PE.Imports.ImportedSymbol)">
            <summary>
            Obtains the relative virtual address of the thunk associated to an imported member in the thunk table.
            </summary>
            <param name="member">The member to get the thunk entry RVA for.</param>
            <returns>The virtual address</returns>
            <remarks>
            This method should only be used after the thunk table has been relocated to the right location in the
            PE file.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.Builder.ThunkTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.DefaultSymbolResolver">
            <summary>
            Provides an implementation of the <see cref="T:AsmResolver.PE.Imports.ISymbolResolver"/> that includes some static ordinal-name mappings
            from known Windows libraries.
            </summary>
            <remarks>
            This class should only be used for quick static lookup of common ordinals to names (e.g. in conjuction with
            the <see cref="T:AsmResolver.PE.Imports.ImportHash"/> class). The resulting symbol objects are mock objects and do not contain a valid
            address to the actual symbol.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Imports.DefaultSymbolResolver.Instance">
            <summary>
            Gets the singleton instance for the <see cref="T:AsmResolver.PE.Imports.DefaultSymbolResolver"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.DefaultSymbolResolver.Resolve(AsmResolver.PE.Imports.ImportedSymbol)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.EmptySymbolResolver">
            <summary>
            Provides an empty implementation for the <see cref="T:AsmResolver.PE.Imports.ISymbolResolver"/> interface that always returns <c>null</c>.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.EmptySymbolResolver.Instance">
            <summary>
            Gets the singleton instance for the <see cref="T:AsmResolver.PE.Imports.EmptySymbolResolver"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.EmptySymbolResolver.Resolve(AsmResolver.PE.Imports.ImportedSymbol)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.IImportedModule">
            <summary>
            Represents a single module that was imported into a portable executable as part of the imports data directory.
            Each instance represents one entry in the imports directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.IImportedModule.Name">
            <summary>
            Gets or sets the name of the module that was imported.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.IImportedModule.TimeDateStamp">
            <summary>
            Gets or sets the time stamp that the module was loaded into memory.
            </summary>
            <remarks>
            This field is always 0 if the PE was read from the disk.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Imports.IImportedModule.ForwarderChain">
            <summary>
            Gets or sets the index of the first member that is a forwarder.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.IImportedModule.Symbols">
            <summary>
            Gets a collection of members from the module that were imported.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Imports.ImportedModule">
            <summary>
            Provides an implementation of the <see cref="T:AsmResolver.PE.Imports.IImportedModule"/> class, which can be instantiated and added
            to an existing portable executable image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedModule.#ctor">
            <summary>
            Creates a new empty module import.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedModule.#ctor(System.String)">
            <summary>
            Creates a new module import.
            </summary>
            <param name="name">The name of the module to import.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedModule.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedModule.TimeDateStamp">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedModule.ForwarderChain">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedModule.Symbols">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedModule.FromReader(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single module import entry from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream to read from.</param>
            <returns></returns>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedModule.GetSymbols">
            <summary>
            Obtains the collection of members that were imported.
            </summary>
            <remarks>
            This method is called to initialize the value of <see cref="P:AsmResolver.PE.Imports.ImportedModule.Symbols" /> property.
            </remarks>
            <returns>The members list.</returns>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedModule.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.ImportedSymbol">
            <summary>
            Represents one member of an external module that was imported into a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedSymbol.#ctor(System.UInt16)">
            <summary>
            Creates a new import entry that references a member exposed by ordinal.
            </summary>
            <param name="ordinal">The ordinal of the member to import.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedSymbol.#ctor(System.UInt16,System.String)">
            <summary>
            Creates a new import entry that references a member exposed by name.
            </summary>
            <param name="hint">The likely index of the export in the export table.</param>
            <param name="name">The name of the export.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.DeclaringModule">
            <summary>
            Gets the module that defines the symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#PE#Imports#IImportedModule}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.Ordinal">
            <summary>
            Gets or sets the ordinal of the member that was imported.
            </summary>
            <remarks>
            This value is meaningless if <see cref="P:AsmResolver.PE.Imports.ImportedSymbol.IsImportByName"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.Hint">
            <summary>
            Gets or sets the likely index of the member referenced by <see cref="P:AsmResolver.PE.Imports.ImportedSymbol.Name"/>, into the export table.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.Name">
            <summary>
            Gets or sets the name of the member that was imported.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.AddressTableEntry">
            <summary>
            Gets or sets the entry in the import address table (IAT).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.IsImportByOrdinal">
            <summary>
            Gets a value indicating the member is imported by its ordinal.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Imports.ImportedSymbol.IsImportByName">
            <summary>
            Gets a value indicating the member is imported by its name.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportedSymbol.GetReference">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.ImportHash">
             <summary>
             Provides an implementation of the import hash (ImpHash) introduced by Mandiant.
            
             Reference:
             https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html
             </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportHash.GetImportHash(AsmResolver.PE.IPEImage)">
            <summary>
            Computes the hash of all imported symbols.
            </summary>
            <param name="image">The image to get the import hash from.</param>
            <returns>The hash.</returns>
            <remarks>
            This is the ImpHash as introduced by Mandiant.
            Reference: https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Imports.ImportHash.GetImportHash(AsmResolver.PE.IPEImage,AsmResolver.PE.Imports.ISymbolResolver)">
            <summary>
            Computes the hash of all imported symbols.
            </summary>
            <param name="image">The image to get the import hash from.</param>
            <param name="symbolResolver">The object responsible for resolving symbols imported by ordinal.</param>
            <returns>The hash.</returns>
            <remarks>
            This is the ImpHash as introduced by Mandiant.
            Reference: https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.Imports.ISymbolResolver">
            <summary>
            Provides members for resolving imported symbols.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.ISymbolResolver.Resolve(AsmResolver.PE.Imports.ImportedSymbol)">
            <summary>
            Resolves the provided symbol.
            </summary>
            <param name="symbol">The symbol to resolve.</param>
            <returns>The resolved symbol, or <c>null</c> if none was found.</returns>
        </member>
        <member name="T:AsmResolver.PE.Imports.SerializedImportedModule">
            <summary>
            Provides an implementation of a module import entry present in a PE file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Imports.SerializedImportedModule.ModuleImportSize">
            <summary>
            The amount of bytes a single entry uses in the import directory table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.SerializedImportedModule.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a module import entry from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
        </member>
        <member name="P:AsmResolver.PE.Imports.SerializedImportedModule.IsEmpty">
            <summary>
            Determines whether the module import is empty, that is whether every field is 0.
            </summary>
            <remarks>
            The PE file format uses an empty module import entry to indicate the end of the list of imported modules.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Imports.SerializedImportedModule.GetSymbols">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Imports.SerializedImportedModuleList">
            <summary>
            Provides a lazy-initialized list of module import entries that is stored in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Imports.SerializedImportedModuleList.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.PE.File.Headers.DataDirectory@)">
            <summary>
            Prepares a new lazy-initialized list of module import entries.
            </summary>
            <param name="context">The reader context.</param>
            <param name="dataDirectory">The import data directory.</param>
        </member>
        <member name="M:AsmResolver.PE.Imports.SerializedImportedModuleList.Initialize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.IPEImage">
            <summary>
            Represents an image of a portable executable (PE) file, exposing high level mutable structures.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.FilePath">
            <summary>
            When this PE image was read from the disk, gets the file path to the PE image.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.MachineType">
            <summary>
            Gets or sets the machine type that the PE image is targeting.
            </summary>
            <remarks>
            This property is in direct relation with the machine type field in the file header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Characteristics">
            <summary>
            Gets or sets the attributes assigned to the executable file.
            </summary>
            <remarks>
            This property is in direct relation with the characteristics field in the file header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.TimeDateStamp">
            <summary>
            Gets or sets the date and time the portable executable file was created.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.PEKind">
            <summary>
            Gets or sets the magic optional header signature, determining whether the image is a PE32 (32-bit) or a
            PE32+ (64-bit) image.
            </summary>
            <remarks>
            This property is in direct relation with the magic field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.SubSystem">
            <summary>
            Gets or sets the subsystem to use when running the portable executable (PE) file.
            </summary>
            <remarks>
            This property is in direct relation with the subsystem field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.DllCharacteristics">
            <summary>
            Gets or sets the dynamic linked library characteristics of the portable executable (PE) file.
            </summary>
            <remarks>
            This property is in direct relation with the DLL characteristics field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.ImageBase">
            <summary>
            Gets or sets the preferred address of the first byte of the image when loaded into memory. Must be a
            multiple of 64,000.
            </summary>
            <remarks>
            This property is in direct relation with the image base field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Imports">
            <summary>
            Gets a collection of modules that were imported into the PE, according to the import data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Exports">
            <summary>
            Gets or sets the exports directory in the PE, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Resources">
            <summary>
            Gets or sets the root resource directory in the PE, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Exceptions">
            <summary>
            Gets or sets the exceptions directory in the PE, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.Relocations">
            <summary>
            Gets a collection of base relocations that are to be applied when loading the PE into memory for execution.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.DotNetDirectory">
            <summary>
            Gets or sets the data directory containing the CLR 2.0 header of a .NET binary (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.DebugData">
            <summary>
            Gets a collection of data entries stored in the debug data directory of the PE image (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.IPEImage.TlsDirectory">
            <summary>
            Gets or sets the data directory containing the Thread-Local Storage (TLS) data.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.PEImage">
            <summary>
            Provides an implementation for a portable executable (PE) image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromFile(System.String)">
            <summary>
            Opens a PE image from a specific file on the disk.
            </summary>
            <param name="filePath">The </param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromFile(System.String,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Opens a PE image from a specific file on the disk.
            </summary>
            <param name="filePath">The </param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromBytes(System.Byte[])">
            <summary>
            Opens a PE image from a buffer.
            </summary>
            <param name="bytes">The bytes to interpret.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromBytes(System.Byte[],AsmResolver.PE.PEReaderParameters)">
            <summary>
            Opens a PE image from a buffer.
            </summary>
            <param name="bytes">The bytes to interpret.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromModuleBaseAddress(System.IntPtr)">
            <summary>
            Reads a mapped PE image starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <returns>The PE image that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromModuleBaseAddress(System.IntPtr,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Reads a mapped PE image starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromModuleBaseAddress(System.IntPtr,AsmResolver.PE.File.PEMappingMode,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Reads a PE image starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromDataSource(AsmResolver.IO.IDataSource,AsmResolver.PE.File.PEMappingMode)">
            <summary>
            Reads a PE image from the provided data source.
            </summary>
            <param name="dataSource">The data source to read from.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <returns>The PE image that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromDataSource(AsmResolver.IO.IDataSource,AsmResolver.PE.File.PEMappingMode,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Reads a PE image from the provided data source.
            </summary>
            <param name="dataSource">The data source to read from.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.File.PEMappingMode)">
            <summary>
            Opens a PE image from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="mode">Indicates the input PE is in its mapped or unmapped form.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.File.PEMappingMode,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Opens a PE image from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="mode">Indicates the input PE is in its mapped or unmapped form.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Opens a PE image from an input file object.
            </summary>
            <param name="inputFile">The file representing the PE.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromFile(AsmResolver.PE.File.IPEFile)">
            <summary>
            Opens a PE image from a PE file object.
            </summary>
            <param name="peFile">The PE file object.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.FromFile(AsmResolver.PE.File.IPEFile,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Opens a PE image from a PE file object.
            </summary>
            <param name="peFile">The PE file object.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
            <returns>The PE image that was opened.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.PE.PEImage.#ctor">
            <summary>
            Initializes a new PE image.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.PEImage.FilePath">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.MachineType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Characteristics">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.TimeDateStamp">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.PEKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.SubSystem">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.DllCharacteristics">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.ImageBase">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Imports">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Exports">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Resources">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Exceptions">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.Relocations">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.DotNetDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.DebugData">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.PEImage.TlsDirectory">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetImports">
            <summary>
            Obtains the list of modules that were imported into the PE.
            </summary>
            <returns>The imported modules.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.Imports"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetExports">
            <summary>
            Obtains the list of symbols that were exported from the PE.
            </summary>
            <returns>The exported symbols.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.Exports"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetResources">
            <summary>
            Obtains the root resource directory in the PE.
            </summary>
            <returns>The root resource directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.Resources"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetExceptions">
            <summary>
            Obtains the contents of the exceptions data directory in the PE.
            </summary>
            <returns>The entries in the exceptions directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.Exceptions"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetRelocations">
            <summary>
            Obtains the base relocation blocks in the PE.
            </summary>
            <returns>The base relocation blocks.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.Relocations"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetDotNetDirectory">
            <summary>
            Obtains the data directory containing the CLR 2.0 header of a .NET binary.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.DotNetDirectory"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetDebugData">
            <summary>
            Obtains the debug data entries in the PE.
            </summary>
            <returns>The debug data entries.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.DebugData"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.PEImage.GetTlsDirectory">
            <summary>
            Obtains the data directory containing the Thread-Local Storage (TLS) data.
            </summary>
            <returns>The data directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.PEImage.TlsDirectory"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.PE.PEReaderContext">
            <summary>
            Provides a context in which a PE image reader exists in. This includes the original PE file as
            well as reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.PEReaderContext.#ctor(AsmResolver.PE.File.IPEFile)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.PEReaderContext"/> class.
            </summary>
            <param name="file">The original PE file.</param>
        </member>
        <member name="M:AsmResolver.PE.PEReaderContext.#ctor(AsmResolver.PE.File.IPEFile,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.PE.PEReaderContext"/> class.
            </summary>
            <param name="file">The original PE file.</param>
            <param name="parameters">The reader parameters.</param>
        </member>
        <member name="P:AsmResolver.PE.PEReaderContext.File">
            <summary>
            Gets the original PE file that is being parsed.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.PEReaderContext.Parameters">
            <summary>
            Gets the reader parameters to use while parsing the PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.PEReaderContext.GetRelocation(System.UInt64,System.UInt32)">
            <summary>
            Creates relocation parameters based on the current PE file that is being read.
            </summary>
            <param name="offset">The offset of the segment.</param>
            <param name="rva">The relative virtual address of the segment.</param>
            <returns>The created relocation parameters.</returns>
        </member>
        <member name="M:AsmResolver.PE.PEReaderContext.MarkAsFatal">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.PEReaderContext.RegisterException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.PEReaderParameters">
            <summary>
            Provides parameters for the reading process of a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.PEReaderParameters.#ctor">
            <summary>
            Initializes the PE reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.PEReaderParameters.#ctor(AsmResolver.IErrorListener)">
            <summary>
            Initializes the PE reader parameters.
            </summary>
            <param name="errorListener">The object responsible for recording parser errors.</param>
        </member>
        <member name="P:AsmResolver.PE.PEReaderParameters.ErrorListener">
            <summary>
            Gets the object responsible for collecting any errors during the parsing.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.PEReaderParameters.MetadataStreamReader">
            <summary>
            Gets or sets the object responsible for reading metadata streams in the .NET data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.PEReaderParameters.DebugDataReader">
            <summary>
            Gets or sets the object responsible for reading debug data streams in the debug data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.PEReaderParameters.FileService">
            <summary>
            Gets the service to use for reading any additional files from the disk while reading the portable executable.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Platforms.Amd64Platform">
            <summary>
            Provides information and services for the AMD64 target platform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Platforms.Amd64Platform.Instance">
            <summary>
            Gets the singleton instance for the AMD64 platform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Platforms.Amd64Platform.TargetMachine">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Platforms.Amd64Platform.IsClrBootstrapperRequired">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Platforms.Amd64Platform.CreateThunkStub(AsmResolver.ISymbol)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Platforms.Amd64Platform.TryExtractThunkAddress(AsmResolver.PE.IPEImage,AsmResolver.IO.BinaryStreamReader,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Platforms.I386Platform">
            <summary>
            Provides information and services for the I386 target platform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Platforms.I386Platform.Instance">
            <summary>
            Gets the singleton instance for the I386 platform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Platforms.I386Platform.TargetMachine">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Platforms.I386Platform.IsClrBootstrapperRequired">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Platforms.I386Platform.CreateThunkStub(AsmResolver.ISymbol)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Platforms.I386Platform.TryExtractThunkAddress(AsmResolver.PE.IPEImage,AsmResolver.IO.BinaryStreamReader,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Platforms.Platform">
            <summary>
            Provides information and services for a particular target platform.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Platforms.Platform.Get(AsmResolver.PE.File.Headers.MachineType)">
            <summary>
            Gets a target platform by its machine type.
            </summary>
            <param name="machineType">The machine type.</param>
            <returns>The target platform.</returns>
            <exception cref="T:System.NotSupportedException">Occurs when the platform is not supported.</exception>
        </member>
        <member name="M:AsmResolver.PE.Platforms.Platform.TryGet(AsmResolver.PE.File.Headers.MachineType,AsmResolver.PE.Platforms.Platform@)">
            <summary>
            Gets a target platform by its machine type.
            </summary>
            <param name="machineType">The machine type.</param>
            <param name="platform">The target platform.</param>
            <returns><c>true</c> if the platform was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:AsmResolver.PE.Platforms.Platform.TargetMachine">
            <summary>
            Gets the machine type associated to the platform.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Platforms.Platform.IsClrBootstrapperRequired">
            <summary>
            Gets a value indicating whether PEs with a .NET image embedded requires a CLR bootstrapper.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Platforms.Platform.CreateThunkStub(AsmResolver.ISymbol)">
            <summary>
            Creates a new thunk stub that transfers control to the provided symbol.
            </summary>
            <param name="entryPoint">The symbol to jump to.</param>
            <returns>The created stub.</returns>
        </member>
        <member name="M:AsmResolver.PE.Platforms.Platform.TryExtractThunkAddress(AsmResolver.PE.IPEImage,AsmResolver.IO.BinaryStreamReader,System.UInt32@)">
            <summary>
            Attempts to extract the original RVA from the code at the provided thunk address reader.
            </summary>
            <param name="image">The image containing the thunk.</param>
            <param name="reader">The thunk reader.</param>
            <param name="rva">The extracted RVA.</param>
            <returns><c>true</c> if the RVA was extracted successfully from the code, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.Relocations.BaseRelocation">
            <summary>
            Represents a single base relocation that is applied after the operating system has loaded the PE image into
            memory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.BaseRelocation.#ctor(AsmResolver.PE.Relocations.RelocationType,AsmResolver.ISegmentReference)">
            <summary>
            Creates a new base relocation.
            </summary>
            <param name="type">The type of base relocation to apply.</param>
            <param name="location">The location within the executable to apply the base relocation.</param>
        </member>
        <member name="P:AsmResolver.PE.Relocations.BaseRelocation.Type">
            <summary>
            Gets the type of relocation to apply.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Relocations.BaseRelocation.Location">
            <summary>
            Gets the location within the executable to apply the relocation to.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.BaseRelocation.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.BaseRelocation.Equals(AsmResolver.PE.Relocations.BaseRelocation)">
            <summary>
            Determines whether two base relocations are considered equal.
            </summary>
            <param name="other">The other base relocation.</param>
            <returns><c>true</c> if the base relocations are equal, <c>false</c> otherwise.</returns>
            <remarks>
            This method only considers the virtual address (RVA) of the target location, and not the entire
            <see cref="T:AsmResolver.ISegmentReference"/> member.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Relocations.BaseRelocation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.BaseRelocation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Relocations.Builder.RelocationBlock">
            <summary>
            Represents one block of relocations to be applied when the PE is loaded into memory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationBlock.#ctor(System.UInt32)">
            <summary>
            Creates a new base relocation block for the provided page.
            </summary>
            <param name="pageRva">The virtual address of the page to apply base relocations on.</param>
        </member>
        <member name="P:AsmResolver.PE.Relocations.Builder.RelocationBlock.PageRva">
            <summary>
            Gets or sets the base RVA for this page.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Relocations.Builder.RelocationBlock.Entries">
            <summary>
            Gets the list of entries added to this page.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationBlock.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationBlock.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Relocations.Builder.RelocationEntry">
            <summary>
            Represents one entry in a base relocation block, containing the offset within the page, as well as the type of relocation
            to apply after the PE image was loaded by the OS.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationEntry.#ctor(System.UInt16)">
            <summary>
            Creates a new relocation entry.
            </summary>
            <param name="value">The raw value of the entry.</param>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationEntry.#ctor(AsmResolver.PE.Relocations.RelocationType,System.Int32)">
            <summary>
            Creates a new relocation entry.
            </summary>
            <param name="type">The type of relocation to apply.</param>
            <param name="offset">The offset within the page to apply the relocation on.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the offset does not indicate a valid offset within
            the page.</exception>
        </member>
        <member name="P:AsmResolver.PE.Relocations.Builder.RelocationEntry.RelocationType">
            <summary>
            Gets the type of the relocation to apply.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Relocations.Builder.RelocationEntry.Offset">
            <summary>
            Gets the offset (relative to the current relocation block) to the pointer to relocate.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationEntry.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationEntry.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Relocations.Builder.RelocationsDirectoryBuffer">
            <summary>
            Provides a mechanism for building a base relocations directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationsDirectoryBuffer.Add(AsmResolver.PE.Relocations.BaseRelocation)">
            <summary>
            Adds a single base relocation to the buffer.
            </summary>
            <param name="relocation">The base relocation to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationsDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationsDirectoryBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Relocations.Builder.RelocationsDirectoryBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Relocations.RelocatableSegment">
            <summary>
            Pairs a segment with relocation information.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.RelocatableSegment.#ctor(AsmResolver.ISegment,System.Collections.Generic.IReadOnlyList{AsmResolver.PE.Relocations.BaseRelocation})">
            <summary>
            Creates a new pairing between a segment and relocation information.
            </summary>
            <param name="segment">The segment.</param>
            <param name="relocations">The relocation information.</param>
        </member>
        <member name="P:AsmResolver.PE.Relocations.RelocatableSegment.Segment">
            <summary>
            Gets the segment that is relocatable.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Relocations.RelocatableSegment.Relocations">
            <summary>
            Gets the relocation information required to relocate the segment.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Relocations.RelocationType">
            <summary>
            Provides members for all possible types of relocations that can be applied while loading a PE into memory. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.Absolute">
            <summary>
            Indicates the relocation is ignored.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.High">
            <summary>
            Indicates the base relocation adds the high 16 bits of the difference to the 16-bit field at offset.
            The 16-bit field represents the high value of a 32-bit word. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.Low">
            <summary>
            Indicates the base relocation adds the low 16 bits of the difference to the 16-bit field at offset.
            The 16-bit field represents the low half of a 32-bit word. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.HighLow">
            <summary>
            Indicates the base relocation applies all 32 bits of the difference to the 32-bit field at offset. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.HighAdj">
            <summary>
            Indicates the base relocation adds the high 16 bits of the difference to the 16-bit field at offset.
            The 16-bit field represents the high value of a 32-bit word. The low 16 bits of the 32-bit value are stored
            in the 16-bit word that follows this base relocation. This means that this base relocation occupies two slots. 
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.MipsJmpAddr">
            <summary>
            Indicates the relocation interpretation is dependent on the machine type.
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is MIPS.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.ArmMov32">
            <summary>
            Indicates the base relocation applies the 32-bit address of a symbol across a consecutive MOVW/MOVT
            instruction pair. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is ARM or Thumb.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.RiscVHigh20">
            <summary>
            Indicates the base relocation applies to the high 20 bits of a 32-bit absolute address. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is RISC-V.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.ThumbMov32">
            <summary>
            Indicates the base relocation applies the 32-bit address of a symbol to a consecutive MOVW/MOVT instruction pair. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is Thumb.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.RiscVLow12I">
            <summary>
            Indicates the base relocation applies to the low 12 bits of a 32-bit absolute address formed in RISC-V
            I-type instruction format. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is RISC-V.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.RiscVLow12S">
            <summary>
            Indicates the base relocation applies to the low 12 bits of a 32-bit absolute address formed in RISC-V
            S-type instruction format. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is RISC-V.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.MipsJmpAddr16">
            <summary>
            Indicates the base relocation applies to a MIPS16 jump instruction. 
            </summary>
            <remarks>
            This relocation is meaningful only when the machine type is MIPS.
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Relocations.RelocationType.Dir64">
            <summary>
            Indicates the base relocation applies the difference to the 64-bit field at offset. 
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Relocations.SerializedRelocationList">
            <summary>
            Provides an implementation of a lazy-initialized list of base relocation entries, read from an existing PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Relocations.SerializedRelocationList.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.PE.File.Headers.DataDirectory@)">
            <summary>
            Prepares a new lazy-initialized list of base relocations.
            </summary>
            <param name="context">The reader context.</param>
            <param name="relocDirectory">The directory that contains the base relocations.</param>
        </member>
        <member name="M:AsmResolver.PE.Relocations.SerializedRelocationList.Initialize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.SerializedPEImage">
            <summary>
            Provides an implementation of a PE image that gets its data from a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.#ctor(AsmResolver.PE.File.IPEFile,AsmResolver.PE.PEReaderParameters)">
            <summary>
            Opens a PE image from a file.
            </summary>
            <param name="peFile">The file to base the image from.</param>
            <param name="readerParameters">The parameters to use while reading the PE image.</param>
        </member>
        <member name="P:AsmResolver.PE.SerializedPEImage.PEFile">
            <summary>
            Gets the underlying PE file.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.SerializedPEImage.ReaderContext">
            <summary>
            Gets the reading parameters used for reading the PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetImports">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetExports">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetResources">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetExceptions">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetRelocations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetDotNetDirectory">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetDebugData">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.SerializedPEImage.GetTlsDirectory">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Tls.ITlsDirectory">
            <summary>
            Represents the data directory containing Thread-Local Storage (TLS) data.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.ITlsDirectory.TemplateData">
            <summary>
            Gets or sets the block of data that is used as a template to initialize TLS data.  The system copies all
            of this data each time a thread is created.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.ITlsDirectory.Index">
            <summary>
            The location to receive the TLS index, which the loader assigns
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.ITlsDirectory.CallbackFunctions">
            <summary>
            Gets a table of function callbacks that need to be called upon every thread creation.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.ITlsDirectory.SizeOfZeroFill">
            <summary>
            Gets or sets the number of zero bytes that need to be appended after the template data referenced by
            <see cref="P:AsmResolver.PE.Tls.ITlsDirectory.TemplateData"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.ITlsDirectory.Characteristics">
            <summary>
            Gets or sets the characteristics that are assigned to this directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Tls.ITlsDirectory.GetRequiredBaseRelocations">
            <summary>
            Obtains a collection of base address relocations that need to be applied to the TLS data directory
            after the image was loaded into memory.
            </summary>
            <returns>The required base relocations.</returns>
        </member>
        <member name="T:AsmResolver.PE.Tls.SerializedTlsDirectory">
            <summary>
            Provides an implementation of a TLS directory that was read from an existing PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Tls.SerializedTlsDirectory.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single TLS directory from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.PE.Tls.SerializedTlsDirectory.GetTemplateData">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.SerializedTlsDirectory.GetCallbackFunctions">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Tls.TlsCallbackCollection">
            <summary>
            Represents a collection of Thread-Local Storage (TLS) callback function addresses.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsCallbackCollection.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsCallbackCollection.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsCallbackCollection.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsCallbackCollection.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsCallbackCollection.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsCallbackCollection.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsCallbackCollection.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Tls.TlsCharacteristics">
            <summary>
            Defines all possible values that can be used as characteristics in a TLS directory.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align1Bytes">
            <summary>
            Align data on a 1-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align2Bytes">
            <summary>
            Align data on a 2-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align4Bytes">
            <summary>
            Align data on a 4-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align8Bytes">
            <summary>
            Align data on an 8-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align16Bytes">
            <summary>
            Align data on a 16-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align32Bytes">
            <summary>
            Align data on a 32-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align64Bytes">
            <summary>
            Align data on a 64-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align128Bytes">
            <summary>
            Align data on a 128-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align256Bytes">
            <summary>
            Align data on a 256-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align512Bytes">
            <summary>
            Align data on a 512-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align1024Bytes">
            <summary>
            Align data on a 1024-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align2048Bytes">
            <summary>
            Align data on a 2048-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align4096Bytes">
            <summary>
            Align data on a 4096-byte boundary.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Tls.TlsCharacteristics.Align8192Bytes">
            <summary>
            Align data on an 8192-byte boundary.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Tls.TlsDirectory">
            <summary>
            Provides a basic implementation of the <see cref="T:AsmResolver.PE.Tls.ITlsDirectory"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.#ctor">
            <summary>
            Initializes a new empty TLS data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsDirectory.TemplateData">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsDirectory.Index">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsDirectory.CallbackFunctions">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsDirectory.SizeOfZeroFill">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Tls.TlsDirectory.Characteristics">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.GetTemplateData">
            <summary>
            Obtains the block of template data.
            </summary>
            <returns>The template data.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Tls.TlsDirectory.TemplateData"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.GetCallbackFunctions">
            <summary>
            Obtains the table of callback functions.
            </summary>
            <returns>The callback functions.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Tls.TlsDirectory.CallbackFunctions"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.GetRequiredBaseRelocations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Tls.TlsDirectory.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.Builder.ResourceDataTableBuffer">
            <summary>
            Provides a mechanism for building a table of data entries in a resource directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDataTableBuffer.#ctor(AsmResolver.ISegment)">
            <summary>
            Creates a new data table buffer.
            </summary>
            <param name="parentBuffer">The resource directory segment that contains the table buffer.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDataTableBuffer.GetEntrySize(AsmResolver.PE.Win32Resources.IResourceData)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDataTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer">
            <summary>
            Provides a mechanism for building a new resource directory in a PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.#ctor">
            <summary>
            Creates a new resource directory buffer.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.Offset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.Rva">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.CanUpdateOffsets">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.DirectoryTable">
            <summary>
            Gets the segment containing the table with all directory entries.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.DataEntryTable">
            <summary>
            Gets the segment containing the table with all data entries.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.NameTable">
            <summary>
            Gets the segment containing the table with the names for all named resource entries.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.DataTable">
            <summary>
            Gets the segment containing all raw data segments for each data entry.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.AddDirectory(AsmResolver.PE.Win32Resources.IResourceDirectory)">
            <summary>
            Adds a resource directory and all its sub entries to the buffer.
            </summary>
            <param name="directory">The directory to ad..</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.UpdateOffsets(AsmResolver.RelocationParameters@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.GetVirtualSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryTableBuffer">
            <summary>
            Provides a mechanism for building a table of directory entries in a resource directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryTableBuffer.#ctor(AsmResolver.ISegment,AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer{System.String},AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer{AsmResolver.PE.Win32Resources.IResourceData})">
            <summary>
            Creates a new resource directory table buffer.
            </summary>
            <param name="parentBuffer">The resource directory segment that contains the table buffer.</param>
            <param name="nameTable">The table containing the names of each named entry.</param>
            <param name="dataEntryTable">The table containing the structures of each data entry.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryTableBuffer.GetEntrySize(AsmResolver.PE.Win32Resources.IResourceDirectory)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceDirectoryTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.Builder.ResourceNameTableBuffer">
            <summary>
            Provides a mechanism for building a table of names that can be used in a resource directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceNameTableBuffer.#ctor(AsmResolver.ISegment)">
            <summary>
            Creates a new name table buffer.
            </summary>
            <param name="parentBuffer">The resource directory segment that contains the name table buffer.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceNameTableBuffer.GetEntrySize(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceNameTableBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1">
            <summary>
            Provides a base for all table buffer structures in the resource directory of a PE file.
            </summary>
            <typeparam name="TEntry">The type of entries to store in the table.</typeparam>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.#ctor(AsmResolver.ISegment)">
            <summary>
            Initializes the table buffer.
            </summary>
            <param name="parentBuffer">The resource directory segment that contains the table.</param>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.RelativeOffset">
            <summary>
            Gets the offset to this segment relative to the start of the resource directory.
            </summary>
            <remarks>
            This property should only be used after the table has been relocated to the right location in the PE file.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.Entries">
            <summary>
            Gets an ordered collection of entries that are put into the table.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.AddEntry(`0)">
            <summary>
            Adds a single entry to the table.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.GetEntrySize(`0)">
            <summary>
            Determines the size of a single item in the table.
            </summary>
            <param name="entry">The item to measure.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.GetEntryOffset(`0)">
            <summary>
            Determines the offset of an entry stored in the table, relative to the start of the resource directory.
            </summary>
            <param name="entry">The item to get the offset for.</param>
            <returns>The offset.</returns>
            <remarks>
            This method should only be used after the table has been relocated to the right location in the PE file.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.Builder.ResourceTableBuffer`1.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.IResourceData">
            <summary>
            Represents a single data entry in a Win32 resource directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceData.Contents">
            <summary>
            Gets or sets the raw contents of the data entry.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceData.CodePage">
            <summary>
            Gets or sets the code page that is used to decode code point values within the resource data.
            </summary>
            <remarks>
            Typically, the code page would be the Unicode code page.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceData.CanRead">
            <summary>
            Gets a value indicating whether the <see cref="P:AsmResolver.PE.Win32Resources.IResourceData.Contents"/> is readable using a binary stream reader.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceData.CreateReader">
            <summary>
            Creates a new binary stream reader that reads the raw contents of the resource file.
            </summary>
            <returns>The reader.</returns>
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.IResourceDirectory">
            <summary>
            Represents a single directory containing Win32 resources of a PE image.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.Type">
            <summary>
            Gets the type of resources stored in the directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.Characteristics">
            <summary>
            Gets or sets the flags of the directory.
            </summary>
            <remarks>
            This field is reserved and is usually set to zero.
            </remarks>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.TimeDateStamp">
            <summary>
            Gets or sets the time that the resource data was created by the compiler.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.MajorVersion">
            <summary>
            Gets or sets the major version number of the directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.MinorVersion">
            <summary>
            Gets or sets the minor version number of the directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceDirectory.Entries">
            <summary>
            Gets a collection of entries that are stored in the directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.GetEntry(System.UInt32)">
            <summary>
            Looks up an entry in the directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the entry to lookup.</param>
            <returns>The entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no entry with the provided identifier was found.
            </exception>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.GetDirectory(System.UInt32)">
            <summary>
            Looks up an directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the directory to lookup.</param>
            <returns>The directory.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no directory with the provided identifier was found.
            </exception>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.GetDirectory(AsmResolver.PE.Win32Resources.ResourceType)">
            <summary>
            Looks up an directory by its resource type.
            </summary>
            <param name="type">The type of resources to lookup.</param>
            <returns>The directory.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no directory with the provided identifier was found.
            </exception>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.GetData(System.UInt32)">
            <summary>
            Looks up a data entry in the directory by its unique identifier.
            </summary>
            <param name="id">The id of the data entry to lookup.</param>
            <returns>The data entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no data entry with the provided identifier was found.
            </exception>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.TryGetEntry(System.UInt32,AsmResolver.PE.Win32Resources.IResourceEntry@)">
            <summary>
            Attempts to looks up an entry in the directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the entry to lookup.</param>
            <param name="entry">The found entry, or <c>null</c> if none was found.</param>
            <returns><c>true</c> if the entry was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.TryGetDirectory(System.UInt32,AsmResolver.PE.Win32Resources.IResourceDirectory@)">
            <summary>
            Attempts to looks up a directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the directory to lookup.</param>
            <param name="directory">The found directory, or <c>null</c> if none was found.</param>
            <returns><c>true</c> if the directory was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.TryGetDirectory(AsmResolver.PE.Win32Resources.ResourceType,AsmResolver.PE.Win32Resources.IResourceDirectory@)">
            <summary>
            Attempts to looks up a directory by its resource type.
            </summary>
            <param name="type">The type of resources to lookup.</param>
            <param name="directory">The found directory, or <c>null</c> if none was found.</param>
            <returns><c>true</c> if the directory was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.TryGetData(System.UInt32,AsmResolver.PE.Win32Resources.IResourceData@)">
            <summary>
            Attempts to looks up a data entry in the directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the data entry to lookup.</param>
            <param name="data">The found data entry, or <c>null</c> if none was found.</param>
            <returns><c>true</c> if the data entry was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.AddOrReplaceEntry(AsmResolver.PE.Win32Resources.IResourceEntry)">
            <summary>
            Replaces an existing entry with the same ID with the provided entry, or adds the new entry to the directory.
            </summary>
            <param name="entry">The entry to store in the directory.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.RemoveEntry(System.UInt32)">
            <summary>
            Removes an entry in the directory by its unique identifier.
            </summary>
            <param name="id">The identifier of the entry to remove.</param>
            <returns><c>true</c> if the data entry was found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.IResourceDirectory.RemoveEntry(AsmResolver.PE.Win32Resources.ResourceType)">
            <summary>
            Removes a directory in the directory by its resource type.
            </summary>
            <param name="type">The type of resources to remove.</param>
            <returns><c>true</c> if the directory was found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.IResourceEntry">
            <summary>
            Represents one entry in a win32 resource directory.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceEntry.ParentDirectory">
            <summary>
            Gets the parent directory the entry is stored in.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceEntry.Name">
            <summary>
            Gets or sets the name of the entry.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceEntry.Id">
            <summary>
            Gets or sets the ID of the entry.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceEntry.IsDirectory">
            <summary>
            Gets a value indicating the entry is a sub directory or not.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.IResourceEntry.IsData">
            <summary>
            Gets a value indicating the entry is a data entry or not.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.ResourceData">
            <summary>
            Provides an implementation for a single data entry in a Win32 resource directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.#ctor">
            <summary>
            Initializes a new resource data entry.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.#ctor(System.String,AsmResolver.ISegment)">
            <summary>
            Creates a new named data entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="contents">The data to store in the entry.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.#ctor(System.UInt32,AsmResolver.ISegment)">
            <summary>
            Creates a new data entry defined by a numerical identifier..
            </summary>
            <param name="id">The identifier.</param>
            <param name="contents">The data to store in the entry.</param>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.ParentDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.Id">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.AsmResolver#PE#Win32Resources#IResourceEntry#IsDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.AsmResolver#PE#Win32Resources#IResourceEntry#IsData">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.Contents">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.CodePage">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceData.CanRead">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.CreateReader">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.GetContents">
            <summary>
            Obtains the contents of the data entry.
            </summary>
            <returns>The contents.</returns>
            <remarks>
            This method is called upon initializing the value for the <see cref="P:AsmResolver.PE.Win32Resources.ResourceData.Contents"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceData.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.ResourceDirectory">
            <summary>
            Provides a basic implementation of a resource directory that can be initialized and added to another resource
            directory or used as a root resource directory of a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.#ctor">
            <summary>
            Initializes a new resource directory entry.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.#ctor(System.String)">
            <summary>
            Creates a new named resource directory.
            </summary>
            <param name="name">The name of the directory.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.#ctor(System.UInt32)">
            <summary>
            Creates a new resource directory defined by a numeric identifier.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.#ctor(AsmResolver.PE.Win32Resources.ResourceType)">
            <summary>
            Creates a new resource directory defined by its resource type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.ParentDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Id">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.AsmResolver#PE#Win32Resources#IResourceEntry#IsDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.AsmResolver#PE#Win32Resources#IResourceEntry#IsData">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Type">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Characteristics">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.TimeDateStamp">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.MajorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.MinorVersion">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Entries">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.GetEntry(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.GetDirectory(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.GetDirectory(AsmResolver.PE.Win32Resources.ResourceType)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.GetData(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.TryGetEntry(System.UInt32,AsmResolver.PE.Win32Resources.IResourceEntry@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.TryGetDirectory(System.UInt32,AsmResolver.PE.Win32Resources.IResourceDirectory@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.TryGetDirectory(AsmResolver.PE.Win32Resources.ResourceType,AsmResolver.PE.Win32Resources.IResourceDirectory@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.TryGetData(System.UInt32,AsmResolver.PE.Win32Resources.IResourceData@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.AddOrReplaceEntry(AsmResolver.PE.Win32Resources.IResourceEntry)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.RemoveEntry(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.RemoveEntry(AsmResolver.PE.Win32Resources.ResourceType)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.GetEntries">
            <summary>
            Obtains the list of entries in the directory.
            </summary>
            <returns>The list of entries.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.PE.Win32Resources.ResourceDirectory.Entries"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectory.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry">
            <summary>
            Represents the raw structure of an entry in a directory.
            </summary>
            <remarks>
            This structure models the IMAGE_DIRECTORY_ENTRY_RESOURCE structure as described in
            https://docs.microsoft.com/en-us/windows/win32/debug/pe-format
            </remarks>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.EntrySize">
            <summary>
            The size of a single resource directory entry.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a new resource directory entry from the reader.
            </summary>
            <param name="context">The containing PE file.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.Name">
            <summary>
            Gets the name of the entry (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.IdOrNameOffset">
            <summary>
            Gets either a 32-integer, or an offset to the name, that identifies the type, name or language ID.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.IsByName">
            <summary>
            Gets a value indicating whether the resource was exposed by name.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.DataOrSubDirOffset">
            <summary>
            Gets the offset (relative to the beginning of the resource directory) to the contents of the entry.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.IsData">
            <summary>
            Gets a value indicating whether the resource entry is a data entry or not.
            </summary>
        </member>
        <member name="P:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.IsSubDirectory">
            <summary>
            Gets a value indicating whether the resource entry is a sub directory or not.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.ResourceDirectoryEntry.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.ResourceType">
            <summary>
            Provides members for well-known win32 resource types.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Cursor">
            <summary>
            Indicates the resource contains a hardware-dependent cursor table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Bitmap">
            <summary>
            Indicates the resource contains a bitmap.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Icon">
            <summary>
            Indicates the resource contains a hardware-dependent icon.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Menu">
            <summary>
            Indicates the resource contains a menu.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Dialog">
            <summary>
            Indicates the resource contains a dialog box.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.String">
            <summary>
            Indicates the resource contains a string table.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.FontDirectory">
            <summary>
            Indicates the resource contains a directory of fonts.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Font">
            <summary>
            Indicates the resource contains a font.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Accelerator">
            <summary>
            Indicates the resource contains an accelerator resource.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.RcData">
            <summary>
            Indicates the resource contains an application-defined resource.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.MessageTable">
            <summary>
            Indicates the resource contains a message-table entry.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.GroupCursor">
            <summary>
            Indicates the resource contains a hardware-independent cursor.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.GroupIcon">
            <summary>
            Indicates the resource contains a hardware-independent icon.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Version">
            <summary>
            Indicates the resource contains version information.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.DialogInclude">
            <summary>
            Indicates the resource contains associations between a string with an .rc file.
            Typically, the string is the name of the header file that provides symbolic names.
            The resource compiler parses the string but otherwise ignores the value.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.PlugPlay">
            <summary>
            Indicates the resource contains Plug and Play.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Vxd">
            <summary>
            Indicates the resource contains virtual device driver information.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.AniCursor">
            <summary>
            Indicates the resource contains animated cursors.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.AniIcon">
            <summary>
            Indicates the resource contains animated icons.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Html">
            <summary>
            Indicates the resource contains an HTML file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.ResourceType.Manifest">
            <summary>
            Indicates the resource contains an assembly manifest.
            </summary>
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.SerializedResourceData">
            <summary>
            Provides an implementation for a single data entry in a Win32 resource directory, that was read from an existing
            PE file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.SerializedResourceData.ResourceDataEntrySize">
            <summary>
            Indicates the size of a single data entry in a resource directory.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.SerializedResourceData.#ctor(AsmResolver.PE.PEReaderContext,AsmResolver.PE.Win32Resources.ResourceDirectoryEntry,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a resource data entry from the provided input stream.
            </summary>
            <param name="context">The PE reader context.</param>
            <param name="entry">The entry to read.</param>
            <param name="entryReader">The input stream to read the data from.</param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.SerializedResourceData.GetContents">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.PE.Win32Resources.SerializedResourceDirectory">
            <summary>
            Provides an implementation of a resource directory that was read from an existing PE file.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.SerializedResourceDirectory.ResourceDirectorySize">
            <summary>
            Indicates the size of a single sub-directory entry in a resource directory.
            </summary>
        </member>
        <member name="F:AsmResolver.PE.Win32Resources.SerializedResourceDirectory.MaxDepth">
            <summary>
            Indicates the maximum depth of sub directories a resource directory can have before AsmResolver aborts
            reading the resource tree branch.
            </summary>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.SerializedResourceDirectory.#ctor(AsmResolver.PE.PEReaderContext,System.Nullable{AsmResolver.PE.Win32Resources.ResourceDirectoryEntry},AsmResolver.IO.BinaryStreamReader@,System.Int32)">
            <summary>
            Reads a single resource directory from an input stream.
            </summary>
            <param name="context">The reader context.</param>
            <param name="entry">The entry to read. If this value is <c>null</c>, the root directory is assumed.</param>
            <param name="directoryReader">The input stream.</param>
            <param name="depth">
            The current depth of the resource directory tree structure.
            If this value exceeds <see cref="F:AsmResolver.PE.Win32Resources.SerializedResourceDirectory.MaxDepth"/>, this class will not initialize any entries.
            </param>
        </member>
        <member name="M:AsmResolver.PE.Win32Resources.SerializedResourceDirectory.GetEntries">
            <inheritdoc />
        </member>
    </members>
</doc>
