<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsmResolver.DotNet</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not
            referenced statically, for example, through System.Reflection.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with
            it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute
            class with the specified message.
            </summary>
            <param name="message">A message that contains information about the usage of unreferenced code.</param>
        </member>
        <member name="T:AsmResolver.DotNet.AssemblyDefinition">
            <summary>
            Represents an assembly of self-describing modules of an executable file hosted by a common language runtime (CLR).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromBytes(System.Byte[])">
            <summary>
            Reads a .NET assembly from the provided input buffer.
            </summary>
            <param name="buffer">The raw contents of the executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromFile(System.String)">
            <summary>
            Reads a .NET assembly from the provided input file.
            </summary>
            <param name="filePath">The file path to the input executable to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromFile(AsmResolver.PE.File.PEFile)">
            <summary>
            Reads a .NET assembly from the provided input file.
            </summary>
            <param name="file">The portable executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Reads a .NET assembly from the provided input file.
            </summary>
            <param name="file">The portable executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.File.PEMappingMode)">
            <summary>
            Reads a .NET assembly from an input stream.
            </summary>
            <param name="reader">The input stream pointing at the beginning of the executable to load.</param>
            <param name="mode">Indicates the input PE is mapped or unmapped.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromImage(AsmResolver.PE.IPEImage)">
            <summary>
            Initializes a .NET assembly from a PE image.
            </summary>
            <param name="peImage">The image containing the .NET metadata.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.FromImage(AsmResolver.PE.IPEImage,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Initializes a .NET assembly from a PE image.
            </summary>
            <param name="peImage">The image containing the .NET metadata.</param>
            <param name="readerParameters">The parameters to use while reading the assembly.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new assembly definition.
            </summary>
            <param name="token">The token of the assembly definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.#ctor(AsmResolver.Utf8String,System.Version)">
            <summary>
            Creates a new assembly definition.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="version">The version of the assembly.</param>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.HashAlgorithm">
            <summary>
            Gets or sets the hashing algorithm that is used to sign the assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.HasManifestModule">
            <summary>
            Gets a value indicating whether the assembly contains a manifest module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.ManifestModule">
            <summary>
            Gets the main module of the .NET assembly containing the assembly's manifest.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.Modules">
            <summary>
            Gets a collection of modules that this .NET assembly defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.SecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.PublicKey">
            <summary>
            Gets or sets the public key of the assembly to use for verification of a signature.
            </summary>
            <remarks>
            <para>If this value is set to <c>null</c>, no public key will be assigned.</para>
            <para>This property does not automatically update the <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.HasPublicKey"/> property.</para>
            <para>This property corresponds to the Culture column in the assembly definition table.</para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDefinition.IsCorLib">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.GetModules">
            <summary>
            Obtains the list of defined modules in the .NET assembly.
            </summary>
            <returns>The modules.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyDefinition.Modules"/> and/or <see cref="P:AsmResolver.DotNet.AssemblyDefinition.ManifestModule"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.GetSecurityDeclarations">
            <summary>
            Obtains the list of security declarations assigned to the member.
            </summary>
            <returns>The security declarations</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.AssemblyDefinition.SecurityDeclarations"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.GetPublicKey">
            <summary>
            Obtains the public key of the assembly definition.
            </summary>
            <returns>The public key.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyDefinition.PublicKey"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.GetPublicKeyToken">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.TryGetTargetFramework(AsmResolver.DotNet.DotNetRuntimeInfo@)">
            <summary>
            Attempts to extract the target runtime from the <see cref="M:AsmResolver.DotNet.AssemblyDefinition.TryGetTargetFramework(AsmResolver.DotNet.DotNetRuntimeInfo@)"/> attribute.
            </summary>
            <param name="info">The runtime.</param>
            <returns><c>true</c> if the attribute was found and the runtime was extracted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.Write(System.String)">
            <summary>
            Rebuilds the .NET assembly to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.Write(System.String,AsmResolver.DotNet.Builder.IPEImageBuilder)">
            <summary>
            Rebuilds the .NET assembly to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.Write(System.String,AsmResolver.DotNet.Builder.IPEImageBuilder,AsmResolver.PE.Builder.IPEFileBuilder)">
            <summary>
            Rebuilds the .NET assembly to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <param name="fileBuilder">The engine to use for reconstructing a PE file.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.WriteManifest(System.IO.Stream)">
            <summary>
            Rebuilds the manifest module and writes it to the stream specified.
            </summary>
            <param name="stream">The output stream of the manifest module file.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.WriteManifest(System.IO.Stream,AsmResolver.DotNet.Builder.IPEImageBuilder)">
            <summary>
            Rebuilds the manifest module and writes it to the stream specified.
            </summary>
            <param name="stream">The output stream of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDefinition.WriteManifest(System.IO.Stream,AsmResolver.DotNet.Builder.IPEImageBuilder,AsmResolver.PE.Builder.IPEFileBuilder)">
            <summary>
            Rebuilds the manifest module and writes it to the stream specified.
            </summary>
            <param name="stream">The output stream of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <param name="fileBuilder">The engine to use for reconstructing a PE file.</param>
        </member>
        <member name="T:AsmResolver.DotNet.AssemblyDescriptor">
            <summary>
            Provides a base implementation for describing a self-describing .NET assembly hosted by a common language runtime (CLR).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new empty assembly descriptor.
            </summary>
            <param name="token">The token of the assembly descriptor.</param>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <remarks>
            This property corresponds to the Name column in the assembly table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.Version">
            <summary>
            Gets or sets the version of the assembly.
            </summary>
            <remarks>
            This property corresponds to the MajorVersion, MinorVersion, BuildNumber and RevisionNumber columns in
            the assembly table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.Attributes">
            <summary>
            Gets or sets the attributes associated to the assembly.
            </summary>
            <remarks>
            This property corresponds to the Attributes column in the assembly table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.HasPublicKey">
            <summary>
            Gets or sets a value indicating whether the assembly holds the full (unhashed) public key.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.EnableJitCompileTracking">
            <summary>
            Gets or sets a value indicating just-in-time (JIT) compiler tracking is enabled for the assembly.
            </summary>
            <remarks>
            This attribute originates from the <see cref="T:System.Diagnostics.DebuggableAttribute"/> attribute.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.DisableJitCompileOptimizer">
            <summary>
            Gets or sets a value indicating any just-in-time (JIT) compiler optimization is disabled for the assembly.
            </summary>
            <remarks>
            This attribute originates from the <see cref="T:System.Diagnostics.DebuggableAttribute"/> attribute.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.IsWindowsRuntime">
            <summary>
            Gets or sets a value indicating whether the assembly contains Windows Runtime (WinRT) code or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.IsRetargetable">
            <summary>
            Gets or sets a value indicating whether the assembly can be retargeted (at runtime) to an assembly from
            a different publisher.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.Culture">
            <summary>
            Gets or sets the locale string of the assembly (if available).
            </summary>
            <remarks>
            <para>If this value is set to <c>null</c>, the default locale will be used</para>
            <para>This property corresponds to the Culture column in the assembly table.</para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyDescriptor.IsCorLib">
            <summary>
            Gets a value indicating whether the assembly descriptor references a Common Object Runtime standard library.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.GetPublicKeyToken">
            <summary>
            When the application is signed with a strong name, obtains the public key token of the assembly
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.GetName">
            <summary>
            Obtains the name of the assembly definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.GetCulture">
            <summary>
            Obtains the locale string of the assembly definition.
            </summary>
            <returns>The locale string.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.Culture"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the assembly descriptor using the provided reference importer.
            </summary>
            <param name="importer">The importer object to use.</param>
            <returns>The imported assembly reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.ComputePublicKeyToken(System.Byte[],AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyHashAlgorithm)">
            <summary>
            Computes the token of a public key using the provided hashing algorithm.
            </summary>
            <param name="publicKey">The public key to obtain the token from.</param>
            <param name="algorithm">The algorithm to use.</param>
            <returns>The public key token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyDescriptor.Resolve">
            <summary>
            Resolves the reference to the assembly to an assembly definition.
            </summary>
            <returns>The assembly definition, or <c>null</c> if the resolution failed.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.AssemblyReference">
            <summary>
            Represents a reference to an external .NET assembly, hosted by a common language runtime (CLR).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new assembly reference.
            </summary>
            <param name="token">The token of the assembly reference.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.#ctor(AsmResolver.Utf8String,System.Version)">
            <summary>
            Creates a new assembly reference.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="version">The version of the assembly.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.#ctor(AsmResolver.Utf8String,System.Version,System.Boolean,System.Byte[])">
            <summary>
            Creates a new assembly reference.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="version">The version of the assembly.</param>
            <param name="publicKey">Indicates the key provided by <paramref name="publicKeyOrToken"/> is the full,
            unhashed public key used to verify the authenticity of the assembly.</param>
            <param name="publicKeyOrToken">Indicates the public key or token (depending on <paramref name="publicKey"/>),
            used to verify the authenticity of the assembly.</param>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.#ctor(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Creates a new assembly reference, and copies over all properties of another assembly descriptor.
            </summary>
            <param name="descriptor">The assembly to base the reference on.</param>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyReference.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyReference.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#ModuleDefinition}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyReference.PublicKeyOrToken">
            <summary>
            Gets or sets the (token of the) public key of the assembly to use for verification of a signature.
            </summary>
            <remarks>
            <para>If this value is set to <c>null</c>, no public key will be assigned.</para>
            <para>When <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.HasPublicKey"/> is set to <c>true</c>, this value contains the full
            unhashed public key that was used to sign the assembly. This property does not automatically update the
            <see cref="P:AsmResolver.DotNet.AssemblyDescriptor.HasPublicKey"/> property.</para>
            <para>This property corresponds to the Culture column in the assembly definition table.</para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyReference.HashValue">
            <summary>
            Gets or sets the hash value of the assembly reference.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyReference.IsCorLib">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.GetPublicKeyToken">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.GetPublicKeyOrToken">
            <summary>
            Obtains the public key or token of the assembly reference.
            </summary>
            <returns>The public key or token.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyReference.PublicKeyOrToken"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.GetHashValue">
            <summary>
            Obtains the hash value of the assembly reference.
            </summary>
            <returns>The hash value.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.AssemblyReference.HashValue"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyReference.Resolve">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.AssemblyResolverBase">
            <summary>
            Provides a base implementation of an assembly resolver, that includes a collection of search directories to look
            into for probing assemblies.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.#ctor(AsmResolver.IO.IFileService)">
            <summary>
            Initializes the base of an assembly resolver.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyResolverBase.FileService">
            <summary>
            Gets the file service that is used for reading files from the disk.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.AssemblyResolverBase.SearchDirectories">
            <summary>
            Gets a collection of custom search directories that are probed upon resolving a reference
            to an assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.Resolve(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.AddToCache(AsmResolver.DotNet.AssemblyDescriptor,AsmResolver.DotNet.AssemblyDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.RemoveFromCache(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.HasCached(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.ClearCache">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.ResolveImpl(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Resolves a new unseen reference to an assembly.
            </summary>
            <param name="assembly">The assembly to resolve.</param>
            <returns>The resolved assembly, or <c>null</c> if the resolution failed.</returns>
            <remarks>
            This method should not implement caching of resolved assemblies. The caller of this method already implements
            this.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.LoadAssemblyFromFile(System.String)">
            <summary>
            Attempts to read an assembly from its file path.
            </summary>
            <param name="path">The path to the assembly.</param>
            <returns>The assembly.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.ProbeSearchDirectories(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Probes all search directories in <see cref="P:AsmResolver.DotNet.AssemblyResolverBase.SearchDirectories"/> for the provided assembly.
            </summary>
            <param name="assembly">The assembly descriptor to search.</param>
            <returns>The path to the assembly, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.ProbeRuntimeDirectories(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Probes all known runtime directories for the provided assembly.
            </summary>
            <param name="assembly">The assembly descriptor to search.</param>
            <returns>The path to the assembly, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.AssemblyResolverBase.ProbeDirectory(AsmResolver.DotNet.AssemblyDescriptor,System.String)">
            <summary>
            Probes a directory for the provided assembly.
            </summary>
            <param name="assembly">The assembly descriptor to search.</param>
            <param name="directory">The path to the directory to probe.</param>
            <returns>The path to the assembly, or <c>null</c> if none was found.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Discovery.MemberDiscoverer">
            <summary>
            Provides a mechanism for traversing a module and collecting all members defined in it.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Discovery.MemberDiscoverer.DiscoverMembersInModule(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags)">
            <summary>
            Performs a traversal on the provided module and collects all member defined in it.
            </summary>
            <param name="module">The module to traverse.</param>
            <param name="flags">Flags indicating which member lists the original order needs to be preserved.</param>
            <returns>The collected members.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Discovery.MemberDiscoverer.PlaceHolderTypeDefinition">
            <summary>
            Represents a place holder type definition.
            </summary>
            <remarks>
            <para>
            This class is kind of a hack. It allows us to return type definitions
            that seem to be present in the module without actually adding the type definition to
            <see cref="P:AsmResolver.DotNet.ModuleDefinition.TopLevelTypes"/> or as a nested type of one of these types.
            </para>
            <para>
            This has a nice effect that we never really change the internal state of the .NET module during the
            discovery process when we need to stuff free RIDs with placeholder types, preventing all kinds of
            problems.
            </para>
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags">
            <summary>
            Provides members describing the types of members for which the order in which they are defined in the original
            module can be preserved.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.None">
            <summary>
            Specifies no list of definitions need to be preserved in order. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreserveTypeOrder">
            <summary>
            Specifies the list of type definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreserveFieldOrder">
            <summary>
            Specifies the list of field definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreserveMethodOrder">
            <summary>
            Specifies the list of method definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreserveParameterOrder">
            <summary>
            Specifies the list of parameter definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreserveEventOrder">
            <summary>
            Specifies the list of event definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryFlags.PreservePropertyOrder">
            <summary>
            Specifies the list of properties definitions needs to be preserved in order.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult">
            <summary>
            Provides a collection of members that were discovered during a traversal of a module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Types">
            <summary>
            Gets a list of types that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Fields">
            <summary>
            Gets a list of fields that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Methods">
            <summary>
            Gets a list of modules that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Parameters">
            <summary>
            Gets a list of parameters that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Properties">
            <summary>
            Gets a list of properties that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Discovery.MemberDiscoveryResult.Events">
            <summary>
            Gets a list of events that are discovered during the traversal of the module.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer">
            <summary>
            Provides a mutable buffer for building up a .NET data directory, containing all metadata relevant for the
            execution of a .NET assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetTypeDefOrRefIndex(AsmResolver.DotNet.ITypeDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.#ctor(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Code.IMethodBodySerializer,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer,AsmResolver.IErrorListener)">
            <summary>
            Creates a new .NET data directory buffer.
            </summary>
            <param name="module">The module for which this .NET directory is built.</param>
            <param name="methodBodySerializer">The method body serializer to use for constructing method bodies.</param>
            <param name="symbolsProvider">The object responsible for providing references to native symbols.</param>
            <param name="metadata">The metadata builder </param>
            <param name="errorListener">The object responsible for collecting all diagnostic information during the building process.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.Module">
            <summary>
            Gets the module for which this .NET directory is built.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.MethodBodySerializer">
            <summary>
            Gets the method body serializer to use for constructing method bodies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.SymbolsProvider">
            <summary>
            Gets the object responsible for providing references to native symbols.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.Metadata">
            <summary>
            Gets the metadata directory buffer, containing the metadata stream buffers.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.ErrorListener">
            <summary>
            Gets the object responsible for collecting all diagnostic information during the building process.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.Resources">
            <summary>
            Gets the .NET resources data directory buffer, containing all the resources data stored in the .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.StrongNameSize">
            <summary>
            Gets or sets the size of the strong name directory to be emitted. A value of 0 indicates no strong name
            directory will be emitted.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.VTableFixups">
            <summary>
            Gets the buffer used to store VTable fixups and register unmanaged symbols.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.CreateDirectory">
            <summary>
            Builds the .NET data directory from the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineAssembly(AsmResolver.DotNet.AssemblyDefinition)">
            <summary>
            Adds an assembly, its entire manifest module, and all secondary module file references, to the buffer.
            </summary>
            <param name="assembly">The assembly to add.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineModule(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Adds a module metadata row to the buffer.
            </summary>
            <param name="module">The module to add.</param>
            <remarks>
            This method only adds the metadata row of the module definition to the module table buffer,
            it does not add any type definition to the buffer, nor does it add custom attributes or any
            other metadata model object related to this module to the buffer.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.FinalizeModule(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Finalizes the module definition.
            </summary>
            <param name="module">The module to finalize.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddManifestResource(AsmResolver.DotNet.ManifestResource)">
            <summary>
            Adds a single manifest resource to the buffer.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns>The new metadata token of the resource.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineTypes(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.TypeDefinition})">
            <summary>
            Allocates metadata rows for the provided type definitions in the buffer.
            </summary>
            <param name="types">The types to define.</param>
            <remarks>
            This method does not define any member defined in the type, except for nested types.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineFields(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.FieldDefinition})">
            <summary>
            Allocates metadata rows for the provided field definitions in the buffer.
            </summary>
            <param name="fields">The fields to define.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineMethods(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.MethodDefinition})">
            <summary>
            Allocates metadata rows for the provided method definitions in the buffer.
            </summary>
            <param name="methods">The methods to define.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineParameters(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.ParameterDefinition})">
            <summary>
            Allocates metadata rows for the provided parameter definitions in the buffer.
            </summary>
            <param name="parameters">The parameters to define.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineProperties(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.PropertyDefinition})">
            <summary>
            Allocates metadata rows for the provided property definitions in the buffer.
            </summary>
            <param name="properties">The properties to define.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.DefineEvents(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.EventDefinition})">
            <summary>
            Allocates metadata rows for the provided event definitions in the buffer.
            </summary>
            <param name="events">The events to define.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.FinalizeTypes">
            <summary>
            Finalizes all type definitions added in the buffer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetUserStringIndex(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetTypeReferenceToken(AsmResolver.DotNet.TypeReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddTypeReference(AsmResolver.DotNet.TypeReference,System.Boolean,System.Boolean)">
            <summary>
            Adds a type reference to the buffer.
            </summary>
            <param name="type">The reference to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <param name="preserveRid">
            <c>true</c> if the metadata token of the type should be preserved, <c>false</c> otherwise.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetTypeDefinitionToken(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetFieldDefinitionToken(AsmResolver.DotNet.FieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetMethodDefinitionToken(AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetParameterDefinitionToken(AsmResolver.DotNet.ParameterDefinition)">
            <summary>
            Gets the newly assigned metadata token of a parameter definition stored in a tables stream or tables
            stream buffer.
            </summary>
            <param name="parameter">The reference to the parameter to add.</param>
            <returns>The metadata token of the added parameter definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetPropertyDefinitionToken(AsmResolver.DotNet.PropertyDefinition)">
            <summary>
            Gets the newly assigned metadata token of a property definition stored in a tables stream or tables stream buffer.
            </summary>
            <param name="property">The reference to the property to add.</param>
            <returns>The metadata token of the added property definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetEventDefinitionToken(AsmResolver.DotNet.EventDefinition)">
            <summary>
            Gets the newly assigned metadata token of an event definition stored in a tables stream or tables stream buffer.
            </summary>
            <param name="event">The reference to the event to add.</param>
            <returns>The metadata token of the added event definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetMemberReferenceToken(AsmResolver.DotNet.MemberReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddMemberReference(AsmResolver.DotNet.MemberReference,System.Boolean)">
            <summary>
            Adds a member reference to the buffer.
            </summary>
            <param name="member">The reference to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetStandAloneSignatureToken(AsmResolver.DotNet.StandAloneSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddStandAloneSignature(AsmResolver.DotNet.StandAloneSignature,System.Boolean)">
            <summary>
            Adds a stand-alone signature to the buffer.
            </summary>
            <param name="signature">The signature to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetAssemblyReferenceToken(AsmResolver.DotNet.AssemblyReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddAssemblyReference(AsmResolver.DotNet.AssemblyReference,System.Boolean,System.Boolean)">
            <summary>
            Adds an assembly reference to the buffer.
            </summary>
            <param name="assembly">The reference to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <param name="preserveRid">
            <c>true</c> if the metadata token of the assembly should be preserved, <c>false</c> otherwise.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetModuleReferenceToken(AsmResolver.DotNet.ModuleReference)">
            <summary>
            Adds a single module reference to the buffer.
            </summary>
            <param name="reference">The reference to add.</param>
            <returns>The new metadata token assigned to the module reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddModuleReference(AsmResolver.DotNet.ModuleReference,System.Boolean,System.Boolean)">
            <summary>
            Adds a module reference to the buffer.
            </summary>
            <param name="reference">The reference to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <param name="preserveRid">
            <c>true</c> if the metadata token of the module should be preserved, <c>false</c> otherwise.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetTypeSpecificationToken(AsmResolver.DotNet.TypeSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddTypeSpecification(AsmResolver.DotNet.TypeSpecification,System.Boolean)">
            <summary>
            Adds a type specification to the buffer.
            </summary>
            <param name="type">The specification to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.GetMethodSpecificationToken(AsmResolver.DotNet.MethodSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuffer.AddMethodSpecification(AsmResolver.DotNet.MethodSpecification,System.Boolean)">
            <summary>
            Adds a method specification to the buffer.
            </summary>
            <param name="method">The specification to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.
            </param>
            <returns>The newly assigned metadata token.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.DotNetDirectoryBuildResult">
            <summary>
            Describes the result of a construction of a <see cref="T:AsmResolver.PE.DotNet.IDotNetDirectory"/>. from a <see cref="T:AsmResolver.DotNet.ModuleDefinition"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryBuildResult.#ctor(AsmResolver.PE.DotNet.IDotNetDirectory,AsmResolver.DotNet.Builder.ITokenMapping)">
            <summary>
            Creates a new instance of teh <see cref="T:AsmResolver.DotNet.Builder.DotNetDirectoryBuildResult"/> class.
            </summary>
            <param name="directory">The constructed directory.</param>
            <param name="mapping">An object defining a mapping between members and their new metadata tokens.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuildResult.Directory">
            <summary>
            Gets the constructed .NET data directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryBuildResult.TokenMapping">
            <summary>
            Gets an object that maps metadata members to their newly assigned tokens.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.DotNetDirectoryFactory">
            <summary>
            Provides a default implementation for the <see cref="T:AsmResolver.DotNet.Builder.IDotNetDirectoryFactory"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.DotNetDirectoryFactory"/> claDiagnosticBag// </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.#ctor(AsmResolver.DotNet.Builder.MetadataBuilderFlags)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.DotNetDirectoryFactory"/> class.
            </summary>
            <param name="metadataBuilderFlags">
            The flags defining the behaviour of the .NET metadata directory builder regarding the
            construction of the .NET metadata directory.
            </param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.MetadataBuilderFlags">
            <summary>
            Gets or sets the flags defining the behaviour of the .NET metadata directory builder regarding the
            construction of the .NET metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.MethodBodySerializer">
            <summary>
            Gets or sets the method body serializer to use for constructing method bodies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.StrongNamePrivateKey">
            <summary>
            Gets or sets the strong-name private key to use for signing the module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.DotNetDirectoryFactory.CreateDotNetDirectory(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.DiagnosticBag)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.IDotNetDirectoryFactory">
            <summary>
            Provides members for constructing a .NET data directory that can be inserted into a <see cref="T:AsmResolver.PE.IPEImage"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.IDotNetDirectoryFactory.CreateDotNetDirectory(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.DiagnosticBag)">
            <summary>
            Constructs a .NET data directory based on the provided .NET module.
            </summary>
            <param name="module">The module to serialize to a .NET data directory.</param>
            <param name="symbolsProvider">The object responsible for providing references to native symbols.</param>
            <param name="diagnosticBag">The bag that is used to collect all diagnostic information during the building process. </param>
            <returns>The serialized data directory.</returns>
            <exception cref="T:AsmResolver.DotNet.Builder.MetadataBuilderException">Occurs when the metadata builder encounters an error.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.IPEImageBuilder">
            <summary>
            Provides members for serializing a .NET module to a PE image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.IPEImageBuilder.CreateImage(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Constructs a PE image from a .NET module.
            </summary>
            <param name="module">The module to serialize.</param>
            <returns>The constructed PE image.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.ITokenMapping">
            <summary>
            Maps new metadata tokens to members added to a .NET tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.ITokenMapping.Item(AsmResolver.DotNet.IMetadataMember)">
            <summary>
            Gets the new metadata token assigned to the provided member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.ITokenMapping.TryGetNewToken(AsmResolver.DotNet.IMetadataMember,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken@)">
            <summary>
            Gets the new metadata token assigned to the provided member, if it was registered in this mapping.
            </summary>
            <param name="member">The member.</param>
            <param name="token">The new metadata token.</param>
            <returns><c>true</c> if the provided member was assigned a new token, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.ManagedPEImageBuilder">
            <summary>
            Provides a default implementation of <see cref="T:AsmResolver.DotNet.Builder.IPEImageBuilder"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.ManagedPEImageBuilder.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.ManagedPEImageBuilder"/> class, using the default  implementation
            of the <see cref="T:AsmResolver.DotNet.Builder.IDotNetDirectoryFactory"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.ManagedPEImageBuilder.#ctor(AsmResolver.DotNet.Builder.MetadataBuilderFlags)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.ManagedPEImageBuilder"/> class, and initializes a new
            .NET data directory factory using the provided metadata builder flags.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.ManagedPEImageBuilder.#ctor(AsmResolver.DotNet.Builder.IDotNetDirectoryFactory)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.ManagedPEImageBuilder"/> class, using the provided
            .NET data directory flags.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.ManagedPEImageBuilder.DotNetDirectoryFactory">
            <summary>
            Gets or sets the factory responsible for constructing the .NET data directory.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.ManagedPEImageBuilder.CreateImage(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.MetadataBuilderException">
            <summary>
            Represents the exception that occurs when the .NET metadata builder transitions into an illegal state.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.MetadataBuilderException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.MetadataBuilderException"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.MetadataBuilderException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.MetadataBuilderException"/> class with the provided message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.MetadataBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.MetadataBuilderException"/> class with the provided message.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception causing the exception.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.MetadataBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.MetadataBuilderFlags">
            <summary>
            Provides members for describing the behaviour of the .NET directory builder.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.None">
            <summary>
            Indicates no special metadata builder flags.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveBlobIndices">
            <summary>
            Indicates indices into the #Blob stream should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveGuidIndices">
            <summary>
            Indicates indices into the #GUID stream should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveStringIndices">
            <summary>
            Indicates indices into the #Strings stream should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveUserStringIndices">
            <summary>
            Indicates indices into the #US stream should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveTypeReferenceIndices">
            <summary>
            Indicates indices into the type references table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveTypeDefinitionIndices">
            <summary>
            Indicates indices into the type definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveFieldDefinitionIndices">
            <summary>
            Indicates indices into the field definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveMethodDefinitionIndices">
            <summary>
            Indicates indices into the method definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveParameterDefinitionIndices">
            <summary>
            Indicates indices into the parameter definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveMemberReferenceIndices">
            <summary>
            Indicates indices into the member reference table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveStandAloneSignatureIndices">
            <summary>
            Indicates indices into the stand-alone signature table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveEventDefinitionIndices">
            <summary>
            Indicates indices into the event definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreservePropertyDefinitionIndices">
            <summary>
            Indicates indices into the property definition table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveModuleReferenceIndices">
            <summary>
            Indicates indices into the module reference table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveTypeSpecificationIndices">
            <summary>
            Indicates indices into the type specification table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveAssemblyReferenceIndices">
            <summary>
            Indicates indices into the assembly reference table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveMethodSpecificationIndices">
            <summary>
            Indicates indices into the method specification table should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveTableIndices">
            <summary>
            Indicates indices into the tables stream should be preserved whenever possible during the construction
            of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveUnknownStreams">
            <summary>
            Indicates unconventional / spurious metadata streams present in the .NET metadata directory should be
            preserved when possible.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveStreamOrder">
            <summary>
            Indicates unconventional metadata stream order in the .NET metadata directory should be preserved when
            possible.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.PreserveAll">
            <summary>
            Indicates any kind of index into a blob or tables stream, as well as unknown spurious metadata streams
            should be preserved whenever possible during the construction of the metadata directory.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.MetadataBuilderFlags.NoStringsStreamOptimization">
            <summary>
            <para>
            By default, AsmResolver will optimize the #Strings stream for size. This means that strings that are a
            suffix of another will not be added twice to the buffer, but rather will be referenced using an offset
            within the longer string. This avoids lots of duplication in the final stream.
            </para>
            <para>
            Setting this flag will disable this optimization.
            </para>
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer">
            <summary>
            Provides a mutable buffer for building up a blob stream in a .NET portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.#ctor">
            <summary>
            Creates a new blob stream buffer with the default blob stream name.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.#ctor(System.String)">
            <summary>
            Creates a new blob stream buffer.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.ImportStream(AsmResolver.PE.DotNet.Metadata.Blob.BlobStream)">
            <summary>
            Imports the contents of a user strings stream and indexes all present strings.
            </summary>
            <param name="stream">The stream to import.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.AppendRawData(System.Byte[])">
            <summary>
            Appends raw data to the stream.
            </summary>
            <param name="data">The data to append.</param>
            <returns>The index to the start of the data.</returns>
            <remarks>
            This method does not index the blob data. Calling <see cref="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.AppendRawData(System.Byte[])"/> or <see cref="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.GetBlobIndex(System.Byte[])"/>
            on the same data will append the data a second time.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.GetBlobIndex(System.Byte[])">
            <summary>
            Gets the index to the provided blob. If the blob is not present in the buffer, it will be appended to the end
            of the stream.
            </summary>
            <param name="blob">The blob to lookup or add.</param>
            <returns>The index of the blob.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.GetBlobIndex(AsmResolver.DotNet.Signatures.ITypeCodedIndexProvider,AsmResolver.DotNet.Signatures.BlobSignature,AsmResolver.IErrorListener)">
            <summary>
            Gets the index to the provided blob signature. If the signature is not present in the buffer, it will be
            appended to the end of the stream.
            </summary>
            <param name="provider">The object to use for obtaining metadata tokens for members in the tables stream.</param>
            <param name="signature">The signature to lookup or add.</param>
            <param name="errorListener">The object responsible for collecting diagnostic information.</param>
            <returns>The index of the signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.CreateStream">
            <summary>
            Serialises the blob stream buffer to a metadata stream.
            </summary>
            <returns>The metadata stream.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Blob.BlobStreamBuffer.AsmResolver#DotNet#Builder#Metadata#IMetadataStreamBuffer#CreateStream">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer">
            <summary>
            Provides a mutable buffer for building up a GUID stream in a .NET portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.#ctor">
            <summary>
            Creates a new GUID stream buffer with the default GUID stream name.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.#ctor(System.String)">
            <summary>
            Creates a new GUID stream buffer.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.ImportStream(AsmResolver.PE.DotNet.Metadata.Guid.GuidStream)">
            <summary>
            Imports the contents of a GUID stream and indexes all present GUIDs.
            </summary>
            <param name="stream">The stream to import.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.GetGuidIndex(System.Guid)">
            <summary>
            Gets the index to the provided GUID. If the GUID. is not present in the buffer, it will be appended to the
            end of the stream.
            </summary>
            <param name="guid">The GUID. to lookup or add.</param>
            <returns>The index of the GUID.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.CreateStream">
            <summary>
            Serializes the GUID stream buffer to a metadata stream.
            </summary>
            <returns>The metadata stream.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Guid.GuidStreamBuffer.AsmResolver#DotNet#Builder#Metadata#IMetadataStreamBuffer#CreateStream">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer">
            <summary>
            Provides access to various metadata stream buffers, including tables, strings, user-strings, GUID and blob
            streams.  
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.BlobStream">
            <summary>
            Gets the mutable blob stream (#Blob) buffer of this metadata directory.  
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.StringsStream">
            <summary>
            Gets the mutable strings stream (#Strings) buffer of this metadata directory.  
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.UserStringsStream">
            <summary>
            Gets the mutable user-strings stream (#US) buffer of this metadata directory.  
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.GuidStream">
            <summary>
            Gets the mutable GUID stream (#GUID) buffer of this metadata directory.  
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.TablesStream">
            <summary>
            Gets the mutable tables stream (#~ or #-) buffer of this metadata directory.  
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer.CreateMetadata">
            <summary>
            Flushes all metadata stream buffers and builds up a new metadata directory. 
            </summary>
            <returns>The constructed metadata directory.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.IMetadataStreamBuffer">
            <summary>
            Represents a mutable buffer for a metadata stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataStreamBuffer.Name">
            <summary>
            Gets the name of the stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.IMetadataStreamBuffer.IsEmpty">
            <summary>
            Gets a value indicating whether the metadata stream buffer does not contain any data.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.IMetadataStreamBuffer.CreateStream">
            <summary>
            Serializes the buffer to a metadata stream.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.MemberNotImportedException">
            <summary>
            Represents the exception that occurs when an external metadata member was used in a .NET module, but was not
            imported in said module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.MemberNotImportedException.#ctor(AsmResolver.DotNet.IMetadataMember)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.Metadata.MemberNotImportedException"/>.
            </summary>
            <param name="member">The member that was not imported.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MemberNotImportedException.Member">
            <summary>
            Gets the member that was not imported.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer">
            <summary>
            Provides a default implementation for <see cref="T:AsmResolver.DotNet.Builder.Metadata.IMetadataBuffer" /> that produces compressed metadata (#~).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.#ctor">
            <summary>
            Creates a new metadata directory buffer that targets runtime version v4.0.30319.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.#ctor(System.String)">
            <summary>
            Creates a new metadata directory buffer.
            </summary>
            <param name="versionString">The runtime version string to use.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.BlobStream">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.StringsStream">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.UserStringsStream">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.GuidStream">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.TablesStream">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.OptimizeStringIndices">
            <summary>
            Gets or sets a value indicating whether the strings stream should be optimized for size upon constructing
            the metadata directory. This means that strings that are a suffix of another will not be added twice to the
            buffer, but rather will be referenced using an offset within the longer string. This avoids lots of
            duplication in the final stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.MetadataBuffer.CreateMetadata">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlob.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlob.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlobSuffixComparer">
            <summary>
            Provides an implementation of a string comparer that groups strings with the same suffix next to each other.
            The largest string is ordered first, and any string that is a suffix of this large string will follow in
            descending order.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlobSuffixComparer.Instance">
            <summary>
            Gets the instance of the suffix comparer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlobSuffixComparer.Compare(AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlob,AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlob)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBlobSuffixComparer.Compare(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer">
            <summary>
            Provides a mutable buffer for building up a strings stream in a .NET portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.#ctor">
            <summary>
            Creates a new strings stream buffer with the default strings stream name.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.#ctor(System.String)">
            <summary>
            Creates a new strings stream buffer.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.ImportStream(AsmResolver.PE.DotNet.Metadata.Strings.StringsStream)">
            <summary>
            Imports the contents of a strings stream and indexes all present strings.
            </summary>
            <param name="stream">The stream to import.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when the stream buffer is not empty.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.GetStringIndex(AsmResolver.Utf8String)">
            <summary>
            Gets the index to the provided string. If the string is not present in the buffer, it will be appended to
            the end of the stream.
            </summary>
            <param name="value">The string to lookup or add.</param>
            <returns>The index of the string.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.Optimize">
            <summary>
            Optimizes the buffer by removing string entries that have a common suffix with another.
            </summary>
            <returns>A translation table that maps old offsets to the new ones after optimizing.</returns>
            <remarks>
            This method might invalidate all offsets obtained by <see cref="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.GetStringIndex(AsmResolver.Utf8String)"/>.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.CreateStream">
            <summary>
            Serializes the strings stream buffer to a metadata stream.
            </summary>
            <returns>The metadata stream.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Strings.StringsStreamBuffer.AsmResolver#DotNet#Builder#Metadata#IMetadataStreamBuffer#CreateStream">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1">
            <summary>
            Decorates a metadata table buffer with a filter that removes all duplicated rows from the buffer.
            </summary>
            <typeparam name="TRow">The type of rows to store.</typeparam>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.#ctor(AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer{`0})">
            <summary>
            Creates a new distinct metadata table buffer decorator.
            </summary>
            <param name="underlyingBuffer">The underlying table buffer.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Item(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.EnsureCapacity(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.GetRowRef(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Add(`0@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Insert(System.UInt32,`0@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Insert(System.UInt32,`0@,System.Boolean)">
            <summary>
            Inserts a row into the metadata table at the provided row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">The row to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.</param>
            <returns>The metadata token that this row was assigned to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Add(`0@,System.Boolean)">
            <summary>
            Adds a row to the metadata table buffer.
            </summary>
            <param name="row">The row to add.</param>
            <param name="allowDuplicates">
            <c>true</c> if the row is always to be added to the end of the buffer, <c>false</c> if a duplicated row
            is supposed to be removed and the token of the original should be returned instead.</param>
            <returns>The metadata token that this row was assigned to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.FlushToTable">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.DistinctMetadataTableBuffer`1.Clear">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer">
            <summary>
            Provides members for constructing a new metadata table.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer.Count">
            <summary>
            Gets the number of rows that were added to the buffer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer.FlushToTable">
            <summary>
            Submits all rows to the underlying table stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer.Clear">
            <summary>
            Clears the table buffer.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1">
            <summary>
            Provides members for constructing a new metadata table.
            </summary>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1.Item(System.UInt32)">
            <summary>
            Gets or sets a row in the metadata table.
            </summary>
            <param name="rid">The identifier of the metadata row.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the capacity of the table buffer is at least the provided amount of elements.
            </summary>
            <param name="capacity">The number of elements to store.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1.GetRowRef(System.UInt32)">
            <summary>
            Gets or sets a reference to a row in the metadata table.
            </summary>
            <param name="rid">The identifier of the metadata row.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1.Add(`0@)">
            <summary>
            Adds a row to the metadata table.
            </summary>
            <param name="row">The row to add.</param>
            <returns>The metadata token that this row was assigned to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.IMetadataTableBuffer`1.Insert(System.UInt32,`0@)">
            <summary>
            Inserts a row into the metadata table at the provided row identifier.
            </summary>
            <param name="rid">The row identifier.</param>
            <param name="row">The row to add.</param>
            <returns>The metadata token that this row was assigned to.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.ISortedMetadataTableBuffer`2">
            <summary>
            Provides members for constructing a new metadata table.
            </summary>
            <typeparam name="TKey">The type of members that are assigned new metadata rows.</typeparam>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.ISortedMetadataTableBuffer`2.Add(`0,`1@)">
            <summary>
            Adds a row to the metadata table.
            </summary>
            <param name="originalMember">The original member that was assigned a new metadata row.</param>
            <param name="row">The row to add.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.ISortedMetadataTableBuffer`2.GetMembers">
            <summary>
            Gets all the members that were added to the buffer.
            </summary>
            <returns>The added members.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.ISortedMetadataTableBuffer`2.GetNewToken(`0)">
            <summary>
            Gets the new metadata token that was assigned to the member. 
            </summary>
            <param name="member">The member.</param>
            <returns>The new metadata token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.ISortedMetadataTableBuffer`2.Sort">
            <summary>
            Sorts the metadata table buffer, and determines all new metadata tokens of the added members.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2">
            <summary>
            Represents a metadata stream buffer that sorts all added rows by one or two primary columns.
            </summary>
            <typeparam name="TKey">The type of members that are assigned new metadata rows.</typeparam>
            <typeparam name="TRow">The type of rows to store.</typeparam>
        </member>
        <member name="F:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2._entries">
            <summary>
            The entries that this table will contain.
            - Key: The original key to be able to assign metadata tokens easily after sorting.
            - Row: The metadata row that was constructed for this key.
            - InputIndex: An index to ensure a stable sort.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable{`1},System.Int32)">
            <summary>
            Creates a new metadata stream buffer that is sorted by a single primary column.
            </summary>
            <param name="table">The underlying table to flush to.</param>
            <param name="primaryColumn">The index of the primary column to use as a sorting key.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable{`1},System.Int32,System.Int32)">
            <summary>
            Creates a new metadata stream buffer that is sorted by a primary and a secondary column.
            </summary>
            <param name="table">The underlying table to flush to.</param>
            <param name="primaryColumn">The index of the primary column to use as a sorting key.</param>
            <param name="secondaryColumn">The index of the secondary column to use as a sorting key.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.Count">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.Add(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.GetMembers">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.Sort">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.GetNewToken(`0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.FlushToTable">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.SortedMetadataTableBuffer`2.Clear">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer">
            <summary>
            Provides a mutable buffer for building up a tables stream in a .NET portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.#ctor">
            <summary>
            Creates a new mutable tables stream buffer.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.IsEncMetadata">
            <summary>
            Gets a value indicating whether the buffer contains edit-and-continue metadata tables.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.GetTable``1(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Gets a table buffer by its table index.
            </summary>
            <param name="table">The index of the table to get.</param>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
            <returns>The metadata table.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.GetDistinctTable``1(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Gets a table buffer by its table index.
            </summary>
            <param name="table">The index of the table to get.</param>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
            <returns>The metadata table.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.GetSortedTable``2(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Gets a table buffer by its table index.
            </summary>
            <param name="table">The index of the table to get.</param>
            <typeparam name="TKey">The type of members that are assigned new metadata rows.</typeparam>
            <typeparam name="TRow">The type of rows the table stores.</typeparam>
            <returns>The metadata table.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.GetIndexEncoder(AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex)">
            <summary>
            Gets an encoder/decoder for a particular coded index.
            </summary>
            <param name="codedIndex">The coded index.</param>
            <returns>The encoder/decoder object.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.CreateStream">
            <summary>
            Serializes the tables stream buffer to a metadata stream.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.TablesStreamBuffer.AsmResolver#DotNet#Builder#Metadata#IMetadataStreamBuffer#CreateStream">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1">
            <summary>
            Represents a metadata stream buffer that adds every new row at the end of the table, without any further
            processing or reordering of the rows.
            </summary>
            <typeparam name="TRow">The type of rows to store.</typeparam>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataTable{`0})">
            <summary>
            Creates a new unsorted metadata table buffer.
            </summary>
            <param name="table">The underlying table to flush to.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.Item(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.EnsureCapacity(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.GetRowRef(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.Add(`0@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.Insert(System.UInt32,`0@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.FlushToTable">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.Tables.UnsortedMetadataTableBuffer`1.Clear">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer">
            <summary>
            Provides a mutable buffer for building up a user-strings stream in a .NET portable executable.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.#ctor">
            <summary>
            Creates a new user-strings stream buffer with the default user-strings stream name.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.#ctor(System.String)">
            <summary>
            Creates a new user-strings stream buffer.
            </summary>
            <param name="name">The name of the stream.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.ImportStream(AsmResolver.PE.DotNet.Metadata.UserStrings.UserStringsStream)">
            <summary>
            Imports the contents of a user strings stream and indexes all present strings.
            </summary>
            <param name="stream">The stream to import.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.AppendRawData(System.Byte[])">
            <summary>
            Appends raw data to the stream.
            </summary>
            <param name="data">The data to append.</param>
            <returns>The index to the start of the data.</returns>
            <remarks>
            This method does not index the string. Calling <see cref="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.AppendRawData(System.Byte[])"/> or <see cref="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.GetStringIndex(System.String)" />
            on the same data will append the data a second time.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.GetStringIndex(System.String)">
            <summary>
            Gets the index to the provided user-string. If the string is not present in the buffer, it will be appended to
            the end of the stream.
            </summary>
            <param name="value">The user-string to lookup or add.</param>
            <returns>The index of the user-string.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.CreateStream">
            <summary>
            Serializes
            </summary>
            <returns></returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Metadata.UserStrings.UserStringsStreamBuffer.AsmResolver#DotNet#Builder#Metadata#IMetadataStreamBuffer#CreateStream">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Builder.PEImageBuildContext">
            <summary>
            Provides a context in which a PE image construction takes place in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.PEImageBuildContext.#ctor">
            <summary>
            Creates a new empty build context.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.PEImageBuildContext.#ctor(AsmResolver.DiagnosticBag)">
            <summary>
            Creates a new build context.
            </summary>
            <param name="diagnosticBag">The diagnostic bag to use.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.PEImageBuildContext.DiagnosticBag">
            <summary>
            Gets the bag that collects all diagnostic information during the building process. 
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.PEImageBuildResult">
            <summary>
            Describes the result of the construction of a <see cref="T:AsmResolver.PE.IPEImage"/> from a <see cref="T:AsmResolver.DotNet.ModuleDefinition"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.PEImageBuildResult.#ctor(AsmResolver.PE.IPEImage,AsmResolver.DiagnosticBag,AsmResolver.DotNet.Builder.ITokenMapping)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.PEImageBuildResult"/> class.
            </summary>
            <param name="image">The constructed image, or <c>null</c> if the construction failed.</param>
            <param name="diagnosticBag">The diagnostics that were collected during the construction of the image.</param>
            <param name="tokenMapping">An object that maps metadata members to their newly assigned tokens.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.PEImageBuildResult.ConstructedImage">
            <summary>
            Gets the constructed image, or <c>null</c> if the construction failed.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.PEImageBuildResult.HasFailed">
            <summary>
            Gets a value indicating whether the image was constructed successfully or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.PEImageBuildResult.DiagnosticBag">
            <summary>
            Gets the bag containing the diagnostics that were collected during the construction of the image.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.PEImageBuildResult.TokenMapping">
            <summary>
            Gets an object that maps metadata members to their newly assigned tokens.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer">
            <summary>
            Provides a mutable buffer for building up a .NET resources directory, containing all data of all resources
            stored in a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer"/> class.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.Size">
            <summary>
            Gets the size of the buffer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.AppendRawData(System.Byte[])">
            <summary>
            Appends raw data to the stream.
            </summary>
            <param name="data">The data to append.</param>
            <returns>The index to the start of the data.</returns>
            <remarks>
            This method does not index the resource data. Calling <see cref="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.AppendRawData(System.Byte[])"/> or <see cref="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.GetResourceDataOffset(System.Byte[])"/>
            on the same data will append the data a second time.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.GetResourceDataOffset(System.Byte[])">
            <summary>
            Gets the index to the provided resource data. If the blob is not present in the buffer, it will be appended
            to the end of the stream.
            </summary>
            <param name="data">The resource data to lookup or add.</param>
            <returns>The offset of the resource data.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.Resources.DotNetResourcesDirectoryBuffer.CreateDirectory">
            <summary>
            Serialises the .NET resources directory buffer to a data directory.
            </summary>
            <returns>The metadata stream.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.TokenMapping">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.DotNet.Builder.ITokenMapping"/> interface.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.TokenMapping.Item(AsmResolver.DotNet.IMetadataMember)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.TokenMapping.TryGetNewToken(AsmResolver.DotNet.IMetadataMember,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Builder.TokenMapping.Register(AsmResolver.DotNet.IMetadataMember,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Maps a single member to a new metadata token.
            </summary>
            <param name="member">The member to assign a token to.</param>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.TokenMapping.GetTypeByToken(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Gets the type assigned to the provided metadata token.
            </summary>
            <param name="newToken">The new token.</param>
            <returns>The type, or <c>null</c> if no type is assigned to the provided token.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.TokenMapping.GetMethodByToken(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Gets the method assigned to the provided metadata token.
            </summary>
            <param name="newToken">The new token.</param>
            <returns>The type, or <c>null</c> if no method is assigned to the provided token.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Builder.VTableFixups.VTableFixupsBuffer">
            <summary>
            Provides a buffer for a VTable Fixups directory, which allows for registering method tokens to
            unmanaged exports in the PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.VTableFixups.VTableFixupsBuffer.#ctor(AsmResolver.PE.Platforms.Platform,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider)">
            <summary>
            Creates a new buffer.
            </summary>
            <param name="targetPlatform">The platform to target.</param>
            <param name="symbolsProvider">The symbols provider that is responsible for registering unmanaged exports.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Builder.VTableFixups.VTableFixupsBuffer.Directory">
            <summary>
            The constructed VTable Fixups directory.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Builder.VTableFixups.VTableFixupsBuffer.MapTokenToExport(AsmResolver.DotNet.UnmanagedExportInfo,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Assigns a token to an unmanaged export.
            </summary>
            <param name="exportInfo">The export to map.</param>
            <param name="token">The token to assign to the export.</param>
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.BundleFile">
            <summary>
            Represents a single file in a .NET bundle manifest.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.#ctor(System.String)">
            <summary>
            Creates a new empty bundle file.
            </summary>
            <param name="relativePath">The path of the file, relative to the root of the bundle.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.#ctor(System.String,AsmResolver.DotNet.Bundles.BundleFileType,System.Byte[])">
            <summary>
            Creates a new bundle file.
            </summary>
            <param name="relativePath">The path of the file, relative to the root of the bundle.</param>
            <param name="type">The type of the file.</param>
            <param name="contents">The contents of the file.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.#ctor(System.String,AsmResolver.DotNet.Bundles.BundleFileType,AsmResolver.ISegment)">
            <summary>
            Creates a new empty bundle file.
            </summary>
            <param name="relativePath">The path of the file, relative to the root of the bundle.</param>
            <param name="type">The type of the file.</param>
            <param name="contents">The contents of the file.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.ParentManifest">
            <summary>
            Gets the parent manifest this file was added to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#Bundles#BundleManifest}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.RelativePath">
            <summary>
            Gets or sets the path to the file, relative to the root directory of the bundle.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.Type">
            <summary>
            Gets or sets the type of the file.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.IsCompressed">
            <summary>
            Gets or sets a value indicating whether the data stored in <see cref="P:AsmResolver.DotNet.Bundles.BundleFile.Contents"/> is compressed or not.
            </summary>
            <remarks>
            The default implementation of the application host by Microsoft only supports compressing files if it is
            a fully self-contained binary and the file is not the <c>.deps.json</c> nor the <c>.runtmeconfig.json</c>
            file. This property does not do validation on any of these conditions. As such, if the file is supposed to be
            compressed with any of these conditions not met, a custom application host template needs to be provided
            upon serializing the bundle for it to be runnable.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.Contents">
            <summary>
            Gets or sets the raw contents of the file.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleFile.CanRead">
            <summary>
            Gets a value whether the contents of the file can be read using a <see cref="T:AsmResolver.IO.BinaryStreamReader"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.GetContents">
            <summary>
            Obtains the raw contents of the file.
            </summary>
            <returns>The contents.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.Bundles.BundleFile.Contents"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.TryGetReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Attempts to create a <see cref="T:AsmResolver.IO.BinaryStreamReader"/> that points to the start of the raw contents of the file.
            </summary>
            <param name="reader">The reader.</param>
            <returns><c>true</c> if the reader was constructed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.GetData">
            <summary>
            Reads (and decompresses if necessary) the contents of the file.
            </summary>
            <returns>The contents.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.GetData(System.Boolean)">
            <summary>
            Reads the contents of the file.
            </summary>
            <param name="decompressIfRequired"><c>true</c> if the contents should be decompressed or not when necessary.</param>
            <returns>The contents.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.Compress">
            <summary>
            Marks the file as compressed, compresses the file contents, and replaces the value of <see cref="P:AsmResolver.DotNet.Bundles.BundleFile.Contents"/>
            with the result.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when the file was already compressed.</exception>
            <remarks>
            The default implementation of the application host by Microsoft only supports compressing files if it is
            a fully self-contained binary and the file is not the <c>.deps.json</c> nor the <c>.runtmeconfig.json</c>
            file. This method does not do validation on any of these conditions. As such, if the file is supposed to be
            compressed with any of these conditions not met, a custom application host template needs to be provided
            upon serializing the bundle for it to be runnable.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.Decompress">
            <summary>
            Marks the file as uncompressed, decompresses the file contents, and replaces the value of
            <see cref="P:AsmResolver.DotNet.Bundles.BundleFile.Contents"/> with the result.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when the file was not compressed.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleFile.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.BundleFileType">
            <summary>
            Provides members defining all possible file types that can be stored in a bundled .NET application.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.Unknown">
            <summary>
            Indicates the file type is unknown.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.Assembly">
            <summary>
            Indicates the file is a .NET assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.NativeBinary">
            <summary>
            Indicates the file is a native binary.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.DepsJson">
            <summary>
            Indicates the file is the deps.json file associated to a .NET assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.RuntimeConfigJson">
            <summary>
            Indicates the file is the runtimeconfig.json file associated to a .NET assembly.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleFileType.Symbols">
            <summary>
            Indicates the file contains symbols.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.BundleManifest">
            <summary>
            Represents a set of bundled files embedded in a .NET application host or single-file host.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.#ctor">
            <summary>
            Initializes an empty bundle manifest.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.#ctor(System.UInt32)">
            <summary>
            Creates a new bundle manifest.
            </summary>
            <param name="majorVersionNumber">The file format version.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.#ctor(System.UInt32,System.String)">
            <summary>
            Creates a new bundle manifest with a specific bundle identifier.
            </summary>
            <param name="majorVersionNumber">The file format version.</param>
            <param name="bundleId">The unique bundle manifest identifier.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleManifest.MajorVersion">
            <summary>
            Gets or sets the major file format version of the bundle.
            </summary>
            <remarks>
            Version numbers recognized by the CLR are:
            <list type="bullet">
                <item>1 for .NET Core 3.1</item>
                <item>2 for .NET 5.0</item>
                <item>6 for .NET 6.0</item>
            </list>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleManifest.MinorVersion">
            <summary>
            Gets or sets the minor file format version of the bundle.
            </summary>
            <remarks>
            This value is ignored by the CLR and should be set to 0.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleManifest.BundleID">
            <summary>
            Gets or sets the unique identifier for the bundle manifest.
            </summary>
            <remarks>
            When this property is set to <c>null</c>, the bundle identifier will be generated upon writing the manifest
            based on the contents of the manifest.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleManifest.Flags">
            <summary>
            Gets or sets flags associated to the bundle.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundleManifest.Files">
            <summary>
            Gets a collection of files stored in the bundle.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromFile(System.String)">
            <summary>
            Attempts to automatically locate and parse the bundle header in the provided file.
            </summary>
            <param name="filePath">The path to the file to read.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromBytes(System.Byte[])">
            <summary>
            Attempts to automatically locate and parse the bundle header in the provided file.
            </summary>
            <param name="data">The raw contents of the file to read.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromBytes(System.Byte[],System.UInt64)">
            <summary>
            Parses the bundle header in the provided file at the provided address.
            </summary>
            <param name="data">The raw contents of the file to read.</param>
            <param name="offset">The address within the file to start reading the bundle at.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromDataSource(AsmResolver.IO.IDataSource)">
            <summary>
            Attempts to automatically locate and parse the bundle header in the provided file.
            </summary>
            <param name="source">The raw contents of the file to read.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromDataSource(AsmResolver.IO.IDataSource,System.UInt64)">
            <summary>
            Parses the bundle header in the provided file at the provided address.
            </summary>
            <param name="source">The raw contents of the file to read.</param>
            <param name="offset">The address within the file to start reading the bundle at.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Parses the bundle header from the provided input stream.
            </summary>
            <param name="reader">The input stream pointing to the start of the bundle to read.</param>
            <returns>The read manifest.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.FindBundleManifestAddress(AsmResolver.IO.IDataSource)">
            <summary>
            Attempts to find the start of the bundle header in the provided file.
            </summary>
            <param name="source">The file to locate the bundle header in.</param>
            <returns>The offset, or -1 if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.IsBundledAssembly(AsmResolver.IO.IDataSource)">
            <summary>
            Gets a value indicating whether the provided data source contains a conventional bundled assembly signature.
            </summary>
            <param name="source">The file to locate the bundle header in.</param>
            <returns><c>true</c> if a bundle signature was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.GetFiles">
            <summary>
            Obtains the list of files stored in the bundle.
            </summary>
            <returns>The files</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.Bundles.BundleManifest.Files"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.GenerateDeterministicBundleID">
            <summary>
            Generates a bundle identifier based on the SHA-256 hashes of all files in the manifest.
            </summary>
            <returns>The generated bundle identifier.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.WriteUsingTemplate(System.String,AsmResolver.DotNet.Bundles.BundlerParameters@)">
            <summary>
            Constructs a new application host file based on the bundle manifest.
            </summary>
            <param name="outputPath">The path of the file to write to.</param>
            <param name="parameters">The parameters to use for bundling all files into a single executable.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.WriteUsingTemplate(System.IO.Stream,AsmResolver.DotNet.Bundles.BundlerParameters@)">
            <summary>
            Constructs a new application host file based on the bundle manifest.
            </summary>
            <param name="outputStream">The output stream to write to.</param>
            <param name="parameters">The parameters to use for bundling all files into a single executable.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.WriteUsingTemplate(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Bundles.BundlerParameters)">
            <summary>
            Constructs a new application host file based on the bundle manifest.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="parameters">The parameters to use for bundling all files into a single executable.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundleManifest.WriteManifest(AsmResolver.IO.IBinaryStreamWriter,System.Boolean)">
            <summary>
            Writes the manifest to an output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="isArm64Linux"><c>true</c> if the application host is a Linux ELF binary targeting ARM64.</param>
            <returns>The address of the bundle header.</returns>
            <remarks>
            This does not necessarily produce a working executable file, it only writes the contents of the entire manifest,
            without a host application that invokes the manifest. If you want to produce a runnable executable, use one
            of the <c>WriteUsingTemplate</c> methods instead.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.BundleManifestFlags">
            <summary>
            Provides members defining all flags that can be assigned to a bundle manifest.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleManifestFlags.None">
            <summary>
            Indicates no flags were assigned.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Bundles.BundleManifestFlags.NetCoreApp3CompatibilityMode">
            <summary>
            Indicates the bundle was compiled in .NET Core 3 compatibility mode.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.BundlerParameters">
            <summary>
            Defines parameters for the .NET application bundler.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.String,System.String)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplatePath">
            The path to the application host file template to use. By default this is stored in
            <c>&lt;DOTNET-INSTALLATION-PATH&gt;/sdk/&lt;version&gt;/AppHostTemplate</c> or
            <c>&lt;DOTNET-INSTALLATION-PATH&gt;/packs/Microsoft.NETCore.App.Host.&lt;runtime-identifier&gt;/&lt;version&gt;/runtimes/&lt;runtime-identifier&gt;/native</c>.
            </param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplate">The application host template file to use.</param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplatePath">
            The path to the application host file template to use. By default this is stored in
            <c>&lt;DOTNET-INSTALLATION-PATH&gt;/sdk/&lt;version&gt;/AppHostTemplate</c> or
            <c>&lt;DOTNET-INSTALLATION-PATH&gt;/packs/Microsoft.NETCore.App.Host.&lt;runtime-identifier&gt;/&lt;version&gt;/runtimes/&lt;runtime-identifier&gt;/native</c>.
            </param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
            <param name="imagePathToCopyHeadersFrom">
            The path to copy the PE headers and Win32 resources from. This is typically the original native executable
            file that hosts the CLR, or the original AppHost file the bundle was extracted from.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.Byte[],System.String,System.Byte[])">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplate">The application host template file to use.</param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
            <param name="imageToCopyHeadersFrom">
            The binary to copy the PE headers and Win32 resources from. This is typically the original native executable
            file that hosts the CLR, or the original AppHost file the bundle was extracted from.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.Byte[],System.String,AsmResolver.IO.IDataSource)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplate">The application host template file to use.</param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
            <param name="imageToCopyHeadersFrom">
            The binary to copy the PE headers and Win32 resources from. This is typically the original native executable
            file that hosts the CLR, or the original AppHost file the bundle was extracted from.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.Byte[],System.String,AsmResolver.PE.IPEImage)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplate">The application host template file to use.</param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
            <param name="imageToCopyHeadersFrom">
            The PE image to copy the headers and Win32 resources from. This is typically the original native executable
            file that hosts the CLR, or the original AppHost file the bundle was extracted from.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.BundlerParameters.#ctor(System.Byte[],System.String,AsmResolver.PE.File.Headers.SubSystem,AsmResolver.PE.Win32Resources.IResourceDirectory)">
            <summary>
            Initializes new bundler parameters.
            </summary>
            <param name="appHostTemplate">The application host template file to use.</param>
            <param name="appBinaryPath">
            The name of the file in the bundle that contains the entry point of the application.
            </param>
            <param name="subSystem">The subsystem to use in the final Windows PE binary.</param>
            <param name="resources">The resources to copy into the final Windows PE binary.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundlerParameters.ApplicationHostTemplate">
            <summary>
            Gets or sets the template application hosting binary.
            </summary>
            <remarks>
            By default, the official implementations of the application host can be found in one of the following
            installation directories:
            <list type="bullet">
                <item><c>&lt;DOTNET-INSTALLATION-PATH&gt;/sdk/&lt;version&gt;/AppHostTemplate</c></item>
                <item><c>&lt;DOTNET-INSTALLATION-PATH&gt;/packs/Microsoft.NETCore.App.Host.&lt;runtime-identifier&gt;/&lt;version&gt;/runtimes/&lt;runtime-identifier&gt;/native</c></item>
            </list>
            It is therefore recommended to use the contents of one of these templates to ensure compatibility.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundlerParameters.ApplicationBinaryPath">
            <summary>
            Gets or sets the path to the binary within the bundle that contains the application's entry point.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundlerParameters.IsArm64Linux">
            <summary>
            Gets a value indicating whether the bundled executable targets the Linux operating system on ARM64.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundlerParameters.Resources">
            <summary>
            Gets or sets the Win32 resources directory to copy into the final PE executable.
            </summary>
            <remarks>
            This field is ignored if <see cref="P:AsmResolver.DotNet.Bundles.BundlerParameters.IsArm64Linux"/> is set to <c>true</c>, or <see cref="P:AsmResolver.DotNet.Bundles.BundlerParameters.ApplicationHostTemplate"/>
            does not contain a proper PE image.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Bundles.BundlerParameters.SubSystem">
            <summary>
            Gets or sets the Windows subsystem the final PE executable should target.
            </summary>
            <remarks>
            This field is ignored if <see cref="P:AsmResolver.DotNet.Bundles.BundlerParameters.IsArm64Linux"/> is set to <c>true</c>, or <see cref="P:AsmResolver.DotNet.Bundles.BundlerParameters.ApplicationHostTemplate"/>
            does not contain a proper PE image.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.SerializedBundleFile">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.Bundles.BundleFile"/>  that is read from an existing file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.SerializedBundleFile.#ctor(AsmResolver.IO.BinaryStreamReader@,System.UInt32)">
            <summary>
            Reads a bundle file entry from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="bundleVersionFormat">The file format version of the bundle.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.SerializedBundleFile.GetContents">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Bundles.SerializedBundleManifest">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.Bundles.BundleManifest"/>  that is read from an existing file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.SerializedBundleManifest.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a bundle manifest from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Bundles.SerializedBundleManifest.GetFiles">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.ClassLayout">
            <summary>
            Describes the explicit layout of a type, including its total and packing size.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ClassLayout.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the class layout with a metadata token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:AsmResolver.DotNet.ClassLayout.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Creates a new explicit layout for a type.
            </summary>
            <param name="packingSize">The alignment in bytes of each field in the type.
            This value should be a power of two between 0 and 128.</param>
            <param name="classSize">The size in bytes of the type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ClassLayout.PackingSize">
            <summary>
            Gets the alignment in bytes of each field in the type.
            </summary>
            <remarks>
            This value should be a power of two between 0 and 128.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ClassLayout.ClassSize">
            <summary>
            Gets the size in bytes of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ClassLayout.Parent">
            <summary>
            Gets the type that this layout is assigned to.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ClassLayout.GetParent">
            <summary>
            Obtains the type this layout is assigned to.
            </summary>
            <returns>The parent type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ClassLayout.Parent"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ClassLayout.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.CallbackClonerListener">
            <summary>
            This implementation that calls the <see cref="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedMember(AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition)"/> to a callback action.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CallbackClonerListener.#ctor(System.Action{AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.CallbackClonerListener"/> class.
            </summary>
            <param name="callback">The Callback used.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.CallbackClonerListener.EmptyInstance">
            <summary>
            Gets a singleton instance of the <see cref="T:AsmResolver.DotNet.Cloning.CallbackClonerListener"/> class that performs no operation
            on any of the cloning procedure notifications.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CallbackClonerListener.OnClonedMember(AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter">
            <summary>
            Provides an extension to the normal <see cref="T:AsmResolver.DotNet.ReferenceImporter"/> class, that takes cloned members into account.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.#ctor(AsmResolver.DotNet.Cloning.MemberCloneContext)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter"/> class.
            </summary>
            <param name="context">The metadata cloning workspace.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.Context">
            <summary>
            The working space for this member cloning procedure.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.ImportType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.ImportField(AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.ImportMethod(AsmResolver.DotNet.IMethodDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter.ImportType(AsmResolver.DotNet.TypeReference)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.FieldRvaCloner">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.DotNet.Cloning.IFieldRvaCloner"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.FieldRvaCloner.CloneFieldRvaData(AsmResolver.DotNet.FieldDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.IFieldRvaCloner">
            <summary>
            Provides members for cloning initialization data (Field RVA data) of a field.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IFieldRvaCloner.CloneFieldRvaData(AsmResolver.DotNet.FieldDefinition)">
            <summary>
            Clones the contents of the <see cref="P:AsmResolver.DotNet.FieldDefinition.FieldRva"/> property of the provided field.
            </summary>
            <param name="field">The field.</param>
            <returns>The cloned segment.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.IMemberClonerListener">
            <summary>
            <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> Callback listener that receives calls after cloning process.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedMember(AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition)">
            <summary>
            This function is called for every member that got cloned.
            </summary>
            <param name="original">The original member.</param>
            <param name="cloned">The cloned member.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedType(AsmResolver.DotNet.TypeDefinition,AsmResolver.DotNet.TypeDefinition)">
            <summary>
            This function is called for every type that got cloned.
            </summary>
            <param name="original">The original type.</param>
            <param name="cloned">The cloned type.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedMethod(AsmResolver.DotNet.MethodDefinition,AsmResolver.DotNet.MethodDefinition)">
            <summary>
            This function is called for every method that got cloned.
            </summary>
            <param name="original">The original method.</param>
            <param name="cloned">The cloned method.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedField(AsmResolver.DotNet.FieldDefinition,AsmResolver.DotNet.FieldDefinition)">
            <summary>
            This function is called for every field that got cloned.
            </summary>
            <param name="original">The original field.</param>
            <param name="cloned">The cloned field.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedProperty(AsmResolver.DotNet.PropertyDefinition,AsmResolver.DotNet.PropertyDefinition)">
            <summary>
            This function is called for every property that got cloned.
            </summary>
            <param name="original">The original property.</param>
            <param name="cloned">The cloned property.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.IMemberClonerListener.OnClonedEvent(AsmResolver.DotNet.EventDefinition,AsmResolver.DotNet.EventDefinition)">
            <summary>
            This function is called for every event that got cloned.
            </summary>
            <param name="original">The original event.</param>
            <param name="cloned">The cloned event.</param>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.InjectTypeClonerListener">
            <summary>
            Implements a <see cref="T:AsmResolver.DotNet.Cloning.IMemberClonerListener"/> that injects all non-nested types into the target module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.InjectTypeClonerListener.#ctor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.InjectTypeClonerListener"/> type.
            </summary>
            <param name="targetModule">The target module to inject into.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.InjectTypeClonerListener.TargetModule">
            <summary>
            Gets the target module to inject the types in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.InjectTypeClonerListener.OnClonedType(AsmResolver.DotNet.TypeDefinition,AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.MemberCloneContext">
            <summary>
            Provides a working space for a member cloning procedure.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloneContext.#ctor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloneContext"/> class.
            </summary>
            <param name="module">The target module to copy the cloned members into.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloneContext.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Func{AsmResolver.DotNet.Cloning.MemberCloneContext,AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloneContext"/> class.
            </summary>
            <param name="module">The target module to copy the cloned members into.</param>
            <param name="importerFactory">The factory for creating the reference importer</param>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneContext.Module">
            <summary>
            Gets the target module to copy the cloned members into.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneContext.Importer">
            <summary>
            Gets the object responsible for importing references into the target module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneContext.ClonedMembers">
            <summary>
            Gets a mapping of original members to cloned members.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.MemberCloner">
            <summary>
            Provides a mechanism for deep-copying metadata members from external .NET modules into another module.
            </summary>
            <remarks>
            When multiple members are cloned in one go, the member cloner will fix up any references between the cloned members.
            For example, if a type or member is referenced in a method body, and this type or member is also included in the
            cloning process, the reference will be updated to the cloned member instead of imported.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.#ctor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> class.
            </summary>
            <param name="targetModule">The target module to copy the members into.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Func{AsmResolver.DotNet.Cloning.MemberCloneContext,AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> class.
            </summary>
            <param name="targetModule">The target module to copy the members into.</param>
            <param name="importerFactory">The factory for creating the reference importer</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Action{AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> class.
            </summary>
            <param name="targetModule">The target module to copy the members into.</param>
            <param name="callback">The callback used in the cloner listener.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.#ctor(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Cloning.IMemberClonerListener)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> class.
            </summary>
            <param name="targetModule">The target module to copy the members into.</param>
            <param name="listener">The callback listener used in the cloner.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Func{AsmResolver.DotNet.Cloning.MemberCloneContext,AsmResolver.DotNet.Cloning.CloneContextAwareReferenceImporter},AsmResolver.DotNet.Cloning.IMemberClonerListener)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/> class.
            </summary>
            <param name="targetModule">The target module to copy the members into.</param>
            <param name="importerFactory">The factory for creating the reference importer</param>
            <param name="clonerListener">The listener used in the cloner.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloner.FieldRvaCloner">
            <summary>
            Gets or sets the object responsible for cloning a data segment of a field RVA (initialization data) entry.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.IMemberDefinition)">
            <summary>
            Adds the provided member definition to the list of members to clone.
            </summary>
            <param name="member">The member to clone.</param>
            <returns>The metadata cloner that this member was added to.</returns>
            <remarks>
            If <paramref name="member"/> refers to a <see cref="T:AsmResolver.DotNet.TypeDefinition"/>, all nested types will be included
            as well.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.IMemberDefinition,System.Boolean)">
            <summary>
            Adds the provided member definition to the list of members to clone.
            </summary>
            <param name="member">The member to clone.</param>
            <param name="recursive">
            If <paramref name="member"/> refers to a <see cref="T:AsmResolver.DotNet.TypeDefinition"/>, indicates
            whether all nested types should be included as well.</param>
            <returns>The metadata cloner that this member was added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.IMemberDefinition[])">
            <summary>
            Adds each member in the provided collection of member.
            </summary>
            <param name="members">The members to include.</param>
            <returns>The metadata cloner that the members were added to.</returns>
            <remarks>If a member in the list is a type, all their members and nested types will be included as well.</remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.IMemberDefinition})">
            <summary>
            Adds each member in the provided collection of member.
            </summary>
            <param name="members">The members to include.</param>
            <returns>The metadata cloner that the members were added to.</returns>
            <remarks>If a member in the list is a type, all their members and nested types will be included as well.</remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.TypeDefinition)">
            <summary>
            Adds the provided type, and all its members and nested types, to the list of members to clone.
            </summary>
            <param name="type">The type to include.</param>
            <returns>The metadata cloner that this type was added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.TypeDefinition,System.Boolean)">
            <summary>
            Adds the provided type, and all its members, to the list of members to clone.
            </summary>
            <param name="type">The type to include.</param>
            <param name="recursive">Indicates whether all nested types should be included as well.</param>
            <returns>The metadata cloner that this type was added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.TypeDefinition[])">
            <summary>
            Adds each type in the provided collection of types, and all their members and nested types, to the list
            of members to clone.
            </summary>
            <param name="types">The types to include.</param>
            <returns>The metadata cloner that the types were added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.TypeDefinition})">
            <summary>
            Adds each type in the provided collection of types, and all their members and nested types, to the list
            of members to clone.
            </summary>
            <param name="types">The types to include.</param>
            <returns>The metadata cloner that the types were added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Adds a single method to the list of members to clone.
            </summary>
            <param name="method">The method to include.</param>
            <returns>The metadata cloner that the method is added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.FieldDefinition)">
            <summary>
            Adds a single field to the list of members to clone.
            </summary>
            <param name="field">The field to include.</param>
            <returns>The metadata cloner that the field is added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.PropertyDefinition)">
            <summary>
            Adds a single property to the list of members to clone.
            </summary>
            <param name="property">The property to include.</param>
            <returns>The metadata cloner that the property is added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Include(AsmResolver.DotNet.EventDefinition)">
            <summary>
            Adds a single event to the list of members to clone.
            </summary>
            <param name="event">The event to include.</param>
            <returns>The metadata cloner that the event is added to.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloner.Clone">
            <summary>
            Clones all included members.
            </summary>
            <returns>An object representing the result of the cloning process.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.MemberCloneResult">
            <summary>
            Provides information about the result of a metadata cloning procedure.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloneResult.#ctor(System.Collections.Generic.IDictionary{AsmResolver.DotNet.IMemberDescriptor,AsmResolver.DotNet.IMemberDescriptor})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloneResult"/> class.
            </summary>
            <param name="clonedMembers">The cloned members.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="clonedMembers"/> is null.</exception>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneResult.ClonedMembers">
            <summary>
            Gets a collection of all cloned members.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneResult.OriginalMembers">
            <summary>
            Gets a collection of all original members.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Cloning.MemberCloneResult.ClonedTopLevelTypes">
            <summary>
            Gets a collection of all cloned members of type <see cref="T:AsmResolver.DotNet.TypeDefinition"/> that are not nested.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloneResult.ContainsClonedMember(AsmResolver.DotNet.IMemberDescriptor)">
            <summary>
            Verifies if the <paramref name="originalMember"/> is cloned by the <see cref="T:AsmResolver.DotNet.Cloning.MemberCloner"/>.
            </summary>
            <param name="originalMember">The original <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/></param>
            <returns><c>true</c> if the provided member was cloned, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberCloneResult.GetClonedMember``1(``0)">
            <summary>
            Gets the cloned <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/> by its original <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/>.
            </summary>
            <param name="originalMember">Original <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="originalMember"/> is not a member of <see cref="P:AsmResolver.DotNet.Cloning.MemberCloneResult.OriginalMembers"/></exception>
            <returns>Cloned <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/></returns>
        </member>
        <member name="T:AsmResolver.DotNet.Cloning.MemberClonerListener">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedMember(AsmResolver.DotNet.IMemberDefinition,AsmResolver.DotNet.IMemberDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedEvent(AsmResolver.DotNet.EventDefinition,AsmResolver.DotNet.EventDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedField(AsmResolver.DotNet.FieldDefinition,AsmResolver.DotNet.FieldDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedMethod(AsmResolver.DotNet.MethodDefinition,AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedProperty(AsmResolver.DotNet.PropertyDefinition,AsmResolver.DotNet.PropertyDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:AsmResolver.DotNet.Cloning.MemberClonerListener.OnClonedType(AsmResolver.DotNet.TypeDefinition,AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandler">
            <summary>
            Represents a region of code in a CIL method body that is protected by a (filtered) exception handler, finally or
            faulting clause.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.TinyExceptionHandlerSize">
            <summary>
            The size in bytes of an exception handler using the tiny format.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.FatExceptionHandlerSize">
            <summary>
            The size in bytes of an exception handler using the fat format.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.FromReader(AsmResolver.DotNet.Code.Cil.CilMethodBody,AsmResolver.IO.BinaryStreamReader@,System.Boolean)">
            <summary>
            Reads a single exception handler from the provided input stream.
            </summary>
            <param name="body">The method body containing the exception handler.</param>
            <param name="reader">The input stream.</param>
            <param name="isFat"><c>true</c> if the fat format should be used, <c>false</c> otherwise.</param>
            <returns>The exception handler.</returns>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.HandlerType">
            <summary>
            Gets or sets the type of the protected region.
            </summary>
            <remarks>
            This property determines whether the <see cref="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.FilterStart"/> and/or <see cref="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.ExceptionType"/> properties
            have any meaning and are persisted or not.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.TryStart">
            <summary>
            Gets or sets the instruction that marks the start of the the protected region.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.TryEnd">
            <summary>
            Gets or sets the instruction that marks the end of the protected region.
            </summary>
            <remarks>
            This instruction marker is exclusive; the referenced instruction does not belong to the protected
            region anymore.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.HandlerStart">
            <summary>
            Gets or sets the instruction that marks the start of the handler region.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.HandlerEnd">
            <summary>
            Gets or sets the instruction that marks the end of the handler region.
            </summary>
            <remarks>
            This instruction marker is exclusive; the referenced instruction does not belong to the handler
            region anymore.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.FilterStart">
            <summary>
            Gets or sets the instruction that marks the start of the filter region.
            </summary>
            <remarks>
            This property only has meaning if the <see cref="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.HandlerType"/> property is set to
            <see cref="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Filter"/>.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.ExceptionType">
            <summary>
            Gets or sets the type of exceptions that this exception handler catches.
            </summary>
            <remarks>
            This property only has meaning if the <see cref="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.HandlerType"/> property is set to
            <see cref="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Exception"/>.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.IsFat">
            <summary>
            Gets a value indicating whether the exception handler requires the fat format to be used to encode the
            boundaries of the protected region.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilExceptionHandler.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType">
            <summary>
            Provides members that define all possible types of protected regions in a CIL method body. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Exception">
            <summary>
            Indicates the protected region defines a standard exception handler block that catches any exception from
            a specific exception type. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Filter">
            <summary>
            Indicates the protected region defines an exception handler that catches any exception that passes a filter.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Finally">
            <summary>
            Indicates the protected region defines a block of code that is always finalized by a finally clause.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilExceptionHandlerType.Fault">
            <summary>
            Indicates the protected region defines a block of code that is finalized by a fault clause if there
            occurred an exception.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilInstructionCollection">
            <summary>
            Represents a collection of CIL instructions found in a method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Verifies and adds an instruction to the end of the collection.
            </summary>
            <param name="code">The code.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">Occurs when the provided operation requires an operand.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.ICilLabel)">
            <summary>
            Verifies and adds a branch instruction to the end of the collection.
            </summary>
            <param name="code">The branch opcode.</param>
            <param name="label">The label referenced by the branch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="label"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.ICilLabel[])">
            <summary>
            Verifies and adds a switch instruction to the end of the collection.
            </summary>
            <param name="code">The switch opcode.</param>
            <param name="labels">The labels referenced by the switch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="labels"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Collections.Generic.IEnumerable{AsmResolver.PE.DotNet.Cil.ICilLabel})">
            <summary>
            Verifies and adds a switch instruction to the end of the collection.
            </summary>
            <param name="code">The switch opcode.</param>
            <param name="labels">The labels referenced by the switch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="labels"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Int32)">
            <summary>
            Verifies and adds a instruction to the end of the collection that pushes an integer constant.
            </summary>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing an integer constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Int64)">
            <summary>
            Verifies and adds a instruction to the end of the collection that pushes a 64-bit integer constant.
            </summary>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a 64-bit integer constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Single)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a float32 constant.
            </summary>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a float32 constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.Double)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a float64 constant.
            </summary>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a float64 constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,System.String)">
            <summary>
            Verifies and adds a instruction to the end of the collection that pushes a string constant.
            </summary>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a string constant.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="constant"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a local variable.
            </summary>
            <param name="code">The opcode.</param>
            <param name="variable">The referenced variable.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a variable.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="variable"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a parameter.
            </summary>
            <param name="code">The opcode.</param>
            <param name="parameter">The referenced parameter.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a parameter.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="parameter"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Verifies and adds an instruction to the end of the collection that references a field.
            </summary>
            <param name="code">The field opcode.</param>
            <param name="field">The field referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a field opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="field"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Verifies and adds an instruction to the end of the collection that references a method.
            </summary>
            <param name="code">The method opcode.</param>
            <param name="method">The method referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a method opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.MemberReference)">
            <summary>
            Verifies and adds an instruction to the end of the collection that references a member.
            </summary>
            <param name="code">The member opcode.</param>
            <param name="member">The member referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation does not match with the provided member reference.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="member"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Verifies and adds an instruction to the end of the collection that references a type.
            </summary>
            <param name="code">The type opcode.</param>
            <param name="type">The type referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a type opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IMetadataMember)">
            <summary>
            Verifies and adds an instruction to the end of the collection that references a metadata member.
            </summary>
            <param name="code">The method opcode.</param>
            <param name="member">The member referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a member opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="member"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.StandAloneSignature)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a standalone signature.
            </summary>
            <param name="code">The opcode.</param>
            <param name="signature">The referenced signature.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a standalone signature.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Verifies and adds a instruction to the end of the collection that references a metadata member by its token.
            </summary>
            <param name="code">The opcode.</param>
            <param name="token">The token of the referenced member.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a metadata member.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the provided token is not valid in a CIL stream.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.#ctor(AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Creates a new collection of CIL instructions stored in a method body.
            </summary>
            <param name="body">The method body that owns the collection.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Owner">
            <summary>
            Gets the method body that owns the collection of CIL instructions.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Size">
            <summary>
            Gets the size in bytes of the collection.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.EndLabel">
            <summary>
            Gets the label indicating the end of the CIL code stream.
            </summary>
            <remarks>
            This label does not point to the beginning of an instruction. The offset of this label is equal
            to the last instruction's offset + its size.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Add(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.AddRange(System.Collections.Generic.IEnumerable{AsmResolver.PE.DotNet.Cil.CilInstruction})">
            <summary>
            Adds a collection of CIL instructions to the end of the list.
            </summary>
            <param name="items">The instructions to add.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{AsmResolver.PE.DotNet.Cil.CilInstruction})">
            <summary>
            Inserts a collection of CIL instructions at the provided index.
            </summary>
            <param name="index">The index to insert the instructions into.</param>
            <param name="items">The instructions to insert.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Contains(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.CopyTo(AsmResolver.PE.DotNet.Cil.CilInstruction[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Remove(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of CIL instructions from the collection.
            </summary>
            <param name="index">The starting index.</param>
            <param name="count">The number of instructions to remove.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.RemoveRange(System.Collections.Generic.IEnumerable{AsmResolver.PE.DotNet.Cil.CilInstruction})">
            <summary>
            Removes a set of CIL instructions from the collection.
            </summary>
            <param name="items">The instructions to remove.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.IndexOf(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.RemoveAt(System.Int32,System.Int32[])">
            <summary>
            Removes a set of CIL instructions based on a list of indices that are relative to a starting index.
            </summary>
            <param name="baseIndex">The base index.</param>
            <param name="relativeIndices">The indices relative to <paramref name="baseIndex"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when any relative index in <paramref name="relativeIndices"/> results in an index that is
            out of bounds of the instruction collection.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.RemoveAt(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a set of CIL instructions based on a list of indices that are relative to a starting index.
            </summary>
            <param name="baseIndex">The base index.</param>
            <param name="relativeIndices">The indices relative to <paramref name="baseIndex"/> to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when any relative index in <paramref name="relativeIndices"/> results in an index that is
            out of bounds of the instruction collection.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates through the instructions sequentially.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.System#Collections#Generic#IEnumerable{AsmResolver#PE#DotNet#Cil#CilInstruction}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.GetLabel(System.Int32)">
            <summary>
            Gets a label at the provided offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The label.</returns>
            <remarks>
            If the provided offset falls outside of the CIL code stream, <see cref="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.EndLabel"/> is returned instead.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.CalculateOffsets">
            <summary>
            Calculates the offsets of each instruction in the list.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.ExpandMacros">
            <summary>
            Simplifies the CIL instructions by transforming macro instructions to their expanded form.
            </summary>
            <remarks>
            This method reverses any optimizations done by <see cref="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.OptimizeMacros"/>.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.OptimizeMacros">
            <summary>
            Optimizes all instructions to use the least amount of bytes required to encode all operations.
            </summary>
            <remarks>
            This method reverses any effects introduced by <see cref="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.ExpandMacros"/>.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator">
            <summary>
            Represents an enumerator that enumerates through a collection of CIL instructions.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.#ctor(AsmResolver.DotNet.Code.Cil.CilInstructionCollection)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator"/> structure.
            </summary>
            <param name="collection">The collection to enumerate.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Enumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.CilEndLabel.Offset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.CilEndLabel.Equals(AsmResolver.PE.DotNet.Cil.ICilLabel)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Verifies and inserts an instruction into the collection.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The code.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">Occurs when the provided operation requires an operand.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.ICilLabel)">
            <summary>
            Verifies and inserts a branch instruction into the collection.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The branch opcode.</param>
            <param name="label">The label referenced by the branch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="label"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Cil.ICilLabel[])">
            <summary>
            Verifies and inserts a switch instruction into the collection.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The switch opcode.</param>
            <param name="labels">The labels referenced by the switch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="labels"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Collections.Generic.IEnumerable{AsmResolver.PE.DotNet.Cil.ICilLabel})">
            <summary>
            Verifies and inserts a switch instruction into the collection.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The switch opcode.</param>
            <param name="labels">The labels referenced by the switch instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a branch opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="labels"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Int32)">
            <summary>
            Verifies and inserts a instruction into the collection that pushes an integer constant.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing an integer constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Int64)">
            <summary>
            Verifies and inserts a instruction into the collection that pushes a 64-bit integer constant.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a 64-bit integer constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Single)">
            <summary>
            Verifies and inserts a instruction into the collection that references a float32 constant.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a float32 constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.Double)">
            <summary>
            Verifies and inserts a instruction into the collection that references a float64 constant.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a float64 constant.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,System.String)">
            <summary>
            Verifies and inserts a instruction into the collection that pushes a string constant.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="constant">The constant to push.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a string constant.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="constant"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <summary>
            Verifies and inserts a instruction into the collection that references a local variable.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="variable">The referenced variable.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a variable.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="variable"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.Collections.Parameter)">
            <summary>
            Verifies and inserts a instruction into the collection that references a parameter.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="parameter">The referenced parameter.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a parameter.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="parameter"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Verifies and inserts an instruction into the collection that references a field.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The field opcode.</param>
            <param name="field">The field referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a field opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="field"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Verifies and inserts an instruction into the collection that references a method.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The method opcode.</param>
            <param name="method">The method referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a method opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.MemberReference)">
            <summary>
            Verifies and inserts an instruction into the collection that references a member.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The member opcode.</param>
            <param name="member">The member referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation does not match with the provided member reference.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="member"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Verifies and inserts an instruction into the collection that references a type.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The type opcode.</param>
            <param name="type">The type referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a type opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="type"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.IMetadataMember)">
            <summary>
            Verifies and inserts an instruction into the collection that references a metadata member.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The method opcode.</param>
            <param name="member">The member referenced by the instruction.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not a member opcode.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="member"/> is null.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.DotNet.StandAloneSignature)">
            <summary>
            Verifies and inserts a instruction into the collection that references a standalone signature.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="signature">The referenced signature.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a standalone signature.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionCollection.Insert(System.Int32,AsmResolver.PE.DotNet.Cil.CilOpCode,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Verifies and inserts a instruction into the collection that references a metadata member by its token.
            </summary>
            <param name="index">The zero-based index at which the instruction should be inserted at.</param>
            <param name="code">The opcode.</param>
            <param name="token">The token of the referenced member.</param>
            <returns>The created instruction.</returns>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            Occurs when the provided operation is not an opcode referencing a metadata member.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the provided token is not valid in a CIL stream.
            </exception>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions">
            <summary>
            Provides extensions to the <see cref="T:AsmResolver.PE.DotNet.Cil.CilInstruction"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions.GetStackPopCount(AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Determines the number of values that are popped from the stack by this instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="parent">The method body that this instruction resides in. When passed on <c>null</c>,
            a method body of a System.Void method is assumed.</param>
            <returns>The number of values popped from the stack.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the instruction's operation code provides an
            invalid stack behaviour.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions.GetStackPopCount(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Boolean)">
            <summary>
            Determines the number of values that are popped from the stack by this instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="isVoid">A value indicating whether the enclosing method is returning System.Void or not.</param>
            <returns>The number of values popped from the stack.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the instruction's operation code provides an
            invalid stack behaviour.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions.GetStackPushCount(AsmResolver.PE.DotNet.Cil.CilInstruction)">
            <summary>
            Determines the number of values that are pushed onto the stack by this instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>The number of values pushed onto the stack.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the instruction's operation code provides an
            invalid stack behaviour.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions.GetLocalVariable(AsmResolver.PE.DotNet.Cil.CilInstruction,System.Collections.Generic.IReadOnlyList{AsmResolver.DotNet.Code.Cil.CilLocalVariable})">
            <summary>
            When this instruction is using a variant of the ldloc or stloc opcodes, gets the local variable that is
            referenced by the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="variables">The local variables defined in the enclosing method body.</param>
            <returns>The variable.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the instruction is not using a variant of the ldloc or stloc opcodes.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilInstructionExtensions.GetParameter(AsmResolver.PE.DotNet.Cil.CilInstruction,AsmResolver.DotNet.Collections.ParameterCollection)">
            <summary>
            When this instruction is using a variant of the ldarg or starg opcodes, gets the parameter that is
            referenced by the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="parameters">The parameters defined in the enclosing method body.</param>
            <returns>The parameter.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the instruction is not using a variant of the ldarg or starg opcodes.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilLocalVariable">
            <summary>
            Represents a local variable defined in a body of a CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariable.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new local variable.
            </summary>
            <param name="variableType">The variable type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilLocalVariable.Index">
            <summary>
            Gets the index of the variable.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilLocalVariable.VariableType">
            <summary>
            Gets or sets the type of values this variable stores.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariable.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilLocalVariableCollection">
            <summary>
            Represents a collection of local variables stored in a CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariableCollection.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariableCollection.InsertItem(System.Int32,AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariableCollection.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilLocalVariableCollection.SetItem(System.Int32,AsmResolver.DotNet.Code.Cil.CilLocalVariable)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilMaxStackCalculator.StackState">
            <summary>
            Provides information about the state of the stack at a particular point of execution in a method.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilMaxStackCalculator.StackState.InstructionIndex">
            <summary>
            The index of the instruction the state is associated to.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilMaxStackCalculator.StackState.StackSize">
            <summary>
            The number of values currently on the stack.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilMethodBody">
            <summary>
            Represents a method body of a method defined in a .NET assembly, implemented using the Common Intermediate Language (CIL).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.#ctor(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Creates a new method body.
            </summary>
            <param name="owner">The method that owns the method body.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.Instructions">
            <summary>
            Gets a collection of instructions to be executed in the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.MaxStack">
            <summary>
            Gets or sets a value indicating the maximum amount of values stored onto the stack.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.InitializeLocals">
            <summary>
            Gets or sets a value indicating whether all local variables should be initialized to zero by the runtime
            upon execution of the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.IsFat">
            <summary>
            Gets a value indicating whether the method body is considered fat. That is, it has at least one of the
            following properties
            <list type="bullet">
               <item><description>The method is larger than 64 bytes.</description></item>
               <item><description>The method defines exception handlers.</description></item>
               <item><description>The method defines local variables.</description></item>
               <item><description>The method needs more than 8 values on the stack.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.LocalVariables">
            <summary>
            Gets a collection of local variables defined in the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.ExceptionHandlers">
            <summary>
            Gets a collection of regions protected by exception handlers, finally or faulting clauses defined in the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.BuildFlags">
            <summary>
            Gets or sets flags that alter the behaviour of the method body serializer for this specific method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.ComputeMaxStackOnBuild">
            <summary>
            Gets or sets a value indicating whether a .NET assembly builder should automatically compute and update the
            <see cref="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.MaxStack"/> property according to the contents of the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.VerifyLabelsOnBuild">
            <summary>
            Gets or sets a value indicating whether a .NET assembly builder should verify branch instructions and
            exception handler labels in this method body for validity.
            </summary>
            <remarks>
            The value of this property will be ignored if <see cref="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.ComputeMaxStackOnBuild"/> is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.FromRawMethodBody(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.DotNet.MethodDefinition,AsmResolver.PE.DotNet.Cil.CilRawMethodBody,AsmResolver.PE.DotNet.Cil.ICilOperandResolver)">
            <summary>
            Creates a CIL method body from a raw CIL method body.
            </summary>
            <param name="context">The reader context.</param>
            <param name="method">The method that owns the method body.</param>
            <param name="rawBody">The raw method body.</param>
            <param name="operandResolver">The object instance to use for resolving operands of an instruction in the
                method body.</param>
            <returns>The method body.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.VerifyLabels">
            <summary>
            Verifies all branch targets and exception handler labels in the method body for validity.
            </summary>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">Occurs when one branch instruction in the method body is invalid.</exception>
            <exception cref="T:System.AggregateException">Occurs when multiple branch instructions in the method body are invalid.</exception>
            <remarks>This method will force the offsets of each instruction to be calculated.</remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.VerifyLabels(System.Boolean)">
            <summary>
            Verifies all branch targets and exception handler labels in the method body for validity.
            </summary>
            <param name="calculateOffsets">Determines whether offsets should be calculated beforehand.</param>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">Occurs when one branch instruction in the method body is invalid.</exception>
            <exception cref="T:System.AggregateException">Occurs when multiple branch instructions in the method body are invalid.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.ComputeMaxStack">
            <summary>
            Computes the maximum values pushed onto the stack by this method body.
            </summary>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.StackImbalanceException">Occurs when the method body will result in an unbalanced stack.</exception>
            <remarks>This method will force the offsets of each instruction to be calculated.</remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBody.ComputeMaxStack(System.Boolean)">
            <summary>
            Computes the maximum values pushed onto the stack by this method body.
            </summary>
            <param name="calculateOffsets">Determines whether offsets should be calculated beforehand.</param>
            <exception cref="T:AsmResolver.DotNet.Code.Cil.StackImbalanceException">Occurs when the method body will result in an unbalanced stack.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilMethodBodyBuildFlags">
            <summary>
            Provides all possible flags that can be assigned to a <see cref="T:AsmResolver.DotNet.Code.Cil.CilMethodBody"/>, which alters the behaviour
            of the underlying method body serializer.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilMethodBodyBuildFlags.VerifyLabels">
            <summary>
            Indicates labels should be verified for validity.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilMethodBodyBuildFlags.ComputeMaxStack">
            <summary>
            Indicates the maximum stack depth should be calculated upon built.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Code.Cil.CilMethodBodyBuildFlags.FullValidation">
            <summary>
            Indicates the body should be subject to full validation before building.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilMethodBodySerializer">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.DotNet.Code.IMethodBodySerializer"/> interface, that serializes all
            managed CIL method bodies of type <see cref="T:AsmResolver.DotNet.Code.Cil.CilMethodBody"/> to raw method bodies of type <see cref="T:AsmResolver.PE.DotNet.Cil.CilRawMethodBody"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBodySerializer.ComputeMaxStackOnBuildOverride">
            <summary>
            Gets or sets the value of an override switch indicating whether the max stack should always be recalculated
            or should always be preserved.
            </summary>
            <remarks>
            <para>
            When this property is set to <c>true</c>, the maximum stack depth of all method bodies will be recalculated.
            </para>
            <para>
            When this property is set to <c>false</c>, the maximum stack depth of all method bodies will be preserved.
            </para>
            <para>
            When this property is set to <c>null</c>, the maximum stack depth will only be recalculated if
            <see cref="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.ComputeMaxStackOnBuild"/> is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.CilMethodBodySerializer.VerifyLabelsOnBuildOverride">
            <summary>
            Gets or sets the value of an override switch indicating whether labels should always be verified for
            validity or not.
            </summary>
            <remarks>
            <para>
            When this property is set to <c>true</c>, all method bodies will be verified for branch validity.
            </para>
            <para>
            When this property is set to <c>false</c>, no method body will be verified for branch validity.
            </para>
            <para>
            When this property is set to <c>null</c>, a method body will only be verified if
            <see cref="P:AsmResolver.DotNet.Code.Cil.CilMethodBody.VerifyLabelsOnBuild"/> is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilMethodBodySerializer.SerializeMethodBody(AsmResolver.DotNet.Code.MethodBodySerializationContext,AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.CilOperandBuilder">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.PE.DotNet.Cil.ICilOperandBuilder"/> interface, that pulls metadata tokens
            from a metadata buffer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilOperandBuilder.#ctor(AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider,AsmResolver.IErrorListener)">
            <summary>
            Creates a new CIL operand builder that pulls metadata tokens from a mutable metadata buffer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilOperandBuilder.GetVariableIndex(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilOperandBuilder.GetArgumentIndex(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilOperandBuilder.GetStringToken(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.CilOperandBuilder.GetMemberToken(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider">
            <summary>
            Provides members for retrieving newly assigned metadata tokens to metadata members.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetTypeReferenceToken(AsmResolver.DotNet.TypeReference)">
            <summary>
            Gets the newly assigned metadata token of a type reference stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="type">The reference to the type to add.</param>
            <returns>The metadata token of the added type reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetTypeDefinitionToken(AsmResolver.DotNet.TypeDefinition)">
            <summary>
            Gets the newly assigned metadata token of a type definition stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="type">The reference to the type to add.</param>
            <returns>The metadata token of the added type definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetFieldDefinitionToken(AsmResolver.DotNet.FieldDefinition)">
            <summary>
            Gets the newly assigned metadata token of a type definition stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="field">The reference to the field to add.</param>
            <returns>The metadata token of the added field definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetMethodDefinitionToken(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Gets the newly assigned metadata token of a method definition stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="method">The reference to the method to add.</param>
            <returns>The metadata token of the added method definition.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetMemberReferenceToken(AsmResolver.DotNet.MemberReference)">
            <summary>
            Gets the newly assigned metadata token of a member reference stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="member">The reference to the member to add.</param>
            <returns>The metadata token of the added member reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetStandAloneSignatureToken(AsmResolver.DotNet.StandAloneSignature)">
            <summary>
            Gets the newly assigned metadata token of a stand-alone signature stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="signature">The reference to the signature to add.</param>
            <returns>The metadata token of the added signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetAssemblyReferenceToken(AsmResolver.DotNet.AssemblyReference)">
            <summary>
            Gets the newly assigned metadata token of a assembly reference stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="assembly">The reference to the assembly to add.</param>
            <returns>The metadata token of the added assembly reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetTypeSpecificationToken(AsmResolver.DotNet.TypeSpecification)">
            <summary>
            Gets the newly assigned metadata token of a type specification. stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="type">The reference to the type to add.</param>
            <returns>The metadata token of the added type specification.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetMethodSpecificationToken(AsmResolver.DotNet.MethodSpecification)">
            <summary>
            Gets the newly assigned metadata token of a method specification stored in a tables stream or tables stream buffer. 
            </summary>
            <param name="method">The reference to the method to add.</param>
            <returns>The metadata token of the added method specification.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider.GetUserStringIndex(System.String)">
            <summary>
            Gets the index to a user-string referenced in a CIL method body.
            </summary>
            <param name="value">The string value.</param>
            <returns>The index.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException">
            <summary>
            Represents the exception that occurs when an invalid CIL instruction was constructed.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException.#ctor(AsmResolver.PE.DotNet.Cil.CilOpCode)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException"/> class.
            </summary>
            <param name="code">The operation code that was attempted to create an instruction with.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner cause of the exception.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.InvalidCilInstructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider">
            <summary>
            Provides an implementation for the <see cref="T:AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider"/> interface that always returns the
            original metadata token that was assigned to the provided metadata member or string.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.#ctor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new token provider.
            </summary>
            <param name="module">
            The module to pull the original tokens from, or <c>null</c> if no verification should be done on the
            declaring module.
            </param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetTypeReferenceToken(AsmResolver.DotNet.TypeReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetTypeDefinitionToken(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetFieldDefinitionToken(AsmResolver.DotNet.FieldDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetMethodDefinitionToken(AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetMemberReferenceToken(AsmResolver.DotNet.MemberReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetStandAloneSignatureToken(AsmResolver.DotNet.StandAloneSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetAssemblyReferenceToken(AsmResolver.DotNet.AssemblyReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetTypeSpecificationToken(AsmResolver.DotNet.TypeSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetMethodSpecificationToken(AsmResolver.DotNet.MethodSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.OriginalMetadataTokenProvider.GetUserStringIndex(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver">
            <summary>
            Provides an implementation of the <see cref="T:AsmResolver.PE.DotNet.Cil.ICilOperandResolver"/> class that resolves operands by looking up
            members and strings in the physical metadata of the underlying module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver.#ctor(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Code.Cil.CilMethodBody)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver"/> class.
            </summary>
            <param name="contextModule">The context module.</param>
            <param name="methodBody">The method body that references the operands.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver.ResolveMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver.ResolveString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver.ResolveLocalVariable(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.PhysicalCilOperandResolver.ResolveParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Cil.StackImbalanceException">
            <summary>
            Represents the exception that occurs when an inconsistency was detected during a stack analysis.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Cil.StackImbalanceException.#ctor(AsmResolver.DotNet.Code.Cil.CilMethodBody,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.Cil.StackImbalanceException"/> class.
            </summary>
            <param name="body">The method body in which the inconsistency was detected.</param>
            <param name="offset">The offset at which the inconsistency was detected.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.StackImbalanceException.Body">
            <summary>
            Gets the method body in which the inconsistency was detected.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Cil.StackImbalanceException.Offset">
            <summary>
            Gets the offset at which the inconsistency was detected.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.IMethodBodySerializer">
            <summary>
            Provides members for serializing a method body defined in a .NET module to a file segment. 
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.IMethodBodySerializer.SerializeMethodBody(AsmResolver.DotNet.Code.MethodBodySerializationContext,AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Serializes the body of the provided method definition into a segment that can be added to a PE image.  
            </summary>
            <param name="context">The context in which the serializer is situated in.</param>
            <param name="method">The method to serialize the method body for.</param>
            <returns>A reference to a segment that encodes the method body.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Code.MethodBody">
            <summary>
            Represents a body of a method defined in a .NET assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.MethodBody.#ctor(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Initializes a new empty method body.
            </summary>
            <param name="owner">The owner of the method body.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MethodBody.Owner">
            <summary>
            Gets the method that owns the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MethodBody.Address">
            <summary>
            When this method is stored in a serialized module, gets or sets the reference to the beginning of the
            raw contents of the body.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.MethodBodySerializationContext">
            <summary>
            Describes an environment in which a method body serializer currently exists in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.MethodBodySerializationContext.#ctor(AsmResolver.DotNet.Code.Cil.IMetadataTokenProvider,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.IErrorListener)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.MethodBodySerializationContext"/> class.
            </summary>
            <param name="tokenProvider">
            The object responsible for providing new metadata tokens to members referenced by instructions.
            </param>
            <param name="symbolsProvider">
            The object responsible for providing symbols referenced by native method bodies.
            </param>
            <param name="errorListener">
            The object responsible for collecting diagnostic information during the serialization process.
            </param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MethodBodySerializationContext.TokenProvider">
            <summary>
            Gets the object responsible for providing new metadata tokens to members referenced by instructions.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MethodBodySerializationContext.SymbolsProvider">
            <summary>
            Gets the object responsible for providing symbols referenced by native method bodies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MethodBodySerializationContext.ErrorListener">
            <summary>
            Gets the object responsible for collecting diagnostic information during the serialization process.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.MultiMethodBodySerializer">
            <summary>
            Provides an implementation for the <see cref="T:AsmResolver.DotNet.Code.IMethodBodySerializer"/> that multiplexes two instances of
            the <see cref="T:AsmResolver.DotNet.Code.IMethodBodySerializer"/> interface together, and uses one for serializing managed method bodies,
            and the other for unmanaged method bodies. 
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.MultiMethodBodySerializer.#ctor(AsmResolver.DotNet.Code.IMethodBodySerializer,AsmResolver.DotNet.Code.IMethodBodySerializer)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Code.MultiMethodBodySerializer"/> class.
            </summary>
            <param name="managedSerializer">The serializer responsible for serializing managed CIL method bodies.</param>
            <param name="unmanagedSerializer">The serializer responsible for serializing unmanaged CIL method bodies.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MultiMethodBodySerializer.ManagedSerializer">
            <summary>
            Gets or sets the method body serializer responsible for serializing managed CIL method bodies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.MultiMethodBodySerializer.UnmanagedSerializer">
            <summary>
            Gets or sets the method body serializer responsible for serializing unmanaged method bodies.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.MultiMethodBodySerializer.SerializeMethodBody(AsmResolver.DotNet.Code.MethodBodySerializationContext,AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider">
            <summary>
            Provides members for obtaining references to external symbols.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider.ImportSymbol(AsmResolver.ISymbol)">
            <summary>
            Adds a single symbol to the prototype.
            </summary>
            <param name="symbol">The symbol to import.</param>
            <returns>The imported symbol.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider.RegisterBaseRelocation(AsmResolver.PE.Relocations.BaseRelocation)">
            <summary>
            Adds a base relocation to the prototype.
            </summary>
            <param name="relocation">The relocation.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider.RegisterExportedSymbol(AsmResolver.PE.Exports.ExportedSymbol)">
            <summary>
            Adds an exported symbol to the prototype.
            </summary>
            <param name="symbol">The symbol to export.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider.RegisterExportedSymbol(AsmResolver.PE.Exports.ExportedSymbol,System.Nullable{System.UInt32})">
            <summary>
            Adds an exported symbol to the prototype.
            </summary>
            <param name="symbol">The symbol to export.</param>
            <param name="newOrdinal"></param>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Native.NativeLocalSymbol">
            <summary>
            Represents a symbol within a native method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeLocalSymbol.#ctor(AsmResolver.DotNet.Code.Native.NativeMethodBody,System.UInt32)">
            <summary>
            Creates a new native local symbol.
            </summary>
            <param name="body">The body that defines this symbol.</param>
            <param name="offset">The offset relative to the start of the method body.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Native.NativeLocalSymbol.Body">
            <summary>
            Gets the body that this symbol is defined in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Native.NativeLocalSymbol.Offset">
            <summary>
            Gets the offset of the symbol, relative to the start of the method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeLocalSymbol.GetReference">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeLocalSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Code.Native.NativeMethodBody">
            <summary>
            Represents a method body of a method defined in a .NET assembly, implemented using machine code that runs
            natively on the processor.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeMethodBody.#ctor(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Creates a new empty native method body.
            </summary>
            <param name="owner">The method that owns the body.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeMethodBody.#ctor(AsmResolver.DotNet.MethodDefinition,System.Byte[])">
            <summary>
            Creates a new native method body with the provided raw code stream.
            </summary>
            <param name="owner">The method that owns the body.</param>
            <param name="code">The raw code stream.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Native.NativeMethodBody.Code">
            <summary>
            Gets or sets the raw native code stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Code.Native.NativeMethodBody.AddressFixups">
            <summary>
            Gets a collection of fixups that need to be applied upon writing the code to the output stream.
            This includes addresses to imported symbols and global fields stored in data sections.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Native.NativeMethodBodySerializer">
            <summary>
            Provides an implementation for the <see cref="T:AsmResolver.DotNet.Code.IMethodBodySerializer"/> that serializes method bodies written
            in a native and unmanaged language.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeMethodBodySerializer.SerializeMethodBody(AsmResolver.DotNet.Code.MethodBodySerializationContext,AsmResolver.DotNet.MethodDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeMethodBodySerializer.AddBaseRelocations(AsmResolver.ISegment,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.PE.Code.AddressFixup)">
            <summary>
            Registers base relocations for the provided address fixup, if required.
            </summary>
            <param name="segment">The code segment that is being constructed.</param>
            <param name="provider">The object responsible for providing symbols referenced by the native method body.</param>
            <param name="fixup">The fixup to build base relocations for.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeMethodBodySerializer.FinalizeSymbol(AsmResolver.ISegment,AsmResolver.DotNet.Code.Native.INativeSymbolsProvider,AsmResolver.ISymbol)">
            <summary>
            Ensures the right symbol is used within the method body.
            </summary>
            <param name="result">The code segment that is being constructed.</param>
            <param name="provider">The object responsible for providing symbols referenced by the native method body.</param>
            <param name="symbol">The symbol to reference.</param>
            <returns>The symbol.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider">
            <summary>
            Provides a default implementation for <see cref="T:AsmResolver.DotNet.Code.Native.INativeSymbolsProvider"/> interface, which collects
            instances of <see cref="T:AsmResolver.PE.Imports.ImportedSymbol"/>, and removes any duplicated symbols.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.ImportSymbol(AsmResolver.ISymbol)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.RegisterBaseRelocation(AsmResolver.PE.Relocations.BaseRelocation)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.RegisterExportedSymbol(AsmResolver.PE.Exports.ExportedSymbol)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.RegisterExportedSymbol(AsmResolver.PE.Exports.ExportedSymbol,System.Nullable{System.UInt32})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.GetImportedModules">
            <summary>
            Gets a collection of all imported external modules.
            </summary>
            <returns>The modules.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.GetBaseRelocations">
            <summary>
            Gets a collection of all base relocations that need to be applied in the final PE image.
            </summary>
            <returns>The base relocations.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Code.Native.NativeSymbolsProvider.GetExportedSymbols(System.UInt32@)">
            <summary>
            Gets a collection of all symbols that need to be exported in the final PE image.
            </summary>
            <returns>The exported symbols.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Code.UnresolvedMethodBody">
            <summary>
            Provides a wrapper around a <see cref="T:AsmResolver.ISegmentReference"/>, pointing to the beginning of a method body.
            The interpretation of the data behind the pointer was left to the user.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Code.UnresolvedMethodBody.#ctor(AsmResolver.DotNet.MethodDefinition,AsmResolver.ISegmentReference)">
            <summary>
            Creates a new unresolved method body stub.
            </summary>
            <param name="owner">The owner of the method body.</param>
            <param name="address">The reference to the start of the method body.</param>
        </member>
        <member name="T:AsmResolver.DotNet.Collections.MethodSemanticsCollection">
            <summary>
            Provides an implementation of a list of method semantics that are associated to a property or event.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.#ctor(AsmResolver.DotNet.IHasSemantics)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Collections.MethodSemanticsCollection"/> class.
            </summary>
            <param name="owner">The owner of the collection.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.#ctor(AsmResolver.DotNet.IHasSemantics,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Collections.MethodSemanticsCollection"/> class.
            </summary>
            <param name="owner">The owner of the collection.</param>
            <param name="capacity">The initial number of elements the collection can store.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.OnInsertItem(System.Int32,AsmResolver.DotNet.MethodSemantics)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.OnSetItem(System.Int32,AsmResolver.DotNet.MethodSemantics)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.OnInsertRange(System.Int32,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.MethodSemantics})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.OnRemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Collections.MethodSemanticsCollection.OnClearItems">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Collections.Parameter">
            <summary>
            Represents a single parameter of a method. This is a matching of a parameter definition and its parameter type
            defined in the associated method signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.Index">
            <summary>
            Gets the index of the parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.Sequence">
            <summary>
            Gets the sequence number of the parameter, as used in the parameter definition list of the method definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.MethodSignatureIndex">
            <summary>
            Gets the index of the parameter within the method's signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.Definition">
            <summary>
            Gets the associated definition of the parameter, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.Parameter.Name">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Collections.Parameter.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Collections.ParameterCollection">
            <summary>
            Represents an ordered collection of parameters that a method defines and/or uses. This includes the hidden
            "this" parameter, as well as the virtual return parameter.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.ParameterCollection.#ctor(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Creates a new parameter collection for the specified method.
            </summary>
            <param name="owner">The method that owns the parameters.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.ParameterCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Collections.ParameterCollection.MethodSignatureIndexBase">
            <summary>
            Gets the displacement of the parameters in the method signature, depending on the value of
            <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.ParameterCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Collections.ParameterCollection.ReturnParameter">
            <summary>
            Gets the virtual parameter representing the return value of the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Collections.ParameterCollection.ThisParameter">
            <summary>
            Gets the virtual parameter containing the current instance of the class that the method is defined in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.ParameterCollection.PullUpdatesFromMethodSignature">
            <summary>
            Updates the list of parameters according to the parameters specified in the method's signature.
            </summary>
            <remarks>
            This method should be called once the signature of the owner method is updated.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.ParameterCollection.ContainsSignatureIndex(System.Int32)">
            <summary>
            Determines whether a parameter with the provided signature index exists within this parameter collection.
            </summary>
            <param name="index">The method signature index of the parameter.</param>
            <returns><c>true</c> if the parameter exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.ParameterCollection.GetBySignatureIndex(System.Int32)">
            <summary>
            Gets a parameter by its method signature index.
            </summary>
            <param name="index">The index.</param>
            <returns>The parameter.</returns>
            <remarks>
            This method can be used to resolve parameter indices in a method body to parameter objects.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Collections.ParameterCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Config.Json.RuntimeConfiguration">
            <summary>
            Represents the root object of a runtime configuration, stored in a *.runtimeconfig.json file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.FromFile(System.String)">
            <summary>
            Parses runtime configuration from a JSON file.
            </summary>
            <param name="path">The path to the runtime configuration file.</param>
            <returns>The parsed runtime configuration.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.FromJson(System.String)">
            <summary>
            Parses runtime configuration from a JSON string.
            </summary>
            <param name="json">The raw json string configuration file.</param>
            <returns>The parsed runtime configuration.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.#ctor">
            <summary>
            Creates a new empty runtime configuration.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.#ctor(AsmResolver.DotNet.Config.Json.RuntimeOptions)">
            <summary>
            Creates a new runtime configuration with the provided options.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.RuntimeOptions">
            <summary>
            Gets or sets the runtime options.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.ToJson">
            <summary>
            Serializes the configuration to a JSON string.
            </summary>
            <returns>The JSON string.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeConfiguration.Write(System.String)">
            <summary>
            Writes the configuration to a file.
            </summary>
            <param name="path">The path to the JSON output file.</param>
        </member>
        <member name="T:AsmResolver.DotNet.Config.Json.RuntimeFramework">
            <summary>
            Provides version information about a framework implementation.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeFramework.#ctor">
            <summary>
            Creates a new empty runtime framework description.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeFramework.#ctor(System.String,System.String)">
            <summary>
            Creates a new runtime framework description.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeFramework.Name">
            <summary>
            Gets or sets the name of the framework implementation.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeFramework.Version">
            <summary>
            Gets or sets the version number of the framework implementation.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeFramework.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Config.Json.RuntimeOptions">
            <summary>
            Provides settings created when building a project.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeOptions.#ctor">
            <summary>
            Creates a new empty runtime options instance.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeOptions.#ctor(System.String,AsmResolver.DotNet.Config.Json.RuntimeFramework)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Config.Json.RuntimeOptions"/> class.
            </summary>
            <param name="tfm">The target framework moniker.</param>
            <param name="framework">The framework implementation description.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeOptions.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Config.Json.RuntimeOptions"/> class.
            </summary>
            <param name="tfm">The target framework moniker.</param>
            <param name="runtimeName">The name of the runtime.</param>
            <param name="runtimeVersion">The version of the runtime.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.ConfigProperties">
            <summary>
            Indicates configuration properties to configure the runtime and the framework
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.TargetFrameworkMoniker">
            <summary>
            Gets or sets the optional string value which specifies the Target Framework Moniker.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.Framework">
            <summary>
            Gets or sets the shared framework to use when activating the application.
            </summary>
            <remarks>
            The presence of this section (or another framework in the new frameworks section) indicates
            that the application is a framework-dependent app.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.IncludedFrameworks">
            <summary>
            Gets an optional array (added in .NET Core 3.0) that allows multiple frameworks to be specified.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.ApplyPatches">
            <summary>
            When false, the most compatible framework version previously found is used. When it is
            unspecified or true, the framework from either the same or a higher version that differs only
            by the patch field will be used.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.RollForwardOnNoCandidateFx">
            <summary>
            Gets or sets a value that determines the roll-forward behavior.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Config.Json.RuntimeOptions.AdditionalProbingPaths">
            <summary>
            Optional property which specifies additional paths to consider when looking for dependencies.
            The value is either a single string, or an array of strings.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Config.Json.RuntimeOptions.GetAllFrameworks">
            <summary>
            Gets a collection of all frameworks specified in the configuration.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Constant">
            <summary>
            Represents a literal value that is assigned to a field, parameter or property.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the constant with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType,AsmResolver.DotNet.Signatures.DataBlobSignature)">
            <summary>
            Creates a new constant for a member, with the provided constant type and raw literal value.
            </summary>
            <param name="type">The type of the constant.</param>
            <param name="value">The raw literal value of the constant.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Constant.Type">
            <summary>
            Gets the type of constant that is stored in the blob stream.
            </summary>
            <remarks>This field must always be a value-type.</remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Constant.Parent">
            <summary>
            Gets the member that is assigned a constant.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Constant.Value">
            <summary>
            Gets or sets the serialized literal value.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.GetParent">
            <summary>
            Obtains the owner of the constant.
            </summary>
            <returns>The parent.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.Constant.Parent"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.GetValue">
            <summary>
            Obtains the literal value of the constant.
            </summary>
            <returns>The value.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.Constant.Value"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Boolean)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Char)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Byte)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.SByte)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.UInt16)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Int16)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.UInt32)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Int32)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.UInt64)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Int64)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Single)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.Double)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Constant.FromValue(System.String)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Constant"/> from a value
            </summary>
            <param name="value">The value to be assigned to the constant</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Constant"/> with the correct <see cref="P:AsmResolver.DotNet.Constant.Type"/> and <see cref="P:AsmResolver.DotNet.Constant.Value"/>
            </returns>
        </member>
        <member name="T:AsmResolver.DotNet.CustomAttribute">
            <summary>
            Represents a custom attribute that is associated to a member in a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes an empty custom attribute.
            </summary>
            <param name="token">The token of the custom attribute.</param>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.#ctor(AsmResolver.DotNet.ICustomAttributeType)">
            <summary>
            Creates a new custom attribute.
            </summary>
            <param name="constructor">The constructor of the attribute to call.</param>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.#ctor(AsmResolver.DotNet.ICustomAttributeType,AsmResolver.DotNet.Signatures.CustomAttributeSignature)">
            <summary>
            Creates a new custom attribute.
            </summary>
            <param name="constructor">The constructor of the attribute to call.</param>
            <param name="signature">The signature containing the arguments to the constructor.</param>
        </member>
        <member name="P:AsmResolver.DotNet.CustomAttribute.Parent">
            <summary>
            Gets the member that this custom attribute is assigned to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.CustomAttribute.Constructor">
            <summary>
            Gets or sets the constructor that is invoked upon initializing the attribute.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.CustomAttribute.Signature">
            <summary>
            Gets or sets the signature containing the arguments passed onto the attribute's constructor.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.GetParent">
            <summary>
            Obtains the parent member of the attribute.
            </summary>
            <returns>The member</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.CustomAttribute.Parent"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.GetConstructor">
            <summary>
            Obtains the constructor of the attribute.
            </summary>
            <returns>The constructor</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.CustomAttribute.Constructor"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.GetSignature">
            <summary>
            Obtains the signature of the attribute.
            </summary>
            <returns>The signature</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.CustomAttribute.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.CustomAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.DefaultMetadataResolver">
            <summary>
            Provides a default implementation for the <see cref="T:AsmResolver.DotNet.IMetadataResolver"/> interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DefaultMetadataResolver.#ctor(AsmResolver.DotNet.IAssemblyResolver)">
            <summary>
            Creates a new metadata resolver.
            </summary>
            <param name="assemblyResolver">The resolver to use for resolving external assemblies.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DefaultMetadataResolver.AssemblyResolver">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.DefaultMetadataResolver.ResolveType(AsmResolver.DotNet.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.DefaultMetadataResolver.ResolveMethod(AsmResolver.DotNet.IMethodDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.DefaultMetadataResolver.ResolveField(AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.DotNetCoreAssemblyResolver">
            <summary>
            Provides an implementation of an assembly resolver that includes .NET or .NET Core runtime libraries.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(System.Version)">
            <summary>
            Creates a new .NET Core assembly resolver, by attempting to autodetect the current .NET or .NET Core
            installation directory.
            </summary>
            <param name="runtimeVersion">The version of .NET to target.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(AsmResolver.IO.IFileService,System.Version)">
            <summary>
            Creates a new .NET Core assembly resolver, by attempting to autodetect the current .NET or .NET Core
            installation directory.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
            <param name="runtimeVersion">The version of .NET to target.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(AsmResolver.DotNet.Config.Json.RuntimeConfiguration,System.Version)">
            <summary>
            Creates a new .NET Core assembly resolver, by attempting to autodetect the current .NET or .NET Core
            installation directory.
            </summary>
            <param name="configuration">The runtime configuration as specified by the *.runtimeconfig.json file.</param>
            <param name="fallbackVersion">The version of .NET to fallback on if the runtime configuration is insufficient.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(AsmResolver.IO.IFileService,AsmResolver.DotNet.Config.Json.RuntimeConfiguration,System.Version)">
            <summary>
            Creates a new .NET Core assembly resolver, by attempting to autodetect the current .NET or .NET Core
            installation directory.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
            <param name="configuration">The runtime configuration as specified by the *.runtimeconfig.json file.</param>
            <param name="fallbackVersion">The version of .NET to fallback on if the runtime configuration is insufficient.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(AsmResolver.IO.IFileService,AsmResolver.DotNet.Config.Json.RuntimeConfiguration,AsmResolver.DotNet.DotNetCorePathProvider)">
            <summary>
            Creates a new .NET Core assembly resolver.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
            <param name="configuration">The runtime configuration to use.</param>
            <param name="pathProvider">The installation directory of .NET Core.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.#ctor(AsmResolver.IO.IFileService,AsmResolver.DotNet.Config.Json.RuntimeConfiguration,System.Version,AsmResolver.DotNet.DotNetCorePathProvider)">
            <summary>
            Creates a new .NET Core assembly resolver.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
            <param name="configuration">The runtime configuration to use, or <c>null</c> if no configuration is available.</param>
            <param name="fallbackVersion">The version of .NET or .NET Core to use when no (valid) configuration is provided.</param>
            <param name="pathProvider">The installation directory of .NET Core.</param>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.ProbeRuntimeDirectories(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCoreAssemblyResolver.RuntimeNameComparer.Compare(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.DotNetCorePathProvider">
            <summary>
            Provides a mechanism for looking up versioned runtimes in a .NET Core / .NET 5.0+ installation folder.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.#ctor">
            <summary>
            Creates a new .NET installation path provider, using the <see cref="P:AsmResolver.DotNet.DotNetCorePathProvider.DefaultInstallationPath"/>
            as the installation path.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.#ctor(System.String)">
            <summary>
            Creates a new .NET installation path provider, using the provided installation folder for .NET.
            </summary>
            <param name="installationDirectory">The .NET installation folder.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.Default">
            <summary>
            Gets the default path provider representing the global .NET installation on the current system.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DefaultInstallationPath">
            <summary>
            Gets the installation path of the .NET installation on the current system.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.TryGetLatestStandardCompatibleVersion(System.Version,System.Version@)">
            <summary>
            Attempts to get the most recent version of .NET Core or .NET that is compatible with the provided
            .NET standard version.
            </summary>
            <param name="standardVersion">The .NET standard version.</param>
            <param name="coreVersion">The most recent compatible .NET or .NET Core version available.</param>
            <returns><c>true</c> if a compatible version was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.GetRuntimePathCandidates(System.Version)">
            <summary>
            Collects all paths to the runtimes that implement the provided .NET or .NET Core runtime version.
            </summary>
            <param name="requestedRuntimeVersion">The requested .NET or .NET Core version.</param>
            <returns>A collection of paths that implement the requested version.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.GetRuntimePathCandidates(System.String,System.Version)">
            <summary>
            Collects all paths to the runtimes that implement the provided .NET or .NET Core runtime version.
            </summary>
            <returns>A collection of paths that implement the requested version.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.HasRuntimeInstalled(System.Version)">
            <summary>
            Determines whether a specific version of the runtime is installed or not.
            </summary>
            <param name="runtimeVersion">The runtime version.</param>
            <returns><c>true</c> if the version is installed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.HasRuntimeInstalled(System.String,System.Version)">
            <summary>
            Determines whether a specific version of the runtime is installed or not.
            </summary>
            <param name="runtimeName">The name of the runtime.</param>
            <param name="runtimeVersion">The runtime version.</param>
            <returns><c>true</c> if the version is installed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.FindDotNetPath">
            <summary>
            Attempts to auto detect the installation directory of .NET or .NET Core.
            </summary>
            <returns>The path to the runtime, or <c>null</c> if none was found.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo">
            <summary>
            Provides information about a .NET runtime installation.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo"/> structure.
            </summary>
            <param name="path">The path to the runtime.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.Name">
            <summary>
            Gets the name of the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.FullPath">
            <summary>
            Gets the full path to the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.InstalledVersions">
            <summary>
            Gets a list of installed versions in the directory.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.TryFindBestMatchingVersion(System.Version,AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo@)">
            <summary>
            Attempts to find a version that best matches the provided requested .NET or .NET Core version.
            </summary>
            <param name="requestedVersion">The requested .NET or .NET Core version.</param>
            <param name="versionInfo">The runtime that best matches the version.</param>
            <returns><c>true</c> if a match was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.DetectInstalledVersionsInDirectory(System.String,System.String)">
            <summary>
            Finds all installed versions in the directory.
            </summary>
            <param name="name">The name of the runtime.</param>
            <param name="path">The path to the directory to search in.</param>
            <returns>The list of runtimes installed in the provided directory.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo.CompareTo(AsmResolver.DotNet.DotNetCorePathProvider.DotNetInstallationInfo)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo">
            <summary>
            Provides information about a single installation of the .NET runtime.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo.#ctor(System.String,System.Version,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo"/> structure..
            </summary>
            <param name="runtimeName">The name of the runtime.</param>
            <param name="version">The version of the runtime.</param>
            <param name="fullPath">The full path to the installation directory.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo.RuntimeName">
            <summary>
            Gets the name of the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo.Version">
            <summary>
            Gets the version of the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo.FullPath">
            <summary>
            Gets the full path to the installation directory of the runtime.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetCorePathProvider.DotNetRuntimeVersionInfo.IsCompatibleWithStandard(System.Version)">
            <summary>
            Determines whether the runtime is compatible with the provided .NET standard version
            </summary>
            <param name="standardVersion">The .NET standard version.</param>
            <returns><c>true</c> if compatible, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver">
            <summary>
            Provides an implementation of an assembly resolver that includes the global assembly cache (GAC), as well
            as any custom search directories.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.#ctor">
            <summary>
            Creates a new default assembly resolver.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.#ctor(AsmResolver.IO.IFileService)">
            <summary>
            Creates a new default assembly resolver.
            </summary>
            <param name="fileService">The service to use for reading files from the disk.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.Gac32Directories">
            <summary>
            Gets a collection of 32-bit global assembly cache (GAC_32) directories that are probed upon resolving a
            reference to an assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.Gac64Directories">
            <summary>
            Gets a collection of 64-bit global assembly cache (GAC_64) directories that are probed upon resolving a
            reference to an assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.GacMsilDirectories">
            <summary>
            Gets a collection of MSIL global assembly cache (GAC_MSIL) directories that are probed upon resolving a
            reference to an assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetFrameworkAssemblyResolver.ProbeRuntimeDirectories(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.DotNetRuntimeInfo">
            <summary>
            Provides information about a target runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.DotNetRuntimeInfo.NetCoreApp">
            <summary>
            The target framework name used by applications targeting .NET and .NET Core.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.DotNetRuntimeInfo.NetStandard">
            <summary>
            The target framework name used by libraries targeting .NET Standard.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.DotNetRuntimeInfo.NetFramework">
            <summary>
            The target framework name used by applications targeting legacy .NET Framework.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetRuntimeInfo.#ctor(System.String,System.Version)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.DotNetRuntimeInfo"/> structure.
            </summary>
            <param name="name">The name of the runtime.</param>
            <param name="version">The version of the runtime.</param>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetRuntimeInfo.Name">
            <summary>
            Gets the name of the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetRuntimeInfo.Version">
            <summary>
            Gets the version of the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetRuntimeInfo.IsNetCoreApp">
            <summary>
            Gets a value indicating whether the application targets the .NET or .NET Core runtime or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetRuntimeInfo.IsNetFramework">
            <summary>
            Gets a value indicating whether the application targets the .NET Framework runtime or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.DotNetRuntimeInfo.IsNetStandard">
            <summary>
            Gets a value indicating whether the application targets the .NET standard specification or not.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetRuntimeInfo.TryParse(System.String,AsmResolver.DotNet.DotNetRuntimeInfo@)">
            <summary>
            Attempts to parse the framework name as provided in <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute"/>.
            </summary>
            <param name="frameworkName">The full runtime name.</param>
            <param name="info">The parsed version info.</param>
            <returns><c>true</c> if the provided name was in the correct format, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.DotNetRuntimeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.EventDefinition">
            <summary>
            Represents a single event in a type definition of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new property definition.
            </summary>
            <param name="token">The token of the property.</param>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventAttributes,AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new property definition.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="attributes">The attributes.</param>
            <param name="eventType">The delegate type of the event.</param>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.IsSpecialName">
            <summary>
            Gets or sets a value indicating the event uses a special name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.IsRuntimeSpecialName">
            <summary>
            Gets or sets a value indicating the event uses a special name used by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.Name">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <remarks>
            This property corresponds to the Name column in the event table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.EventType">
            <summary>
            Gets or sets the delegate type of the event.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.DeclaringType">
            <summary>
            Gets the type that defines the property.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.Semantics">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.AddMethod">
            <summary>
            Gets the method definition representing the first add accessor of this event definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.RemoveMethod">
            <summary>
            Gets the method definition representing the first remove accessor of this event definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.FireMethod">
            <summary>
            Gets the method definition representing the first fire accessor of this event definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.EventDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.SetSemanticMethods(AsmResolver.DotNet.MethodDefinition,AsmResolver.DotNet.MethodDefinition,AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Clear <see cref="P:AsmResolver.DotNet.EventDefinition.Semantics"/> and apply these methods to the event definition.
            </summary>
            <param name="addMethod">The method definition representing the add accessor of this event definition.</param>
            <param name="removeMethod">The method definition representing the remove accessor of this event definition.</param>
            <param name="fireMethod">The method definition representing the fire accessor of this event definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.EventDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.GetName">
            <summary>
            Obtains the name of the event definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.EventDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.GetEventType">
            <summary>
            Obtains the event type of the event definition.
            </summary>
            <returns>The event type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.EventDefinition.EventType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.GetDeclaringType">
            <summary>
            Obtains the declaring type of the event definition.
            </summary>
            <returns>The declaring type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.EventDefinition.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.GetSemantics">
            <summary>
            Obtains the methods associated to this event definition.
            </summary>
            <returns>The method semantic objects.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.EventDefinition.Semantics"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.EventDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.ExportedType">
            <summary>
            Represents a type definition that was exported to another external .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes an exported type with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.#ctor(AsmResolver.DotNet.IImplementation,System.String,System.String)">
            <summary>
            Creates a new exported type reference.
            </summary>
            <param name="implementation">The file containing the type.</param>
            <param name="ns">The namespace of the type.</param>
            <param name="name">The name of the type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Attributes">
            <summary>
            Gets or sets the attributes associated to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.TypeDefId">
            <summary>
            Gets or sets a hint to the row identifier of the type definition in the external module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <remarks>
            This property corresponds to the Name column in the exported type table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Namespace">
            <summary>
            Gets or sets the namespace of the type.
            </summary>
            <remarks>
            This property corresponds to the Namespace column in the exported type table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Implementation">
            <summary>
            Gets or sets the new location this type is exported to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.DeclaringType">
            <summary>
            When this exported type is nested, gets the enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ExportedType.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the exported type using the provided importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.ToTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.ToTypeSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.GetNamespace">
            <summary>
            Obtains the namespace of the exported type.
            </summary>
            <returns>The namespace.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ExportedType.Namespace"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.GetName">
            <summary>
            Obtains the name of the exported type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ExportedType.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.GetImplementation">
            <summary>
            Obtains the implementation of the exported type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ExportedType.Implementation"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ExportedType.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ExportedType.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.FieldDefinition">
            <summary>
            Represents a single field in a type definition of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new field definition.
            </summary>
            <param name="token">The token of the field.</param>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes,AsmResolver.DotNet.Signatures.FieldSignature)">
            <summary>
            Creates a new field definition.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="attributes">The attributes.</param>
            <param name="signature">The signature of the field.</param>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new field definition.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="attributes">The attributes.</param>
            <param name="fieldType">The type of values the field contains.</param>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <remarks>
            This property corresponds to the Name column in the field table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.Signature">
            <summary>
            Gets or sets the signature of the field. This includes the field type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsPrivateScope">
            <summary>
            Gets or sets a value indicating whether the field is in a private scope.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsPrivate">
            <summary>
            Gets or sets a value indicating whether the field is marked private and can only be accessed by
            members within the same enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsFamilyAndAssembly">
            <summary>
            Gets or sets a value indicating whether the field is marked family and assembly, and can only be accessed by
            members within the same enclosing type and any derived type, within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsAssembly">
            <summary>
            Gets or sets a value indicating whether the field is marked private and can only be accessed by
            members within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsFamily">
            <summary>
            Gets or sets a value indicating whether the field is marked private and can only be accessed by
            members within the same enclosing type, as well as any derived type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsFamilyOrAssembly">
            <summary>
            Gets or sets a value indicating whether the field is marked family or assembly, and can only be accessed by
            members within the same enclosing type and any derived type, or within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsPublic">
            <summary>
            Gets or sets a value indicating whether the field is marked public, and can be accessed by
            any member having access to the enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsStatic">
            <summary>
            Gets or sets a value indicating whether the field requires an object instance to access it.
            </summary>
            <remarks>
            This property does not reflect the value of <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/>, nor will it
            change the value of <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/> if this property is changed. For a
            valid .NET image, these values should match, however.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsInitOnly">
            <summary>
            Gets or sets a value indicating whether the field is marked init-only, and can only be assigned a value by
            a constructor of the enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsLiteral">
            <summary>
            Gets or sets a value indicating whether the field is marked as a literal, and its value is decided upon
            compile time.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsNotSerialized">
            <summary>
            Gets or sets a value indicating whether the field is marked as not serialized, indicating the field does
            not have to be serialized when the enclosing type is remoted.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsSpecialName">
            <summary>
            Gets or sets a value indicating whether the field uses a special name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsPInvokeImpl">
            <summary>
            Gets or sets a value indicating whether the field's implementation is forwarded through Platform Invoke.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.IsRuntimeSpecialName">
            <summary>
            Gets or sets a value indicating whether the field uses a name that is used by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.HasFieldMarshal">
            <summary>
            Gets or sets a value indicating whether the field has marshalling information associated to it.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.HasDefault">
            <summary>
            Gets or sets a value indicating whether the field has a default value associated to it.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.HasFieldRva">
            <summary>
            Gets or sets a value indicating whether the field has an initial value associated to it that is referenced
            by a relative virtual address.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.DeclaringType">
            <summary>
            Gets the type that defines the field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.Constant">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.MarshalDescriptor">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.ImplementationMap">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.FieldRva">
            <summary>
            Gets or sets a segment containing the initial value of the field.
            </summary>
            <remarks>
            Updating this property does not automatically update the <see cref="P:AsmResolver.DotNet.FieldDefinition.HasFieldRva"/> property, nor does the
            value of <see cref="P:AsmResolver.DotNet.FieldDefinition.HasFieldRva"/> reflect whether the field has initialization data or not. Well-formed
            .NET binaries should always set the <see cref="P:AsmResolver.DotNet.FieldDefinition.HasFieldRva"/> flag to <c>true</c> if this property is non-null.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.FieldDefinition.FieldOffset">
            <summary>
            Gets or sets the explicit offset of the field, relative to the starting address of the object (if available).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the field using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported field.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetName">
            <summary>
            Obtains the name of the field definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetSignature">
            <summary>
            Obtains the signature of the field definition.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetDeclaringType">
            <summary>
            Obtains the declaring type of the field definition.
            </summary>
            <returns>The declaring type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetConstant">
            <summary>
            Obtains the constant value assigned to the field definition.
            </summary>
            <returns>The constant.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.Constant"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetMarshalDescriptor">
            <summary>
            Obtains the marshal descriptor value assigned to the field definition.
            </summary>
            <returns>The marshal descriptor.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.MarshalDescriptor"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetImplementationMap">
            <summary>
            Obtains the platform invoke information assigned to the field.
            </summary>
            <returns>The mapping.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.ImplementationMap"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetFieldRva">
            <summary>
            Obtains the initial value of the field.
            </summary>
            <returns>The initial value.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.FieldRva"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.GetFieldOffset">
            <summary>
            Obtains the offset of the field as defined in the field layout.
            </summary>
            <returns>The field offset.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FieldDefinition.FieldOffset"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FieldDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.FileReference">
            <summary>
            Represents a reference to an external file that a .NET module depends on.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the file reference with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileAttributes)">
            <summary>
            Creates a new reference to an external file.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="attributes">The attributes associated to the reference.</param>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.Attributes">
            <summary>
            Gets or sets the attributes associated to the file reference.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.ContainsMetadata">
            <summary>
            Gets or sets a value indicating the referenced file contains .NET metadata.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.ContainsNoMetadata">
            <summary>
            Gets or sets a value indicating the referenced file does not contain .NET metadat.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.Name">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <remarks>
            This property corresponds to the Name column in the file table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.HashValue">
            <summary>
            Gets or sets the checksum of the referenced file.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.FileReference.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the file using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported file reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.GetName">
            <summary>
            Obtains the name of the referenced file.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.FileReference.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.GetHashValue">
            <summary>
            Obtains the hash of the referenced file.
            </summary>
            <returns>The hash.</returns>
            <remarks>
            This method is called upon initializing the <see cref="P:AsmResolver.DotNet.FileReference.HashValue"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.FileReference.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.FileReference.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.GacDirectory">
            <summary>
            Provides information about a directory in the global assembly cache (GAC).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.GacDirectory.#ctor(System.String,System.String)">
            <summary>
            Creates a new record of a global assembly cache info.
            </summary>
            <param name="basePath">The path to the global assembly cache.</param>
            <param name="prefix">The string to prepend to the assembly's directory.</param>
        </member>
        <member name="M:AsmResolver.DotNet.GacDirectory.Probe(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Probes the global assembly cache for an assembly.
            </summary>
            <param name="assembly">The assembly to lookup.</param>
            <returns>The path to the assembly, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.GacDirectory.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.GenericParameter">
            <summary>
            Represents a type parameter that a generic method or type in a .NET module defines.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new empty generic parameter.
            </summary>
            <param name="token">The token of the generic parameter.</param>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.#ctor(AsmResolver.Utf8String)">
            <summary>
            Creates a new generic parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterAttributes)">
            <summary>
            Creates a new generic parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="attributes">Additional attributes to assign to the parameter.</param>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Owner">
            <summary>
            Gets the member that defines this generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Name">
            <summary>
            Gets or sets the name of the generic parameter.
            </summary>
            <remarks>
            This property corresponds to the Name column in the generic parameter table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Attributes">
            <summary>
            Gets or sets additional attributes assigned to this generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Number">
            <summary>
            Gets the index of this parameter within the list of generic parameters that the owner defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.Constraints">
            <summary>
            Gets a collection of constraints put on the generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameter.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.GetName">
            <summary>
            Obtains the name of the generic parameter.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameter.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.GetOwner">
            <summary>
            Obtains the owner of the generic parameter.
            </summary>
            <returns>The owner</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameter.Owner"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.GetConstraints">
            <summary>
            Obtains a collection of constraints put on the generic parameter.
            </summary>
            <returns>The constraints</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameter.Constraints"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameter.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameter.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.GenericParameterConstraint">
            <summary>
            Represents an object that constrains a generic parameter to only be instantiated with a specific type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameterConstraint.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the generic parameter constraint with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameterConstraint.#ctor(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new constraint for a generic parameter.
            </summary>
            <param name="constraint">The type to constrain the generic parameter to.</param>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameterConstraint.Owner">
            <summary>
            Gets the generic parameter that was constrained.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameterConstraint.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#GenericParameter}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameterConstraint.Constraint">
            <summary>
            Gets or sets the type that the generic parameter was constrained to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameterConstraint.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.GenericParameterConstraint.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameterConstraint.GetOwner">
            <summary>
            Obtains the generic parameter that was constrained.
            </summary>
            <returns>The generic parameter</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameterConstraint.Owner"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameterConstraint.GetConstraint">
            <summary>
            Obtains the type that the generic parameter was constrained to.
            </summary>
            <returns>The type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameterConstraint.Constraint"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.GenericParameterConstraint.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.GenericParameterConstraint.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.HasCustomAttributeExtensions">
            <summary>
            Provides extensions for various metadata members.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.HasCustomAttributeExtensions.HasCustomAttribute(AsmResolver.DotNet.IHasCustomAttribute,System.String,System.String)">
            <summary>
            Determines whether a metadata member is assigned an attributes that match a particular namespace and name.
            </summary>
            <param name="self">The metadata member.</param>
            <param name="ns">The namespace of the attribute type.</param>
            <param name="name">The name of the attribute type.</param>
            <returns>The matching attributes.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.HasCustomAttributeExtensions.FindCustomAttributes(AsmResolver.DotNet.IHasCustomAttribute,System.String,System.String)">
            <summary>
            Finds all custom attributes that were assigned to a metadata member that match a particular namespace and name.
            </summary>
            <param name="self">The metadata member.</param>
            <param name="ns">The namespace of the attribute type.</param>
            <param name="name">The name of the attribute type.</param>
            <returns>The matching attributes.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.HasCustomAttributeExtensions.IsCompilerGenerated(AsmResolver.DotNet.IHasCustomAttribute)">
            <summary>
            Indicates whether the specified member is compiler generated.
            </summary>
            <param name="self">The referenced member to check</param>
            <returns><c>true</c> if the member was generated by the compiler, otherwise <c>false</c></returns>
        </member>
        <member name="T:AsmResolver.DotNet.IAssemblyResolver">
            <summary>
            Provides members for resolving references to external .NET assemblies.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IAssemblyResolver.Resolve(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Resolves a reference to an assembly. 
            </summary>
            <param name="assembly">The reference to the assembly.</param>
            <returns>The resolved assembly, or <c>null</c> if the resolution failed.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.IAssemblyResolver.AddToCache(AsmResolver.DotNet.AssemblyDescriptor,AsmResolver.DotNet.AssemblyDefinition)">
            <summary>
            Adds the assembly to the cache.
            </summary>
            <param name="descriptor">The reference to the assembly.</param>
            <param name="definition">The assembly.</param>
        </member>
        <member name="M:AsmResolver.DotNet.IAssemblyResolver.RemoveFromCache(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Removes the assembly from the cache.
            </summary>
            <param name="descriptor">The reference to the assembly.</param>
            <returns>
            <c>true</c> if the assembly descriptor existed in the cache and was removed successfully,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.IAssemblyResolver.HasCached(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Determines whether the provided assembly descriptor was resolved before and stored in the cache.
            </summary>
            <param name="descriptor">The reference to the assembly.</param>
            <returns><c>true</c> if the assembly was resolved and cached, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.IAssemblyResolver.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.ICustomAttributeType">
            <summary>
            Represents a member that can be referenced by a CustomAttributeType coded index,
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IFieldDescriptor">
            <summary>
            Provides members for describing a field in a managed assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IFieldDescriptor.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IFieldDescriptor.Signature">
            <summary>
            Gets the signature of the field.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IFieldDescriptor.Resolve">
            <summary>
            Resolves the reference to a field definition.
            </summary>
            <returns>The resolved field definition, or <c>null</c> if the field could not be resolved.</returns>
            <remarks>
            This method can only be invoked if the reference was added to a module.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.IFullNameProvider">
            <summary>
            Represents a named object that has a full name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IFullNameProvider.FullName">
            <summary>
            Gets the full name of the object.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IHasConstant">
            <summary>
            Represents a member that can be assigned a constant value, and can be referenced by a HasConstant coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasConstant.Constant">
            <summary>
            Gets or sets a constant that is assigned to the member.
            </summary>
            <remarks>
            <para>If this property is set to <c>null</c>, the member is not assigned a constant value.</para>
            <para>Updating this property does not update any of the attributes associated to the member.</para>
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.IHasCustomAttribute">
            <summary>
            Represents a member that can be referenced by a HasCustomAttribute coded index,
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasCustomAttribute.CustomAttributes">
            <summary>
            Gets a collection of custom attributes assigned to this member.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IHasFieldMarshal">
            <summary>
            Represents a member that can be assigned a field marshal descriptor, and can be referenced by a HasFieldMarshal
            coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasFieldMarshal.MarshalDescriptor">
            <summary>
            Gets or sets the description on how a specific value needs to be marshaled upon calling to or from unmanaged
            code via P/Invoke dispatch.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IHasGenericParameters">
            <summary>
            Represents a member that can be referenced by a TypeOrMethod coded index, and exposes generic parameters.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasGenericParameters.GenericParameters">
            <summary>
            Gets a collection of generic parameters this member defines.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IHasSecurityDeclaration">
            <summary>
            Represents a member that can be assigned security declarations, and can be referenced by a HasDeclSecurity
            coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasSecurityDeclaration.SecurityDeclarations">
            <summary>
            Gets a collection of security declarations assigned to the member.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IHasSemantics">
            <summary>
            Represents a member that can be referenced by a HasSemantics coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IHasSemantics.Semantics">
            <summary>
            Gets a collection of methods that are associated with this member through special semantics. 
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IImplementation">
            <summary>
            Represents a member that is either a reference to an external file, assembly or type, and can be referenced by
            an Implementation coded index.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IImportable">
            <summary>
            Represents an entity in a .NET module that can be imported using the <see cref="T:AsmResolver.DotNet.ReferenceImporter"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IImportable.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Determines whether the descriptor of the member is fully imported in the provided module.
            </summary>
            <param name="module">The module that is supposed to import the member.</param>
            <returns><c>true</c> if the descriptor of the member is fully imported by the module, <c>false</c> otherwise.</returns>
            <remarks>
            This method verifies all references in the descriptor of the member only. It does not verify any additional
            data or contents (such as a method body) associated to the member.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.IImportable.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the member using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use for importing the object.</param>
            <returns>The imported member.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.IManagedEntryPoint">
            <summary>
            Represents a member that is either a method definition or a reference to an external file, that can be used to
            indicate the managed entry point of a .NET module.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IMemberDefinition">
            <summary>
            Represents an accessible member defined in a metadata image.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMemberDefinition.DeclaringType">
            <summary>
            Gets the type that declares the member (if available).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IMemberDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <summary>
            Determines whether the member can be accessed from the scope that is determined by the provided type.
            </summary>
            <param name="type">The type defining the scope.</param>
            <returns>True if the scope of the provided type can access the member, false otherwise.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.IMemberDescriptor">
            <summary>
            Provides members for describing a (reference to a) member defined in a .NET assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMemberDescriptor.DeclaringType">
            <summary>
            When this member is defined in a type, gets the enclosing type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IMemberDescriptor.Resolve">
            <summary>
            Resolves the reference to a member definition.
            </summary>
            <returns>The resolved member definition, or <c>null</c> if the member could not be resolved.</returns>
            <remarks>
            This method can only be invoked if the reference was added to a module.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.IMemberForwarded">
            <summary>
            Represents a member that can be assigned Platform Invoke (P/Invoke) implementation mappings, and can be indexed
            using a MemberForwarded coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMemberForwarded.ImplementationMap">
            <summary>
            Gets or sets the Platform Invoke (P/Invoke) implementation mapping of this member (if available).
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IMemberRefParent">
            <summary>
            Represents a member that can be referenced by a MemberRefParent coded index.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IMetadataMember">
            <summary>
            Represents a single member in a .NET image. 
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMetadataMember.MetadataToken">
            <summary>
            Gets the metadata token of the member.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IMetadataResolver">
            <summary>
            Provides members for resolving references to members defined in external .NET assemblies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMetadataResolver.AssemblyResolver">
            <summary>
            Gets the object responsible for the resolution of external assemblies.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IMetadataResolver.ResolveType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Resolves a reference to a type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The type definition, or <c>null</c> if the type could not be resolved.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.IMetadataResolver.ResolveMethod(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Resolves a reference to a method.
            </summary>
            <param name="method">The method. to resolve.</param>
            <returns>The method definition, or <c>null</c> if the method could not be resolved.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.IMetadataResolver.ResolveField(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Resolves a reference to a field.
            </summary>
            <param name="field">The field to resolve.</param>
            <returns>The field definition, or <c>null</c> if the field could not be resolved.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.IMethodDefOrRef">
            <summary>
            Represents a member that is either a method definition or a method reference, and can be referenced by a
            MethodDefOrRef coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMethodDefOrRef.DeclaringType">
            <summary>
            When this member is defined in a type, gets the enclosing type.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IMethodDescriptor">
            <summary>
            Provides members for describing a method in a managed assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMethodDescriptor.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IMethodDescriptor.Signature">
            <summary>
            Gets the signature of the method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IMethodDescriptor.Resolve">
            <summary>
            Resolves the reference to a method definition.
            </summary>
            <returns>The resolved method definition, or <c>null</c> if the method could not be resolved.</returns>
            <remarks>
            This method can only be invoked if the reference was added to a module.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.IModuleProvider">
            <summary>
            Represents a member definition or reference that resides in a .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.IModuleProvider.Module">
            <summary>
            Gets the module that defines the member definition or reference.
            </summary>
            <remarks>
            For member references, this does not obtain the module definition that the member is defined in. 
            Rather, it obtains the module definition that references this reference.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.ImplementationMap">
            <summary>
            Represents a mapping that maps a method or field defined in a .NET module to an unmanaged function or
            global field defined in an external module through Platform Invoke (P/Invoke).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ImplementationMap.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the <see cref="T:AsmResolver.DotNet.ImplementationMap"/> with a metadata token.
            </summary>
            <param name="token">The token of the member.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ImplementationMap.#ctor(AsmResolver.DotNet.ModuleReference,AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapAttributes)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.ImplementationMap"/> class.
            </summary>
            <param name="scope">The scope that declares the imported member.</param>
            <param name="name">The name of the imported member.</param>
            <param name="attributes">The attributes associated to the implementation mapping.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ImplementationMap.Attributes">
            <summary>
            Gets the attributes associated to the implementation mapping.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ImplementationMap.MemberForwarded">
            <summary>
            Gets the member that this P/Invoke implementation mapping is assigned to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ImplementationMap.Name">
            <summary>
            Gets or sets the name of the map.
            </summary>
            <remarks>
            This property corresponds to the Name column in the implementation map table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ImplementationMap.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ImplementationMap.Scope">
            <summary>
            Gets or sets the module that contains the external member.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ImplementationMap.GetName">
            <summary>
            Obtains the name of the imported member.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ImplementationMap.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ImplementationMap.GetScope">
            <summary>
            Obtains the scope that declares the imported member.
            </summary>
            <returns>The scope.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ImplementationMap.Scope"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ImplementationMap.GetMemberForwarded">
            <summary>
            Obtains the owner of the P/Invoke implementation mapping.
            </summary>
            <returns>The owner.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ImplementationMap.MemberForwarded"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.INameProvider">
            <summary>
            Represents an object that has a name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.INameProvider.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.InterfaceImplementation">
            <summary>
            Represents extra metadata added to a type indicating the type is implementing a particular interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.InterfaceImplementation.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the <see cref="T:AsmResolver.DotNet.InterfaceImplementation"/> object with a metadata token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:AsmResolver.DotNet.InterfaceImplementation.#ctor(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.InterfaceImplementation"/> class.
            </summary>
            <param name="interfaceType">The interface to be implemented.</param>
        </member>
        <member name="P:AsmResolver.DotNet.InterfaceImplementation.Class">
            <summary>
            Gets the type that implements the interface.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.InterfaceImplementation.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#TypeDefinition}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.InterfaceImplementation.Interface">
            <summary>
            Gets or sets the interface type that was implemented.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.InterfaceImplementation.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.InterfaceImplementation.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.InterfaceImplementation.GetClass">
            <summary>
            Obtains the type that implements the interface.
            </summary>
            <returns>The type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.InterfaceImplementation.Class"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.InterfaceImplementation.GetInterface">
            <summary>
            Obtains the interface that is implemented.
            </summary>
            <returns>The interface.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.InterfaceImplementation.Interface"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.InterfaceImplementation.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.InterfaceImplementation.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.InvalidTypeDefOrRef">
            <summary>
            Represents an invalid reference to a type. This class cannot be instantiated by itself nor overridden, and is
            only used to identify faulty or malicious structures in the .NET metadata.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.InvalidTypeDefOrRef.Error">
            <summary>
            Gets the error that occurred when parsing the type reference.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.InvalidTypeDefOrRef.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.InvalidTypeDefOrRef.Get(AsmResolver.DotNet.InvalidTypeSignatureError)">
            <summary>
            Gets the instance for the provided error.
            </summary>
            <param name="error">The error.</param>
            <returns>The invalid type reference instance.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.InvalidTypeDefOrRef.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.InvalidTypeDefOrRef.AsmResolver#DotNet#ITypeDefOrRef#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.InvalidTypeDefOrRef.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.InvalidTypeDefOrRef.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.InvalidTypeSignatureError">
            <summary>
            Defines members for various errors that might occur during the parsing of a blob type signature.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.InvalidTypeSignatureError.BlobTooShort">
            <summary>
            Indicates the blob signature was too short.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.InvalidTypeSignatureError.InvalidCodedIndex">
            <summary>
            Indicates a TypeDefOrRef coded index could not be decoded to a valid index.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.InvalidTypeSignatureError.MetadataLoop">
            <summary>
            Indicates there exists a reference loop between the metadata tables and the blob stream.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.InvalidTypeSignatureError.IllegalTypeSpec">
            <summary>
            Indicates a TypeDefOrRef coded index decoded to a TypeSpec, but is not allowed by the runtime to be one.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.InvalidTypeSignatureError.InvalidFieldOrProptype">
            <summary>
            Indicates the type was parsed from an invalid value of a FieldOrPropType.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.IResolutionScope">
            <summary>
            Represents a member that can be referenced by a ResolutionScope coded index.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.IResolutionScope.GetAssembly">
            <summary>
            Gets the underlying assembly that this scope defines.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.ITypeDefOrRef">
            <summary>
            Represents a type definition or reference that can be referenced by a TypeDefOrRef coded index.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDefOrRef.Name">
            <summary>
            Gets the name of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDefOrRef.Namespace">
            <summary>
            Gets the namespace the type resides in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDefOrRef.DeclaringType">
            <summary>
            When this type is nested, gets the enclosing type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ITypeDefOrRef.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the type using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use for importing the type.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ITypeDefOrRef.ToTypeSignature(System.Boolean)">
            <summary>
            Transforms the type descriptor to an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.TypeSignature"/>, which can be used in
            blob signatures.
            </summary>
            <param name="isValueType"><c>true</c> if the type is a value type, <c>false</c> otherwise.</param>
            <returns>The constructed type signature instance.</returns>
            <remarks>
            This function can be used to avoid type resolution on type references.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.ITypeDescriptor">
            <summary>
            Provides members for describing a type in a managed assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDescriptor.Namespace">
            <summary>
            Gets the namespace the type resides in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDescriptor.Scope">
            <summary>
            Gets the resolution scope that defines the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ITypeDescriptor.IsValueType">
            <summary>
            Gets a value indicating whether instances of this type are passed on by value or by reference.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ITypeDescriptor.Resolve">
            <summary>
            Resolves the reference to a type definition.
            </summary>
            <returns>The resolved type definition, or <c>null</c> if the type could not be resolved.</returns>
            <remarks>
            This method can only be invoked if the reference was added to a module.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ITypeDescriptor.ToTypeDefOrRef">
            <summary>
            Transforms the type descriptor to an instance of a <see cref="T:AsmResolver.DotNet.ITypeDefOrRef"/>, which can be referenced by
            a metadata token.
            </summary>
            <returns>The constructed TypeDefOrRef instance.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ITypeDescriptor.ToTypeSignature">
            <summary>
            Transforms the type descriptor to an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.TypeSignature"/>, which can be used in
            blob signatures.
            </summary>
            <returns>The constructed type signature instance.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.KnownCorLibs">
            <summary>
            Provides a list of common references to implementations of the Common Object Runtime (COR) library.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.KnownCorLibReferences">
            <summary>
            A collection of references to all known implementations of the Common Object Runtime (COR) library.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.KnownCorLibNames">
            <summary>
            A collection of names of known implementations of the common runtime library.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.MsCorLib_v2_0_0_0">
            <summary>
            References mscorlib.dll, Version=2.0.0.0, PublicKeyToken=B77A5C561934E089. This is used by .NET assemblies
            targeting the .NET Framework 2.0, 3.0 and 3.5.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.MsCorLib_v4_0_0_0">
            <summary>
            References mscorlib.dll, Version=4.0.0.0, PublicKeyToken=B77A5C561934E089. This is used by .NET assemblies
            targeting the .NET Framework 4.0 and later.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemPrivateCoreLib_v4_0_0_0">
            <summary>
            References System.Private.CoreLib.dll, Version=4.0.0.0, PublicKeyToken=7CEC85D7BEA7798E. This is used by .NET
            assemblies targeting .NET Core 1.0 and later.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemPrivateCoreLib_v5_0_0_0">
            <summary>
            References System.Private.CoreLib.dll, Version=5.0.0.0, PublicKeyToken=7CEC85D7BEA7798E. This is used by .NET
            assemblies targeting .NET 5.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemPrivateCoreLib_v6_0_0_0">
            <summary>
            References System.Private.CoreLib.dll, Version=6.0.0.0, PublicKeyToken=7CEC85D7BEA7798E. This is used by .NET
            assemblies targeting .NET 6.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemPrivateCoreLib_v7_0_0_0">
            <summary>
            References System.Private.CoreLib.dll, Version=7.0.0.0, PublicKeyToken=7CEC85D7BEA7798E. This is used by .NET
            assemblies targeting .NET 7.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v4_0_20_0">
            <summary>
            References System.Runtime.dll, Version=4.0.20.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET standard 1.3 and 1.4.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v4_1_0_0">
            <summary>
            References System.Runtime.dll, Version=4.0.0.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET standard 1.5, 1.6 and 1.7.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v4_2_1_0">
            <summary>
            References System.Runtime.dll, Version=4.2.1.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET Core 2.1.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v4_2_2_0">
            <summary>
            References System.Runtime.dll, Version=4.2.2.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET Core 3.1.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v5_0_0_0">
            <summary>
            References System.Runtime.dll, Version=5.0.0.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET 5.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v6_0_0_0">
            <summary>
            References System.Runtime.dll, Version=6.0.0.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET 6.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.SystemRuntime_v7_0_0_0">
            <summary>
            References System.Runtime.dll, Version=7.0.0.0, PublicKeyToken=B03F5F7F11D50A3A. This is used by .NET
            assemblies targeting .NET 7.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.NetStandard_v2_0_0_0">
            <summary>
            References netstandard.dll, Version=2.0.0.0, PublicKeyToken=CC7B13FFCD2DDD51. This is used by .NET
            assemblies targeting .NET standard 2.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownCorLibs.NetStandard_v2_1_0_0">
            <summary>
            References netstandard.dll, Version=2.1.0.0, PublicKeyToken=CC7B13FFCD2DDD51. This is used by .NET
            assemblies targeting .NET standard 2.1.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.KnownRuntimeNames">
            <summary>
            Provides strings of known runtime names used in .NET Core, .NET 5.0 and later.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeNames.NetCoreApp">
            <summary>
            Indicates an application targeting the default .NET Core runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeNames.WindowsDesktopApp">
            <summary>
            Indicates an application targeting the Windows Desktop environment runtime.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.KnownRuntimeVersions">
            <summary>
            Provides strings of known runtime version numbers. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Ecma2002">
            <summary>
            Indicates the ECMA 2002 runtime version string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Ecma2005">
            <summary>
            Indicates the ECMA 2005 runtime version string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Clr10">
            <summary>
            Indicates the Microsoft .NET Framework 1.0 runtime version string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Clr11">
            <summary>
            Indicates the Microsoft .NET Framework 1.1 runtime version string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Clr20">
            <summary>
            Indicates the Microsoft .NET Framework 2.0 runtime version string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.KnownRuntimeVersions.Clr40">
            <summary>
            Indicates the Microsoft .NET Framework 4.0 runtime version string.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.ManifestResource">
            <summary>
            Represents a single manifest resource file either embedded into the .NET assembly, or put into a separate file.
            In this case, it contains also a reference to the file the resource is located in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the <see cref="T:AsmResolver.DotNet.ManifestResource"/> with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes,AsmResolver.DotNet.IImplementation,System.UInt32)">
            <summary>
            Creates a new external manifest resource.
            </summary>
            <param name="name">The name of the resource</param>
            <param name="attributes">The attributes of the resource.</param>
            <param name="implementation">The location of the resource data.</param>
            <param name="offset">The offset within the file referenced by <paramref name="implementation"/> where the data starts.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceAttributes,AsmResolver.ISegment)">
            <summary>
            Creates a new embedded manifest resource.
            </summary>
            <param name="name">The name of the repository.</param>
            <param name="attributes">The attributes of the resource.</param>
            <param name="data">The embedded resource data.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.Offset">
            <summary>
            Depending on the value of <see cref="P:AsmResolver.DotNet.ManifestResource.Implementation"/>, gets or sets the (relative) offset the resource data
            starts at.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.Attributes">
            <summary>
            Gets or sets the attributes associated with this resource.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.IsPublic">
            <summary>
            Gets or sets a value indicating whether the resource is public and exported by the .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.IsPrivate">
            <summary>
            Gets or sets a value indicating whether the resource is private to the .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.Name">
            <summary>
            Gets or sets the name of the manifest resource.
            </summary>
            <remarks>
            This property corresponds to the Name column in the manifest resource table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.Implementation">
            <summary>
            Gets or sets the implementation indicating the file containing the resource data.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.IsEmbedded">
            <summary>
            Gets a value indicating whether the resource is embedded into the current module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.EmbeddedDataSegment">
            <summary>
            When this resource is embedded into the current module, gets or sets the embedded resource data.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.Module">
            <summary>
            Gets the module that this manifest resource reference is stored in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#ModuleDefinition}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ManifestResource.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetData">
            <summary>
            Gets the data stored in the manifest resource.
            </summary>
            <returns>The data, or <c>null</c> if no data was stored or if the external resource was not found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetReader">
            <summary>
            Gets the reader of stored data in the manifest resource.
            </summary>
            <returns>The reader, or <c>null</c> if no data was stored or if the external resource was not found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.TryGetReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Gets the reader of stored data in the manifest resource.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetName">
            <summary>
            Obtains the name of the manifest resource.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ManifestResource.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetImplementation">
            <summary>
            Obtains the implementation of this resource.
            </summary>
            <returns>The implementation.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ManifestResource.Implementation"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetEmbeddedDataSegment">
            <summary>
            When the resource is embedded, obtains the contents of the manifest resource.
            </summary>
            <returns>The data, or <c>null</c> if the resource is not embedded.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ManifestResource.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ManifestResource.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MemberNameGenerator">
            <summary>
            Provides methods for constructing the full name of a member in a .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MemberNameGenerator.Instance">
            <summary>
            Gets the singleton instance for the member name generator.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetTypeFullName(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Computes the full name of a type descriptor, including its namespace and/or declaring types.
            </summary>
            <param name="type">The type to obtain the full name for.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetFieldFullName(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Computes the full name of a field definition, including its declaring type's full name, as well as its
            field type.
            </summary>
            <param name="descriptor">The field</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetMethodFullName(AsmResolver.DotNet.MemberReference)">
            <summary>
            Computes the full name of a method reference, including its declaring type's full name, as well as its
            return type and parameters.
            </summary>
            <param name="reference">The reference</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetMethodFullName(AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Computes the full name of a method definition, including its declaring type's full name, as well as its
            return type, parameters and any type arguments.
            </summary>
            <param name="definition">The definition</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetMethodFullName(AsmResolver.DotNet.MethodSpecification)">
            <summary>
            Computes the full name of a method specification, including its declaring type's full name, as well as its
            return type, parameters and any type arguments.
            </summary>
            <param name="specification">The specification</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetPropertyFullName(AsmResolver.DotNet.PropertyDefinition)">
            <summary>
            Computes the full name of a property definition, including its declaring type's full name, as well as its
            return type and parameters.
            </summary>
            <param name="definition">The property</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.GetEventFullName(AsmResolver.DotNet.EventDefinition)">
            <summary>
            Computes the full name of a event definition, including its declaring type's full name, as well as its
            event type.
            </summary>
            <param name="definition">The event</param>
            <returns>The full name</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberNameGenerator.AsmResolver#DotNet#Signatures#Types#ITypeSignatureVisitor{System#Text#StringBuilder,System#Text#StringBuilder}#VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature,System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MemberReference">
            <summary>
            Represents a reference to a method or a field in an (external) .NET assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new member reference.
            </summary>
            <param name="token">The metadata token of the reference.</param>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.#ctor(AsmResolver.DotNet.IMemberRefParent,AsmResolver.Utf8String,AsmResolver.DotNet.Signatures.MemberSignature)">
            <summary>
            Creates a new reference to a member in an (external) .NET assembly.
            </summary>
            <param name="parent">The declaring member that defines the referenced member.</param>
            <param name="name">The name of the referenced member.</param>
            <param name="signature">The signature of the referenced member. This dictates whether the
            referenced member is a field or a method.</param>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.Parent">
            <summary>
            Gets or sets the member that declares the referenced member.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.Name">
            <summary>
            Gets or sets the name of the referenced member.
            </summary>
            <remarks>
            This property corresponds to the Name column in the member reference table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.AsmResolver#DotNet#INameProvider#Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.Signature">
            <summary>
            Gets or sets the signature of the referenced member.
            </summary>
            <remarks>
            This property dictates whether the referenced member is a field or a method.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.IsField">
            <summary>
            Gets a value indicating whether the referenced member is a field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.IsMethod">
            <summary>
            Gets a value indicating whether the referenced member is a method
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.DeclaringType">
            <summary>
            Gets the type that declares the referenced member, if available.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MemberReference.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.Resolve">
            <summary>
            Resolves the reference to a member definition.
            </summary>
            <returns>The resolved member definition, or <c>null</c> if the member could not be resolved.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the member reference has an invalid signature.</exception>
            <remarks>
            This method can only be invoked if the reference was added to a module.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the member using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use for importing the object.</param>
            <returns>The imported member.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MemberReference.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.GetParent">
            <summary>
            Obtains the parent of the member reference.
            </summary>
            <returns>The parent</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MemberReference.Parent"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.GetName">
            <summary>
            Obtains the name of the member reference.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MemberReference.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.GetSignature">
            <summary>
            Obtains the signature of the member reference.
            </summary>
            <returns>The signature</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MemberReference.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MemberReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Memory.CyclicStructureException">
            <summary>
            Represents the exception that occurs when a structure contains cyclic dependencies. That is, it defines at
            least one field of which the field type constructs a dependency cycle. 
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.CyclicStructureException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.CyclicStructureException"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.CyclicStructureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.CyclicStructureException"/>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.CyclicStructureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.CyclicStructureException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner cause of the exception.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.CyclicStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Memory.FieldMemoryLayout">
            <summary>
            Provides information about the layout of a single field in a type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.FieldMemoryLayout.#ctor(AsmResolver.DotNet.FieldDefinition,System.UInt32,AsmResolver.DotNet.Memory.TypeMemoryLayout)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.FieldMemoryLayout"/> class.
            </summary>
            <param name="field">The field that was laid out.</param>
            <param name="offset">The offset of the field.</param>
            <param name="contentsLayout">The layout of the contents of the field.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.FieldMemoryLayout.Field">
            <summary>
            Gets the field that was aligned.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.FieldMemoryLayout.Offset">
            <summary>
            Gets the implied offset of the field, relative to the start of the enclosing structure.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.FieldMemoryLayout.ContentsLayout">
            <summary>
            Gets the layout of the contents of the field.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Memory.MemoryLayoutAttributes">
            <summary>
            Defines members for all possible attributes that can be assigned to a <see cref="T:AsmResolver.DotNet.Memory.TypeMemoryLayout"/> instance.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Memory.MemoryLayoutAttributes.Is32Bit">
            <summary>
            Indicates the layout was determined assuming a 32-bit environment.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Memory.MemoryLayoutAttributes.Is64Bit">
            <summary>
            Indicates the layout was determined assuming a 32-bit environment.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Memory.MemoryLayoutAttributes.BitnessMask">
            <summary>
            Used to mask out the bitness of the type layout.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Memory.MemoryLayoutAttributes.IsPlatformDependent">
            <summary>
            Indicates the type layout depends on the bitness of the environment.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeAlignmentDetector.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Memory.TypeMemoryLayout">
            <summary>
            Provides information about the memory layout of a type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayout.#ctor(AsmResolver.DotNet.ITypeDescriptor,System.UInt32,AsmResolver.DotNet.Memory.MemoryLayoutAttributes)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.TypeMemoryLayout"/> class.
            </summary>
            <param name="type">The type for which the memory layout is determined.</param>
            <param name="size">The size of the type.</param>
            <param name="attributes">The attributes</param>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Type">
            <summary>
            Gets the type for which the memory layout was determined.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Item(AsmResolver.DotNet.FieldDefinition)">
            <summary>
            Gets the implied memory layout for the provided field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Size">
            <summary>
            Gets the total number of bytes this structure requires.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Attributes">
            <summary>
            Gets additional attributes associated to this memory layout.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Is32Bit">
            <summary>
            Gets a value indicating whether the type layout was determined assuming a 32-bit environment.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.Is64Bit">
            <summary>
            Gets a value indicating whether the type layout was determined assuming a 64-bit environment.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayout.IsPlatformDependent">
            <summary>
            Gets a value indicating whether the type layout is dependent on the bitness of the environment.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayout.TryGetFieldAtOffset(System.UInt32,AsmResolver.DotNet.Memory.FieldMemoryLayout@)">
            <summary>
            Finds a field within this type memory layout by its offset.
            </summary>
            <param name="offset">The offset of the field to find.</param>
            <param name="field">When the method returns <c>true</c>, contains the field with the provided offset..</param>
            <returns><c>true</c> if the field with the provided offset existed, <c>false,</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayout.TryGetFieldPath(System.UInt32,System.Collections.Generic.IList{AsmResolver.DotNet.Memory.FieldMemoryLayout}@)">
            <summary>
            Traverses the type memory layout tree and finds a field within this type memory layout by its offset.
            </summary>
            <param name="offset">The offset of the field to find.</param>
            <param name="path">The (incomplete) path of fields to traverse to reach the provided field offset.</param>
            <returns><c>true</c> if the offset points to the start of a field, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetection">
            <summary>
            Provides extension methods to type references, definitions, and signatures for determining the
            memory layout of such a type at runtime.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetection.GetImpliedMemoryLayout(AsmResolver.DotNet.ITypeDescriptor,System.Boolean)">
            <summary>
            Determines the memory layout of the provided type signature at runtime.
            </summary>
            <param name="type">The type.</param>
            <param name="is32Bit">Determines whether memory addresses are 32 bit or 64 bit wide.</param>
            <returns>The implied memory layout of the type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetection.GetImpliedMemoryLayout(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Determines the memory layout of the provided type signature at runtime.
            </summary>
            <param name="type">The type.</param>
            <param name="is32Bit">Determines whether memory addresses are 32 bit or 64 bit wide.</param>
            <returns>The implied memory layout of the type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetection.GetImpliedMemoryLayout(AsmResolver.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Determines the memory layout of the provided type signature at runtime.
            </summary>
            <param name="type">The type.</param>
            <param name="is32Bit">Determines whether memory addresses are 32 bit or 64 bit wide.</param>
            <returns>The implied memory layout of the type.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector">
            <summary>
            Provides an implementation of a type visitor that walks a type signature or definition and determines its
            memory layout.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector"/>.
            </summary>
            <param name="is32Bit">Determines whether memory addresses are 32 bit or 64 bit wide.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.#ctor(AsmResolver.DotNet.Signatures.GenericContext,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector"/>.
            </summary>
            <param name="currentGenericContext">The current generic context to use.</param>
            <param name="is32Bit">Determines whether memory addresses are 32 bit or 64 bit wide.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.Is32Bit">
            <summary>
            Gets a value indicating whether memory addresses are 32 bit or 64 bit wide.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.PointerSize">
            <summary>
            Gets the number of bytes a single pointer field requires.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Memory.TypeMemoryLayoutDetector.VisitTypeDefOrRef(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.ITypeDefOrRef"/> class.
            </summary>
            <param name="type">The type to visit.</param>
            <returns>The implied memory layout.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.MetadataMember">
            <summary>
            Represents a single member in a .NET image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MetadataMember.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the metadata member with a metadata token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:AsmResolver.DotNet.MetadataMember.MetadataToken">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MethodDefinition">
            <summary>
            Represents a single method in a type definition of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new method definition.
            </summary>
            <param name="token">The token of the method</param>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes,AsmResolver.DotNet.Signatures.MethodSignature)">
            <summary>
            Creates a new method definition.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="attributes">The attributes.</param>
            <param name="signature">The signature of the method</param>
            <remarks>
            For a valid .NET image, if <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/> of the signature referenced by
            <paramref name="signature"/> is set, the <see cref="F:AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodAttributes.Static"/> bit should be unset in
            <paramref name="attributes"/> and vice versa.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Name">
            <summary>
            Gets or sets the name of the method definition.
            </summary>
            <remarks>
            This property corresponds to the Name column in the method definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Signature">
            <summary>
            Gets or sets the signature of the method This includes the return type, as well as the types of the
            parameters that this method defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsCompilerControlled">
            <summary>
            Gets or sets a value indicating whether the method is compiler controlled and cannot be referenced directly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsPrivate">
            <summary>
            Gets or sets a value indicating whether the method is marked private and can only be accessed by
            members within the same enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsFamilyAndAssembly">
            <summary>
            Gets or sets a value indicating whether the method is marked family and assembly, and can only be accessed by
            members within the same enclosing type and any derived type, within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsAssembly">
            <summary>
            Gets or sets a value indicating whether the method is marked private and can only be accessed by
            members within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsFamily">
            <summary>
            Gets or sets a value indicating whether the method is marked private and can only be accessed by
            members within the same enclosing type, as well as any derived type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsFamilyOrAssembly">
            <summary>
            Gets or sets a value indicating whether the method is marked family or assembly, and can only be accessed by
            members within the same enclosing type and any derived type, or within the same assembly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsPublic">
            <summary>
            Gets or sets a value indicating whether the method is marked public, and can be accessed by
            any member having access to the enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsUnmanagedExport">
            <summary>
            Gets or sets a value indicating the managed method is exported by a thunk to unmanaged code.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsStatic">
            <summary>
            Gets or sets a value indicating whether the method requires an object instance to access it.
            </summary>
            <remarks>
            This property does not reflect the value of <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/>, nor will it
            change the value of <see cref="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis"/> if this property is changed. For a
            valid .NET image, these values should match, however.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsFinal">
            <summary>
            Gets or sets a value indicating whether the method is marked final and cannot be overridden by a derived
            class.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsVirtual">
            <summary>
            Gets or sets a value indicating whether the method is virtual.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsHideBySig">
            <summary>
            Gets or sets a value indicating whether the method is distinguished by both its name and signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsReuseSlot">
            <summary>
            Gets or sets a value indicating whether the runtime should reuse an existing slot in the VTable of the
            enclosing class for this method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsNewSlot">
            <summary>
            Gets or sets a value indicating whether the runtime allocate a new slot in the VTable of the
            enclosing class for this method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.CheckAccessOnOverride">
            <summary>
            Gets or sets a value indicating the method can only be overridden if it is also accessible.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsAbstract">
            <summary>
            Gets or sets a value indicating the method is marked abstract, and should be overridden by a derived class.
            </summary>
            <remarks>
            Methods with this flag set should not have a method body assigned for a valid .NET executable. However,
            updating this flag will not remove the body of this method, nor does the existence of the method body reflect
            the value of this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsSpecialName">
            <summary>
            Gets or sets a value indicating the method is given a special name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsRuntimeSpecialName">
            <summary>
            Gets or sets a value indicating the method is given a special name that is used by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsPInvokeImpl">
            <summary>
            Gets or sets a value indicating the method contains Platform Invoke information.
            </summary>
            <remarks>
            Methods containing Platform Invoke information should have this flag set. This property does not
            update automatically however when P/Invoke information is assigned to this method, nor does it reflect
            the existence of P/Invoke information.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.HasSecurity">
            <summary>
            Gets or sets a value indicating the method has security attributes assigned to it.
            </summary>
            <remarks>
            Methods containing security attributes should have this flag set. This property does not automatically
            however when attributes are added or removed from this method, nor does it reflect the existence of
            attributes.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.RequireSecObject">
            <summary>
            Gets or sets a value indicating themethod calls another method containing security code.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.ImplAttributes">
            <summary>
            Gets or sets the attributes that describe the implementation of the method body.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsIL">
            <summary>
            Gets or sets a value indicating the method body is implemented using the Common Intermediate Language (CIL).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsNative">
            <summary>
            Gets or sets a value indicating the method body is implemented using the Common Intermediate Language (CIL).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsOPTIL">
            <summary>
            Gets or sets a value indicating the method body is implemented using OPTIL.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsRuntime">
            <summary>
            Gets or sets a value indicating the method body is implemented by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Managed">
            <summary>
            Gets or sets a value indicating whether the method body is managed by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Unmanaged">
            <summary>
            Gets or sets a value indicating whether the method body is not managed by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsForwardReference">
            <summary>
            Gets or sets a value indicating whether the method body is forwarded.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsNoOptimization">
            <summary>
            Gets or sets a value indicating whether the runtime should not optimize the code upon generating native code.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.PreserveSignature">
            <summary>
            Gets or sets a value indicating whether the method's signature is not to be mangled to do HRESULT conversion.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsInternalCall">
            <summary>
            Gets or sets a value indicating whether the method is an internal call into the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsSynchronized">
            <summary>
            Gets or sets a value indicating only one thread can run the method at once.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.NoInlining">
            <summary>
            Gets or sets a value indicating whether the method can be inlined by the runtime or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.DeclaringType">
            <summary>
            Gets the type that defines the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.ParameterDefinitions">
            <summary>
            Gets a collection of parameter definitions that this method defines.
            </summary>
            <remarks>
            This property might not reflect the list of actual parameters that the method defines and uses according
            to the method signature. This property only reflects the list that is inferred from the ParamList column
            in the metadata row. For the actual list of parameters, use the <see cref="P:AsmResolver.DotNet.MethodDefinition.Parameters"/> property instead.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Parameters">
            <summary>
            Gets a collection of parameters that the method signature defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.HasMethodBody">
            <summary>
            Gets a value indicating whether the method is implemented using a method body. That is, whether the
            <see cref="P:AsmResolver.DotNet.MethodDefinition.MethodBody"/> property is not <c>null</c>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.MethodBody">
            <summary>
            Gets or sets the body of the method.
            </summary>
            <remarks>
            <para>
            Updating this property does not automatically set the appropriate implementation attributes in the
            <see cref="P:AsmResolver.DotNet.MethodDefinition.ImplAttributes"/>.
            </para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.CilMethodBody">
            <summary>
            Gets or sets the managed CIL body of the method if available.
            </summary>
            <remarks>
            <para>
            If this property is set to <c>null</c>, it does not necessarily mean the method does not have a method body.
            There could be an unmanaged method body assigned instead. See the <see cref="P:AsmResolver.DotNet.MethodDefinition.MethodBody"/> or
            <see cref="P:AsmResolver.DotNet.MethodDefinition.HasMethodBody"/> properties instead.
            </para>
            <para>
            Updating this property does not automatically set the appropriate implementation attributes in the
            <see cref="P:AsmResolver.DotNet.MethodDefinition.ImplAttributes"/>.
            </para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.NativeMethodBody">
            <summary>
            Gets or sets the unmanaged native body of the method if available.
            </summary>
            <remarks>
            <para>
            If this property is set to <c>null</c>, it does not necessarily mean the method does not have a method body.
            There could be a managed body assigned instead, or the current method body reader that the declaring module
            uses does not support reading a certain type of native method body. See the <see cref="P:AsmResolver.DotNet.MethodDefinition.MethodBody"/>  or
            <see cref="P:AsmResolver.DotNet.MethodDefinition.HasMethodBody"/> properties instead.
            </para>
            <para>
            Updating this property does not automatically set the appropriate implementation attributes in the
            <see cref="P:AsmResolver.DotNet.MethodDefinition.ImplAttributes"/>.
            </para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.ImplementationMap">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.SecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.GenericParameters">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.Semantics">
            <summary>
            Gets the semantics associated to this method (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsGetMethod">
            <summary>
            Gets a value indicating whether the method is a get method for a property.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsSetMethod">
            <summary>
            Gets a value indicating whether the method is a set method for a property.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsAddMethod">
            <summary>
            Gets a value indicating whether the method is an add method for an event.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsRemoveMethod">
            <summary>
            Gets a value indicating whether the method is a remove method for an event.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsFireMethod">
            <summary>
            Gets a value indicating whether the method is a fire method for an event.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.IsConstructor">
            <summary>
            Gets a value indicating whether the method is a (class) constructor.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodDefinition.ExportInfo">
            <summary>
            Gets or sets the unmanaged export info assigned to this method (if available). This can be used to indicate
            that a method needs to be exported in the final PE file as an unmanaged symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the method using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetName">
            <summary>
            Obtains the name of the method definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetDeclaringType">
            <summary>
            Obtains the declaring type of the method definition.
            </summary>
            <returns>The declaring type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetSignature">
            <summary>
            Obtains the signature of the method definition.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetParameterDefinitions">
            <summary>
            Obtains the parameter definitions of the method definition.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.ParameterDefinitions"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetBody">
            <summary>
            Obtains the body of the method definition.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.MethodBody"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetImplementationMap">
            <summary>
            Obtains the platform invoke information assigned to the method.
            </summary>
            <returns>The mapping.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.ImplementationMap"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetSecurityDeclarations">
            <summary>
            Obtains the list of security declarations assigned to the member.
            </summary>
            <returns>The security declarations</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.SecurityDeclarations"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetGenericParameters">
            <summary>
            Obtains the list of generic parameters this member declares.
            </summary>
            <returns>The generic parameters</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.GenericParameters"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetSemantics">
            <summary>
            Obtains the semantics associated to the method (if available).
            </summary>
            <returns>The semantics, or <c>null</c> if the method was not assigned semantics.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.Semantics"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.GetExportInfo">
            <summary>
            Obtains the unmanaged export information associated to the method (if available).
            </summary>
            <returns>The export information or <c>null</c> if the method was not exported as a native symbol.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodDefinition.ExportInfo"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MethodExtensions">
            <summary>
            Provides extensions for objects that represent methods in metadata.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodExtensions.MakeGenericInstanceMethod(AsmResolver.DotNet.IMethodDefOrRef,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Instantiates a generic method with the provided type arguments.
            </summary>
            <param name="self">The method to instantiate.</param>
            <param name="arguments">The type arguments to use.</param>
            <returns>The instantiated method.</returns>
            <exception cref="T:System.ArgumentException">Occurs when <paramref name="arguments"/> has an incorrect number of elements.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.MethodImplementation">
            <summary>
            Defines an explicit implementation of a method defined by an interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodImplementation.#ctor(AsmResolver.DotNet.IMethodDefOrRef,AsmResolver.DotNet.IMethodDefOrRef)">
            <summary>
            Creates a new explicit implementation of a method.
            </summary>
            <param name="declaration">The interface method that is implemented.</param>
            <param name="body">The method implementing the base method.</param>
        </member>
        <member name="P:AsmResolver.DotNet.MethodImplementation.Declaration">
            <summary>
            Gets the interface method that is implemented.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodImplementation.Body">
            <summary>
            Gets the method that implements the base method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodImplementation.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodImplementation.Equals(AsmResolver.DotNet.MethodImplementation)">
            <summary>
            Determines whether two method implementations record are equal.
            </summary>
            <param name="other">The other implementation record.</param>
            <returns><c>true</c> if they are considered equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MethodImplementation.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodImplementation.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MethodSemantics">
            <summary>
            Represents an object that associates a method definition to a property or an event.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSemantics.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes an empty method semantics object.
            </summary>
            <param name="token">The metadata token of the semantics object.</param>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSemantics.#ctor(AsmResolver.DotNet.MethodDefinition,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsAttributes)">
            <summary>
            Creates a new method semantics object.
            </summary>
            <param name="method">The method to give special semantics.</param>
            <param name="attributes">The type of semantics to assign.</param>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSemantics.Attributes">
            <summary>
            Gets or sets the type of semantics that are associated to the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSemantics.Method">
            <summary>
            Gets or sets the method that is given special semantics.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSemantics.Association">
            <summary>
            Gets or sets the member that the method is associated to.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSemantics.GetMethod">
            <summary>
            Obtains the method that was given special semantics.
            </summary>
            <returns>The method</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodSemantics.Method"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSemantics.GetAssociation">
            <summary>
            Obtains the member that the method is association to.
            </summary>
            <returns>The member</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodSemantics.Association"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSemantics.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.MethodSpecification">
            <summary>
            Represents a reference to a generic method that is instantiated with type arguments.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Creates a new empty method specification.
            </summary>
            <param name="token">The token of the specification.</param>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.#ctor(AsmResolver.DotNet.IMethodDefOrRef,AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature)">
            <summary>
            Creates a new reference to a generic instantiation of a method.
            </summary>
            <param name="method">The method to instantiate.</param>
            <param name="signature">The instantiation signature.</param>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.Method">
            <summary>
            Gets or sets the method that was instantiated.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.Signature">
            <summary>
            Gets or sets the generic instantiation of the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.Name">
            <summary>
            Gets or sets the name of the method specification.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.DeclaringType">
            <summary>
            Gets the declaring type of the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.MethodSpecification.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the method specification using the provided reference importer.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported method specification.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.GetMethod">
            <summary>
            Obtains the instantiated method.
            </summary>
            <returns>The method.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodSpecification.Method"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.GetSignature">
            <summary>
            Obtains the method instantiation signature.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodSpecification.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.MethodSpecification.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.MethodSpecification.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.ModuleDefinition">
            <summary>
            Represents a single module in a .NET assembly. A module definition is the root object of any .NET module and
            defines types, as well as any resources and referenced assemblies.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromBytes(System.Byte[])">
            <summary>
            Reads a .NET module from the provided input buffer.
            </summary>
            <param name="buffer">The raw contents of the executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromBytes(System.Byte[],AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module from the provided input buffer.
            </summary>
            <param name="buffer">The raw contents of the executable file to load.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromFile(System.String)">
            <summary>
            Reads a .NET module from the provided input file.
            </summary>
            <param name="filePath">The file path to the input executable to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromFile(System.String,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module from the provided input file.
            </summary>
            <param name="filePath">The file path to the input executable to load.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Reads a .NET module from the provided input file.
            </summary>
            <param name="file">The portable executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromFile(AsmResolver.PE.File.IPEFile)">
            <summary>
            Reads a .NET module from the provided input file.
            </summary>
            <param name="file">The portable executable file to load.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromFile(AsmResolver.PE.File.IPEFile,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module from the provided input file.
            </summary>
            <param name="file">The portable executable file to load.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromModuleBaseAddress(System.IntPtr)">
            <summary>
            Reads a mapped .NET module starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromModuleBaseAddress(System.IntPtr,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a mapped .NET module starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromModuleBaseAddress(System.IntPtr,AsmResolver.PE.File.PEMappingMode,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module starting at the provided module base address (HINSTANCE).
            </summary>
            <param name="hInstance">The HINSTANCE or base address of the module.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromModule(System.Reflection.Module)">
            <summary>
            Opens a module from an instance of a <see cref="T:System.Reflection.Module"/>.
            </summary>
            <param name="module">The reflection module to load.</param>
            <returns>The module.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromModule(System.Reflection.Module,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Opens a module from an instance of a <see cref="T:System.Reflection.Module"/>.
            </summary>
            <param name="module">The reflection module to load.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromDataSource(AsmResolver.IO.IDataSource,AsmResolver.PE.File.PEMappingMode)">
            <summary>
            Reads a .NET module from the provided data source.
            </summary>
            <param name="dataSource">The data source to read from.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <returns>The module that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromDataSource(AsmResolver.IO.IDataSource,AsmResolver.PE.File.PEMappingMode,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module from the provided data source.
            </summary>
            <param name="dataSource">The data source to read from.</param>
            <param name="mode">Indicates how the input PE file is mapped.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module that was read.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the file does not follow the PE file format.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.File.PEMappingMode)">
            <summary>
            Reads a .NET module from an input stream.
            </summary>
            <param name="reader">The input stream pointing at the beginning of the executable to load.</param>
            <param name="mode">Indicates the input PE is mapped or unmapped.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.PE.File.PEMappingMode,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Reads a .NET module from an input stream.
            </summary>
            <param name="reader">The input stream pointing at the beginning of the executable to load.</param>
            <param name="mode">Indicates the input PE is mapped or unmapped.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromImage(AsmResolver.PE.IPEImage)">
            <summary>
            Initializes a .NET module from a PE image.
            </summary>
            <param name="peImage">The image containing the .NET metadata.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET metadata directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.FromImage(AsmResolver.PE.IPEImage,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Initializes a .NET module from a PE image.
            </summary>
            <param name="peImage">The image containing the .NET metadata.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
            <returns>The module.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the image does not contain a valid .NET data directory.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new empty module with the provided metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.#ctor(System.String)">
            <summary>
            Defines a new .NET module that references mscorlib version 4.0.0.0.
            </summary>
            <param name="name">The name of the module.</param>
            <remarks>
            This constructor co-exists with the Utf8String overload for backwards compatibility.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.#ctor(AsmResolver.Utf8String)">
            <summary>
            Defines a new .NET module that references mscorlib version 4.0.0.0.
            </summary>
            <param name="name">The name of the module.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.#ctor(System.String,AsmResolver.DotNet.AssemblyReference)">
            <summary>
            Defines a new .NET module.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="corLib">The reference to the common object runtime (COR) library that this module will use.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.FilePath">
            <summary>
            When this module was read from the disk, gets the file path to the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.DotNetDirectory">
            <summary>
            Gets the underlying object providing access to the data directory containing .NET metadata (if available).
            </summary>
            <remarks>
            When this property is <c>null</c>, the module is a new module that is not yet assembled.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.OriginalTargetRuntime">
            <summary>
            Gets the runtime that this module targeted upon creation or reading.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Assembly">
            <summary>
            Gets the parent assembly that defines this module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#AssemblyDefinition}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.AsmResolver#DotNet#IModuleProvider#Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <remarks>
            This property corresponds to the Name column in the module definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Generation">
            <summary>
            Gets or sets the generation number of the module.
            </summary>
            <remarks>
            <para>
            This value is reserved and should be set to zero.
            </para>
            <para>
            This property corresponds to the Generation column in the module definition table.
            </para>
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Mvid">
            <summary>
            Gets or sets the unique identifier to distinguish between two versions
            of the same module.
            </summary>
            <remarks>
            This property corresponds to the MVID column in the module definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.EncId">
            <summary>
            Gets or sets the unique identifier to distinguish between two edit-and-continue generations.
            </summary>
            <remarks>
            This property corresponds to the EncId column in the module definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.EncBaseId">
            <summary>
            Gets or sets the base identifier of an edit-and-continue generation.
            </summary>
            <remarks>
            This property corresponds to the EncBaseId column in the module definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the underlying .NET directory of this module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.TokenAllocator">
            <summary>
            Gets an object responsible for assigning new <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken"/> to members
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.IsILOnly">
            <summary>
            Gets or sets a value indicating whether the .NET module only contains CIL code or also contains
            code targeting other architectures.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.IsBit32Required">
            <summary>
            Gets or sets a value indicating whether the .NET module requires a 32-bit environment to run.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.IsILLibrary">
            <summary>
            Gets or sets a value indicating whether the .NET module is a library.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.IsStrongNameSigned">
            <summary>
            Gets or sets a value indicating whether the .NET module is signed with a strong name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.HasNativeEntryPoint">
            <summary>
            Gets or sets a value indicating whether the .NET module has a native entry point or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.TrackDebugData">
            <summary>
            Gets or sets a value indicating whether debug data is tracked in this .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.IsBit32Preferred">
            <summary>
            Gets or sets a value indicating whether the .NET module prefers a 32-bit environment to run in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.MachineType">
            <summary>
            Gets or sets the machine type that the underlying PE image of the .NET module image is targeting.
            </summary>
            <remarks>
            This property is in direct relation with the machine type field in the file header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.TimeDateStamp">
            <summary>
            Gets or sets the date and time the module was created.
            </summary>
            <remarks>
            This property is in direct relation with the TimeDateStamp field in the file header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.FileCharacteristics">
            <summary>
            Gets or sets the attributes assigned to the underlying executable file.
            </summary>
            <remarks>
            This property is in direct relation with the characteristics field in the file header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.PEKind">
            <summary>
            Gets or sets the magic optional header signature, determining whether the underlying PE image is a
            PE32 (32-bit) or a PE32+ (64-bit) image.
            </summary>
            <remarks>
            This property is in direct relation with the magic field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.SubSystem">
            <summary>
            Gets or sets the subsystem to use when running the underlying portable executable (PE) file.
            </summary>
            <remarks>
            This property is in direct relation with the subsystem field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.DllCharacteristics">
            <summary>
            Gets or sets the dynamic linked library characteristics of the underlying portable executable (PE) file.
            </summary>
            <remarks>
            This property is in direct relation with the DLL characteristics field in the optional header of a portable
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.DebugData">
            <summary>
            Gets a collection of data entries stored in the debug data directory of the PE image (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.RuntimeVersion">
            <summary>
            Gets or sets the runtime version string
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.NativeResourceDirectory">
            <summary>
            Gets or sets the contents of the native Win32 resources data directory of the underlying
            portable executable (PE) file.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.TopLevelTypes">
            <summary>
            Gets a collection of top-level (not nested) types defined in the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.AssemblyReferences">
            <summary>
            Gets a collection of references to .NET assemblies that the module uses.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.ModuleReferences">
            <summary>
            Gets a collection of references to external modules that the module uses.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.FileReferences">
            <summary>
            Gets a collection of references to external files that the module uses.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.Resources">
            <summary>
            Gets a collection of resources stored in the module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.ExportedTypes">
            <summary>
            Gets a collection of types that are forwarded to another .NET module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.CorLibTypeFactory">
            <summary>
            Gets the common object runtime library type factory for this module, containing element type signatures used
            in blob signatures.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.MetadataResolver">
            <summary>
            Gets or sets the object responsible for resolving references to external .NET assemblies.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.ManagedEntryPointMethod">
            <summary>
            Gets or sets the managed method that is invoked after the .NET module is loaded and initialized.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.ManagedEntryPoint">
            <summary>
            Gets or sets the managed entry point that is invoked when the .NET module is initialized. This is either a
            method, or a reference to a secondary module containing the entry point method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleDefinition.DefaultImporter">
            <summary>
            Gets the default importer instance for this module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.LookupMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Looks up a member by its metadata token.
            </summary>
            <param name="token">The token of the member to look up.</param>
            <returns>The member.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the module does not support looking up members by its token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when a metadata token indexes a table that cannot be converted to a metadata member.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.LookupMember``1(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Looks up a member by its metadata token, and casts it to the provided metadata member type.
            </summary>
            <param name="token">The token of the member to look up.</param>
            <typeparam name="T">The type of member to look up.</typeparam>
            <returns>The casted member.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the module does not support looking up members by its token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Occurs when a metadata token indexes a table that cannot be converted to a metadata member.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.TryLookupMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.DotNet.IMetadataMember@)">
            <summary>
            Attempts to look up a member by its metadata token.
            </summary>
            <param name="token">The token of the member to look up.</param>
            <param name="member">The member, or <c>null</c> if the lookup failed.</param>
            <returns><c>true</c> if the member was successfully looked up, false otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.TryLookupMember``1(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,``0@)">
            <summary>
            Attempts to look up a member by its metadata token, and cast it to the specified metadata member type.
            </summary>
            <param name="token">The token of the member to look up.</param>
            <param name="member">The member, or <c>null</c> if the lookup failed.</param>
            <typeparam name="T">The type of member to look up.</typeparam>
            <returns><c>true</c> if the member was successfully looked up and of the correct type, false otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.LookupString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Looks up a user string by its string token.
            </summary>
            <param name="token">The token of the string to look up.</param>
            <returns>The member.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the module does not support looking up string by its token.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when a metadata token indexes an invalid string.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.TryLookupString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,System.String@)">
            <summary>
            Attempts to look up a user string by its metadata token.
            </summary>
            <param name="token">The token of the member to lookup.</param>
            <param name="value">The string, or <c>null</c> if the lookup failed.</param>
            <returns><c>true</c> if the string was successfully looked up, false otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetIndexEncoder(AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex)">
            <summary>
            Obtains an object that can be used to decode coded indices to metadata tokens.
            </summary>
            <param name="codedIndex">The type of indices to get the encoder for.</param>
            <returns>The index encoder.</returns>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the module does not support index encoders.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetImportedTypeReferences">
            <summary>
            Obtains a list of type references that were imported into the module.
            </summary>
            <returns>The type references.</returns>
            <remarks>
            The return value of this method does not update when the <see cref="T:AsmResolver.DotNet.ReferenceImporter"/> class is used to
            import new type references into the module. This method only serves as a way to easily get all the type
            references that were imported during the last compilation or assembly process.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetImportedMemberReferences">
            <summary>
            Obtains a list of member references that were imported into the module.
            </summary>
            <returns>The type references.</returns>
            <remarks>
            The return value of this method does not update when the <see cref="T:AsmResolver.DotNet.ReferenceImporter"/> class is used to
            import new member references into the module. This method only serves as a way to easily get all the member
            references that were imported during the last compilation or assembly process.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetAllTypes">
            <summary>
            Enumerates all types (including nested types) defined in the module.
            </summary>
            <returns>The types.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetModuleConstructor">
            <summary>
            Gets the module static constructor of this metadata image. That is, the first method that is executed
            upon loading the .NET module.
            </summary>
            <returns>The module constructor, or <c>null</c> if none is present.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetOrCreateModuleConstructor">
            <summary>
            Gets or creates the module static constructor of this metadata image. That is, the first method that is
            executed upon loading the .NET module.
            </summary>
            <returns>The module constructor.</returns>
            <remarks>
            If the static constructor was not present in the image, the new one is automatically added.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetModuleType">
            <summary>
            Obtains the global scope type of the .NET module.
            </summary>
            <returns>The module type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetOrCreateModuleType">
            <summary>
            Obtains or creates the global scope type of the .NET module.
            </summary>
            <returns>The module type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetName">
            <summary>
            Obtains the name of the module definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetMvid">
            <summary>
            Obtains the MVID of the module definition.
            </summary>
            <returns>The MVID.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.Mvid"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetEncId">
            <summary>
            Obtains the edit-and-continue identifier of the module definition.
            </summary>
            <returns>The identifier.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.EncId"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetEncBaseId">
            <summary>
            Obtains the edit-and-continue base identifier of the module definition.
            </summary>
            <returns>The identifier.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.EncBaseId"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetTopLevelTypes">
            <summary>
            Obtains the list of top-level types the module defines.
            </summary>
            <returns>The types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.TopLevelTypes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetAssemblyReferences">
            <summary>
            Obtains the list of references to .NET assemblies that the module uses.
            </summary>
            <returns>The references to the assemblies..</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.AssemblyReferences"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetModuleReferences">
            <summary>
            Obtains the list of references to external modules that the module uses.
            </summary>
            <returns>The references to the modules.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.ModuleReferences"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetFileReferences">
            <summary>
            Obtains the list of references to external files that the module uses.
            </summary>
            <returns>The references to the files.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.FileReferences"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetResources">
            <summary>
            Obtains the list of resources stored in the module.
            </summary>
            <returns>The resources.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.Resources"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetExportedTypes">
            <summary>
            Obtains the list of types that are redirected to another external module.
            </summary>
            <returns>The exported types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.ExportedTypes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetRuntimeVersion">
            <summary>
            Obtains the version string of the runtime.
            </summary>
            <returns>The runtime version.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.RuntimeVersion"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetManagedEntryPoint">
            <summary>
            Obtains the managed entry point of this module.
            </summary>
            <returns>The entry point.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.ManagedEntryPoint"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetNativeResources">
            <summary>
            Obtains the native win32 resources directory of the underlying PE image (if available).
            </summary>
            <returns>The resources directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.NativeResourceDirectory"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetDebugData">
            <summary>
            Obtains the native debug data directory of the underlying PE image (if available).
            </summary>
            <returns>The debug directory.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.DebugData"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.GetDefaultImporter">
            <summary>
            Obtains the default reference importer assigned to this module.
            </summary>
            <returns>The importer.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleDefinition.DefaultImporter"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.DetectTargetRuntime">
            <summary>
            Detects the runtime that this module targets.
            </summary>
            <remarks>
            This method is called to initialize the <see cref="P:AsmResolver.DotNet.ModuleDefinition.OriginalTargetRuntime"/> property.
            It should be called before the assembly resolver is initialized.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.CreateAssemblyResolver(AsmResolver.IO.IFileService)">
            <summary>
            Creates an assembly resolver based on the corlib reference.
            </summary>
            <returns>The resolver.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.AsmResolver#DotNet#IImportable#IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the module using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported module.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.String)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.IO.Stream)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to an output stream.
            </summary>
            <param name="outputStream">The output stream of the manifest module file.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.String,AsmResolver.DotNet.Builder.IPEImageBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.IO.Stream,AsmResolver.DotNet.Builder.IPEImageBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to an output stream.
            </summary>
            <param name="outputStream">The output stream of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.String,AsmResolver.DotNet.Builder.IPEImageBuilder,AsmResolver.PE.Builder.IPEFileBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to the file system.
            </summary>
            <param name="filePath">The output path of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <param name="fileBuilder">The engine to use for reconstructing a PE file.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(System.IO.Stream,AsmResolver.DotNet.Builder.IPEImageBuilder,AsmResolver.PE.Builder.IPEFileBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to an output stream.
            </summary>
            <param name="outputStream">The output stream of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <param name="fileBuilder">The engine to use for reconstructing a PE file.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Builder.IPEImageBuilder,AsmResolver.PE.Builder.IPEFileBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and writes it to the file system.
            </summary>
            <param name="writer">The output stream of the manifest module file.</param>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <param name="fileBuilder">The engine to use for reconstructing a PE file.</param>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.ToPEImage">
            <summary>
            Rebuilds the .NET module to a portable executable file and returns the IPEImage.
            </summary>
            <returns>IPEImage built using <see cref="T:AsmResolver.DotNet.Builder.ManagedPEImageBuilder"/> by default</returns>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleDefinition.ToPEImage(AsmResolver.DotNet.Builder.IPEImageBuilder)">
            <summary>
            Rebuilds the .NET module to a portable executable file and returns the IPEImage.
            </summary>
            <param name="imageBuilder">The engine to use for reconstructing a PE image.</param>
            <returns>IPEImage built by the specified IPEImageBuilder</returns>
            <exception cref="T:System.AggregateException">Occurs when the construction of the image threw exceptions.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.ModuleReference">
            <summary>
            Represents a reference to an external module. This module can be managed or unmanaged.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the module reference with a metadata token.
            </summary>
            <param name="token">The metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.#ctor(AsmResolver.Utf8String)">
            <summary>
            Creates a new reference to an external module.
            </summary>
            <param name="name">The file name of the module.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleReference.Name">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <remarks>
            This property corresponds to the Name column in the module definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ModuleReference.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ModuleReference.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the module reference using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported module.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.GetName">
            <summary>
            Obtains the name of the module.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleReference.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ModuleReference.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ModuleReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.ParameterDefinition">
            <summary>
            Represents a single definition for a parameter that is defined by a method in a .NET executable file.
            </summary>
            <remarks>
            A method is not required to provide parameter definitions for all its parameters that are defined by its
            signature. Parameter definitions only provide additional information, such as a name, attributes or a default
            value.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new parameter definition.
            </summary>
            <param name="token">The token of the parameter definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.#ctor(AsmResolver.Utf8String)">
            <summary>
            Creates a new parameter definition using the provided name.
            </summary>
            <param name="name">The name of the new parameter.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.#ctor(System.UInt16,AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterAttributes)">
            <summary>
            Creates a new parameter definition using the provided name and attributes.
            </summary>
            <param name="sequence">The sequence number of the new parameter.</param>
            <param name="name">The name of the new parameter.</param>
            <param name="attributes">The attributes to assign to the parameter.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <remarks>
            This property corresponds to the Name column in the parameter definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Sequence">
            <summary>
            Gets or sets the index for which this parameter definition provides information for.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the parameter definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.IsIn">
            <summary>
            Gets or sets a value indicating whether the parameter is marked as an input parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.IsOut">
            <summary>
            Gets or sets a value indicating whether the parameter is marked as an output parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.IsOptional">
            <summary>
            Gets or sets a value indicating whether the parameter is marked as an optional parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.HasDefault">
            <summary>
            Gets or sets a value indicating whether the parameter has a default value.
            </summary>
            <remarks>
            For valid .NET binaries, when <see cref="P:AsmResolver.DotNet.ParameterDefinition.Constant"/> is not <c>null</c>, this flag should be set.
            However, assigning a value to this property does not automatically update the <see cref="P:AsmResolver.DotNet.ParameterDefinition.Constant"/>
            property, nor does it reflect whether <see cref="P:AsmResolver.DotNet.ParameterDefinition.Constant"/> has a value or not.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.HasFieldMarshal">
            <summary>
            Gets or sets a value indicating whether the parameter is marked as an output parameter.
            </summary>
            <remarks>
            For valid .NET binaries, when <see cref="P:AsmResolver.DotNet.ParameterDefinition.MarshalDescriptor"/> is not <c>null</c>, this flag should be set.
            However, assigning a value to this property does not automatically update the <see cref="P:AsmResolver.DotNet.ParameterDefinition.MarshalDescriptor"/>
            property, nor does it reflect whether <see cref="P:AsmResolver.DotNet.ParameterDefinition.MarshalDescriptor"/> has a value or not.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Method">
            <summary>
            Gets the method that defines the parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.Constant">
            <inheritdoc />
            <remarks>
            For valid .NET binaries, when the value of this property is not <c>null</c>, the <see cref="P:AsmResolver.DotNet.ParameterDefinition.HasDefault"/>
            flag should be set. However, assigning a new value to this property does not automatically update the value
            of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.HasDefault"/> property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.ParameterDefinition.MarshalDescriptor">
            <inheritdoc />
            <remarks>
            For valid .NET binaries, when the value of this property is not <c>null</c>, the <see cref="P:AsmResolver.DotNet.ParameterDefinition.HasFieldMarshal"/>
            flag should be set. However, assigning a new value to this property does not automatically update the value
            of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.HasFieldMarshal"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.GetName">
            <summary>
            Obtains the name of the parameter.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.GetMethod">
            <summary>
            Obtains the method that owns the parameter.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.Method"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.GetConstant">
            <summary>
            Obtains the constant value assigned to the parameter definition.
            </summary>
            <returns>The constant.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.Constant"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.GetMarshalDescriptor">
            <summary>
            Obtains the marshal descriptor value assigned to the parameter definition.
            </summary>
            <returns>The marshal descriptor.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.ParameterDefinition.MarshalDescriptor"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.ParameterDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.PropertyDefinition">
            <summary>
            Represents a single property in a type definition of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new property definition.
            </summary>
            <param name="token">The token of the property.</param>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyAttributes,AsmResolver.DotNet.Signatures.PropertySignature)">
            <summary>
            Creates a new property definition.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="attributes">The attributes.</param>
            <param name="signature">The signature of the property.</param>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the field.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.IsSpecialName">
            <summary>
            Gets or sets a value indicating the property uses a special name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.IsRuntimeSpecialName">
            <summary>
            Gets or sets a value indicating the property uses a special name used by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.HasDefault">
            <summary>
            Gets or sets a value indicating the property has a default value.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <remarks>
            This property corresponds to the Name column in the property definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Signature">
            <summary>
            Gets or sets the signature of the property. This includes the property type, as well as any parameters the
            property might define.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.DeclaringType">
            <summary>
            Gets the type that defines the property.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Semantics">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.Constant">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.GetMethod">
            <summary>
            Gets the method definition representing the first get accessor of this property definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.PropertyDefinition.SetMethod">
            <summary>
            Gets the method definition representing the first set accessor of this property definition.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.SetSemanticMethods(AsmResolver.DotNet.MethodDefinition,AsmResolver.DotNet.MethodDefinition)">
            <summary>
            Clear <see cref="P:AsmResolver.DotNet.PropertyDefinition.Semantics"/> and apply these methods to the property definition.
            </summary>
            <param name="getMethod">The method definition representing the get accessor of this property definition.</param>
            <param name="setMethod">The method definition representing the set accessor of this property definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetName">
            <summary>
            Obtains the name of the property definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetSignature">
            <summary>
            Obtains the signature of the property definition.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetDeclaringType">
            <summary>
            Obtains the declaring type of the property definition.
            </summary>
            <returns>The declaring type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetSemantics">
            <summary>
            Obtains the methods associated to this property definition.
            </summary>
            <returns>The method semantic objects.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.Semantics"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.GetConstant">
            <summary>
            Obtains the constant value assigned to the property definition.
            </summary>
            <returns>The constant.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.PropertyDefinition.Constant"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.PropertyDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.ReferenceImporter">
            <summary>
            Provides a mechanism for creating references to members defined in external .NET modules.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.#ctor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new reference importer.
            </summary>
            <param name="module">The module to import references to.</param>
        </member>
        <member name="P:AsmResolver.DotNet.ReferenceImporter.TargetModule">
            <summary>
            Gets the module to imports references to.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportScope(AsmResolver.DotNet.IResolutionScope)">
            <summary>
            Imports a resolution scope.
            </summary>
            <param name="scope">The resolution scope to import.</param>
            <returns>The imported resolution scope.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportImplementation(AsmResolver.DotNet.IImplementation)">
            <summary>
            Imports an implementation reference.
            </summary>
            <param name="implementation">The implementation reference to import.</param>
            <returns>The imported implementation reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportAssembly(AsmResolver.DotNet.AssemblyDescriptor)">
            <summary>
            Imports a reference to an assembly.
            </summary>
            <param name="assembly">The assembly to import.</param>
            <returns>The imported assembly.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportFile(AsmResolver.DotNet.FileReference)">
            <summary>
            Imports a file reference.
            </summary>
            <param name="file">The file to import.</param>
            <returns>The imported file.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportModule(AsmResolver.DotNet.ModuleReference)">
            <summary>
            Imports a reference to a module.
            </summary>
            <param name="module">The module to import.</param>
            <returns>The imported module.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Imports a reference to a type into the module.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportTypeOrNull(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Imports a reference to a type into the module.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type, or <c>null</c> if the provided type was <c>null</c>.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(AsmResolver.DotNet.TypeDefinition)">
            <summary>
            Imports a reference to a type definition into the module.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(AsmResolver.DotNet.TypeReference)">
            <summary>
            Imports a reference to a type into the module.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(AsmResolver.DotNet.TypeSpecification)">
            <summary>
            Imports a reference to a type specification into the module.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(AsmResolver.DotNet.ExportedType)">
            <summary>
            Imports a forwarded type.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportTypeSignature(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Imports the given type signature into the target module.
            </summary>
            <param name="type">The type signature to import.</param>
            <returns>The imported type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportTypeSignatureOrNull(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Imports the given type signature into the target module.
            </summary>
            <param name="type">The type signature to import.</param>
            <returns>The imported type signature, or <c>nulL</c> if the provided type signature was <c>null</c>.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportType(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a type reference or specification.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportTypeSignature(System.Type)">
            <summary>
            Imports a <see cref="T:System.Type"/> as a type signature.
            </summary>
            <param name="type">The type to import.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethod(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Imports a reference to- or an instantiation of a method into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method.</returns>
            <exception cref="T:System.ArgumentException">Occurs when a method is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethodOrNull(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Imports a reference to- or an instantiation of a method into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method, or <c>null</c> if no method was provided..</returns>
            <exception cref="T:System.ArgumentException">Occurs when a method is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethod(AsmResolver.DotNet.IMethodDefOrRef)">
            <summary>
            Imports a reference to a method into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method.</returns>
            <exception cref="T:System.ArgumentException">Occurs when a method is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethodOrNull(AsmResolver.DotNet.IMethodDefOrRef)">
            <summary>
            Imports a reference to- or an instantiation of a method into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method, or <c>null</c> if no method was provided..</returns>
            <exception cref="T:System.ArgumentException">Occurs when a method is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethodSignature(AsmResolver.DotNet.Signatures.MethodSignature)">
            <summary>
            Imports the provided method signature into the module.
            </summary>
            <param name="signature">The method signature to import.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportGenericInstanceMethodSignature(AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature)">
            <summary>
            Imports the provided generic instance method signature into the module.
            </summary>
            <param name="signature">The method signature to import.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportLocalVariablesSignature(AsmResolver.DotNet.Signatures.LocalVariablesSignature)">
            <summary>
            Imports the provided local variables signature into the module.
            </summary>
            <param name="signature">The method signature to import.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethod(AsmResolver.DotNet.MethodSpecification)">
            <summary>
            Imports a reference to a generic method instantiation into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportMethod(System.Reflection.MethodBase)">
            <summary>
            Imports a reference to a method into the module.
            </summary>
            <param name="method">The method to import.</param>
            <returns>The imported method.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportField(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Imports a reference to a field into the module.
            </summary>
            <param name="field">The field to import.</param>
            <returns>The imported field.</returns>
            <exception cref="T:System.ArgumentException">Occurs when a field is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportFieldSignature(AsmResolver.DotNet.Signatures.FieldSignature)">
            <summary>
            Imports a field signature into the module.
            </summary>
            <param name="signature">The signature to import.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportField(System.Reflection.FieldInfo)">
            <summary>
            Imports a reference to a field into the module.
            </summary>
            <param name="field">The field to import.</param>
            <returns>The imported field.</returns>
            <exception cref="T:System.ArgumentException">Occurs when a field is not added to a type.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.ReferenceImporter.ImportPropertySignature(AsmResolver.DotNet.Signatures.PropertySignature)">
            <summary>
            Imports a signature of a property into the module.
            </summary>
            <param name="signature">The signature to import.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.ReflectionAssemblyDescriptor">
            <summary>
            Provides a wrapper for <see cref="T:System.Reflection.Assembly"/> that maps properties declared by <see cref="T:System.Reflection.Assembly"/> onto an
            <see cref="T:AsmResolver.DotNet.AssemblyDescriptor"/> instance. This can be used for importing assemblies referenced by System.Reflection.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.#ctor(AsmResolver.DotNet.ModuleDefinition,System.Reflection.AssemblyName)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.ReflectionAssemblyDescriptor"/> class.
            </summary>
            <param name="parentModule">The module that imports this assembly.</param>
            <param name="assemblyName">The assembly name to import.</param>
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.GetCulture">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.ReflectionAssemblyDescriptor.IsCorLib">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.GetPublicKeyToken">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.ReflectionAssemblyDescriptor.Resolve">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.DefaultResourceDataSerializer">
            <summary>
            Provides a default implementation of the <see cref="T:AsmResolver.DotNet.Resources.IResourceDataSerializer"/> interface, that represents
            custom user-defined data as byte arrays.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.DefaultResourceDataSerializer.Instance">
            <summary>
            Gets the default instance of the <see cref="T:AsmResolver.DotNet.Resources.DefaultResourceDataSerializer"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.DefaultResourceDataSerializer.Serialize(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Resources.ResourceType,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.DefaultResourceDataSerializer.Deserialize(AsmResolver.IO.BinaryStreamReader@,AsmResolver.DotNet.Resources.ResourceType)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.IntrinsicResourceType">
            <summary>
            Represents an intrinsic resource data type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.IntrinsicResourceType.Get(AsmResolver.DotNet.Resources.ResourceTypeCode)">
            <summary>
            Gets the instance of an intrinsic resource data type.
            </summary>
            <param name="code">The type code to get the resource type from.</param>
            <returns>The resource type.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the provided type code is not an intrinsic type.</exception>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.IntrinsicResourceType.TypeCode">
            <summary>
            Gets the type code associated to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.IntrinsicResourceType.FullName">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.IResourceDataSerializer">
            <summary>
            Provides members for serializing and deserializing resource data of user-defined types.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.IResourceDataSerializer.Serialize(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Resources.ResourceType,System.Object)">
            <summary>
            Writes a resource object to the output stream.
            </summary>
            <param name="writer">The output stream to write to.</param>
            <param name="type">The type of the resource.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.IResourceDataSerializer.Deserialize(AsmResolver.IO.BinaryStreamReader@,AsmResolver.DotNet.Resources.ResourceType)">
            <summary>
            Reads a resource object from the input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="type">The type of the resource.</param>
        </member>
        <member name="T:AsmResolver.DotNet.Resources.KnownResourceReaderNames">
            <summary>
            Provides a list of known resource reader class names.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.KnownResourceReaderNames.ResourceReader_mscorlib_v2_0_0_0">
            <summary>
            Gets the full name of the default resource reader class that is used by assemblies
            targeting .NET Framework 2.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.KnownResourceReaderNames.ResourceReader_mscorlib_v4_0_0_0">
            <summary>
            Gets the full name of the default resource reader class that is used by assemblies
            targeting .NET Framework 4.0 and newer.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.KnownResourceReaderNames.DeserializingResourceReader_SystemResourcesExtensions_v4_0_0_0">
            <summary>
            Gets the full name of the resource reader class that is used by assemblies
            targeting .NET Framework 4.0 or newer, and supports deserializing of user-defined types.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.KnownResourceReaderNames.RuntimeResourceSet">
            <summary>
            Gets the name of the default resource set type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.KnownResourceReaderNames.RuntimeResourceSet_SystemResourcesExtensions_v4_0_0_0">
            <summary>
            Gets the name of the resource set type that supports deserialization of user-defined types.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Resources.ResourceManagerHeader">
            <summary>
            Represents the header of a resource set file.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceManagerHeader.Magic">
            <summary>
            Gets the magic number that every resource set starts with.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceManagerHeader.Default_v2_0_0_0">
            <summary>
            Gets the default header used for resource set files targeting .NET Framework 2.0.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceManagerHeader.Default_v4_0_0_0">
            <summary>
            Gets the default header used for resource set files targeting .NET Framework 4.0 and higher.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceManagerHeader.Deserializing_v4_0_0_0">
            <summary>
            Gets the default header used for resource set files targeting .NET Framework 4.0 and higher, with
            the System.Resources.Extensions.DeserializingResourceReader class as reader.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceManagerHeader.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Resources.ResourceManagerHeader"/>.
            </summary>
            <param name="resourceReaderName">The full name of the type that is responsible for reading the resource set file.</param>
            <param name="resourceSetName">The full name of the type that is responsible for representing the resource set.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceManagerHeader.HeaderSize">
            <summary>
            Gets the number of bytes that make up the resource manager header.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceManagerHeader.ResourceReaderName">
            <summary>
            Gets the full name of the type that is responsible for reading the resource set file.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceManagerHeader.ResourceSetName">
            <summary>
            Gets the full name of the type that is responsible for representing the resource set.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceManagerHeader.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a resource manager header from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns></returns>
            <exception cref="T:System.FormatException">Occurs when an invalid magic number is read, or one of the strings is encoded improperly.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported header version was encountered.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceManagerHeader.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceManagerHeader.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.ResourceSet">
            <summary>
            Represents a set of resources embedded into a ".resources" file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.#ctor">
            <summary>
            Creates a new empty resource set, targeting the default <c>System.Resources.ResourceReader</c> and
            <c>System.Resources.RuntimeResourceSet</c> back-end classes, and using file format 2.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.#ctor(AsmResolver.DotNet.Resources.ResourceManagerHeader)">
            <summary>
            Creates a new empty resource set using file format 2.
            </summary>
            <param name="managerHeader">The header to target.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.#ctor(AsmResolver.DotNet.Resources.ResourceManagerHeader,System.Int32)">
            <summary>
            Creates a new empty resource set.
            </summary>
            <param name="managerHeader">The header to target.</param>
            <param name="formatVersion">The version of the file format.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceSet.ManagerHeader">
            <summary>
            Gets or sets the resource manager header of the set.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceSet.FormatVersion">
            <summary>
            Gets the version of the file format that is used for this resource set.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a resource set from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.FromReader(AsmResolver.IO.BinaryStreamReader@,AsmResolver.DotNet.Resources.IResourceDataSerializer)">
            <summary>
            Reads a resource set from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="serializer">The object responsible for deserializing user-defined types.</param>
            <returns>The resource set.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.Initialize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <summary>
            Serializes the resource set and writes it to the provided output stream.
            </summary>
            <param name="writer">The output stream.</param>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported version is specified in <see cref="P:AsmResolver.DotNet.Resources.ResourceSet.FormatVersion"/>.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSet.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Resources.IResourceDataSerializer)">
            <summary>
            Serializes the resource set and writes it to the provided output stream.
            </summary>
            <param name="writer">The output stream.</param>
            <param name="serializer">The object responsible for serializing user-defined types.</param>
            <exception cref="T:System.NotSupportedException">Occurs when an invalid or unsupported version is specified in <see cref="P:AsmResolver.DotNet.Resources.ResourceSet.FormatVersion"/>.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.Resources.ResourceSetEntry">
            <summary>
            Represents a single element in a resource set.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.#ctor(System.String,AsmResolver.DotNet.Resources.ResourceTypeCode)">
            <summary>
            Creates a new empty resource set entry.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="typeCode">The type of the element's value.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.#ctor(System.String,AsmResolver.DotNet.Resources.ResourceType)">
            <summary>
            Creates a new empty resource set entry.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="type">The type of the element's value.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.#ctor(System.String,AsmResolver.DotNet.Resources.ResourceTypeCode,System.Object)">
            <summary>
            Creates a new resource set entry.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="typeCode">The type of the element's value.</param>
            <param name="data">The value of the element.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.#ctor(System.String,AsmResolver.DotNet.Resources.ResourceType,System.Object)">
            <summary>
            Creates a new resource set entry.
            </summary>
            <param name="name">The name of the resource.</param>
            <param name="type">The type of the element's value.</param>
            <param name="data">The value of the element.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceSetEntry.Name">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceSetEntry.Type">
            <summary>
            Gets the type code associated to the element.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceSetEntry.Data">
            <summary>
            Gets the value of this resource entry.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.GetData">
            <summary>
            Obtains the value of the resource entry.
            </summary>
            <returns>The value.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.Resources.ResourceSetEntry.Data"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntry.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntryHeader.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceSetEntryHeader.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.ResourceType">
            <summary>
            Represents a resource data type in a resource set.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.ResourceType.FullName">
            <summary>
            Gets the full name of the type that was referenced.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.ResourceType.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.ResourceTypeCode">
            <summary>
            Provides members describing all possible type codes that can be used by entries in a resource set.
            </summary>
            <remarks>
            Reference: https://github.com/dotnet/runtime/blob/9d771a26f058a9fa4a49850d4778bbab7aa79a22/src/libraries/System.Private.CoreLib/src/System/Resources/ResourceTypeCode.cs
            </remarks>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Null">
            <summary>
            Indicates the value of the entry is <c>null</c>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.String">
             <summary>
             Indicates the value of the entry is an instance of <see cref="T:System.String"/>.
             </summary>
            
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Boolean">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Char">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Byte">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.SByte">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Int16">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.UInt16">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Int32">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.UInt32">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Int64">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.UInt64">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Single">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Double">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Decimal">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.DateTime">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.TimeSpan">
            <summary>
            Indicates the value of the entry is an instance of <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.ByteArray">
            <summary>
            Indicates the value of the entry is a byte array.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.Stream">
            <summary>
            Indicates the value of the entry is a stream.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Resources.ResourceTypeCode.StartOfUserTypes">
            <summary>
            Indicates the starting value for entries that are on instance of a user defined type.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Resources.SerializedResourceSet">
            <summary>
            Represents a serialized resource set that was read from an existing file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.SerializedResourceSet.#ctor(AsmResolver.IO.BinaryStreamReader,AsmResolver.DotNet.Resources.IResourceDataSerializer)">
            <summary>
            Reads a resource set from an input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <param name="dataSerializer">The serializer to use for deserializing instances of user-defined types.</param>
            <exception cref="T:System.FormatException">Occurs when an invalid format was recognized.</exception>
            <exception cref="T:System.NotSupportedException">Occurs when an unsupported resource reader or resource set type is specified in the file.</exception>
        </member>
        <member name="P:AsmResolver.DotNet.Resources.SerializedResourceSet.Count">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Resources.SerializedResourceSet.Initialize">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.SerializedResourceSetEntry">
            <summary>
            Represents an existing entry in a <see cref="T:AsmResolver.DotNet.Resources.SerializedResourceSet"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.SerializedResourceSetEntry.#ctor(AsmResolver.DotNet.Resources.SerializedResourceSet,System.String,AsmResolver.DotNet.Resources.ResourceType,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Initializes a new <see cref="T:AsmResolver.DotNet.Resources.SerializedResourceSetEntry"/>.
            </summary>
            <param name="parentSet">The parent set that this entry is defined in.</param>
            <param name="name">The name of the entry.</param>
            <param name="type">The type of the value.</param>
            <param name="contentsReader">The input stream to use for reading the raw data of the value.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.SerializedResourceSetEntry.GetData">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Resources.UserDefinedResourceType">
            <summary>
            Represents a user-defined resource data type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Resources.UserDefinedResourceType.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Resources.UserDefinedResourceType.FullName">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.SecurityDeclaration">
            <summary>
            Provides a set of security attributes assigned to a metadata member.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.SecurityDeclaration.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes the <see cref="T:AsmResolver.DotNet.SecurityDeclaration"/> with a metadata token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.SecurityDeclaration.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityAction,AsmResolver.DotNet.Signatures.Security.PermissionSetSignature)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.SecurityDeclaration"/> class.
            </summary>
            <param name="action"></param>
            <param name="permissionSet"></param>
        </member>
        <member name="P:AsmResolver.DotNet.SecurityDeclaration.Action">
            <summary>
            Gets the action that is applied.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.SecurityDeclaration.Parent">
            <summary>
            Gets the member that is assigned the permission set.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.SecurityDeclaration.AsmResolver#Collections#IOwnedCollectionElement{AsmResolver#DotNet#IHasSecurityDeclaration}#Owner">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.SecurityDeclaration.PermissionSet">
            <summary>
            Gets or sets the collection of security attributes.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.SecurityDeclaration.GetParent">
            <summary>
            Obtains the member that is assigned the permission set.
            </summary>
            <returns>The parent.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.SecurityDeclaration.Parent"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.SecurityDeclaration.GetPermissionSet">
            <summary>
            Obtains the assigned permission set.
            </summary>
            <returns>The permission set.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.SecurityDeclaration.PermissionSet"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.DefaultMethodBodyReader">
            <summary>
            Provides a default implementation of a <see cref="T:AsmResolver.DotNet.Serialized.IMethodBodyReader"/>, which reads CIL method bodies using the
            <see cref="T:AsmResolver.PE.DotNet.Cil.CilRawMethodBody"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.DefaultMethodBodyReader.ReadMethodBody(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.DotNet.MethodDefinition,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.DirectoryNetModuleResolver">
            <summary>
            Provides a basic implementation for a net module resolver, that searches for the net module in a directory.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.DirectoryNetModuleResolver.#ctor(System.String,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Creates a new net module resolver that searches for the module in a directory.
            </summary>
            <param name="directory">The path to the search directory.</param>
            <param name="readerParameters">The parameters to use for reading a module.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.DirectoryNetModuleResolver.Directory">
            <summary>
            Gets the search directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.DirectoryNetModuleResolver.ReaderParameters">
            <summary>
            Gets the parameters to be used for reading a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.DirectoryNetModuleResolver.Resolve(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.IMethodBodyReader">
            <summary>
            Provides members for reading a method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.IMethodBodyReader.ReadMethodBody(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.DotNet.MethodDefinition,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow@)">
            <summary>
            Reads a method body
            </summary>
            <param name="context">The reader context.</param>
            <param name="owner">The owner of the method body.</param>
            <param name="row">The metadata row of the owner method.</param>
            <returns>The method, or <c>null</c> if none was provided.</returns>
            <remarks>
            Implementations should never access <see cref="P:AsmResolver.DotNet.MethodDefinition.MethodBody"/> or
            <see cref="P:AsmResolver.DotNet.MethodDefinition.CilMethodBody"/>, as this might result in an infinite recursive loop.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.INetModuleResolver">
            <summary>
            Provides members for resolving a reference to a net module. 
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.INetModuleResolver.Resolve(System.String)">
            <summary>
            Resolves a net module by its name.
            </summary>
            <param name="name">The name of the module to resolve.</param>
            <returns>The module, or <c>null</c> if the module could not be resolved.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.ModuleReaderContext">
            <summary>
            Provides a context in which a .NET module parser exists in. This includes the original PE image, as well as the
            module reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderContext.#ctor(AsmResolver.PE.IPEImage,AsmResolver.DotNet.Serialized.SerializedModuleDefinition,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Serialized.ModuleReaderContext"/> class.
            </summary>
            <param name="image">The original PE image to read from.</param>
            <param name="parentModule">The root module object.</param>
            <param name="parameters">The module reader parameters.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.Image">
            <summary>
            Gets the original PE image to read from.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.ParentModule">
            <summary>
            Gets the root module object that is being read.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.Metadata">
            <summary>
            Gets the original metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.TablesStream">
            <summary>
            Gets the main tables stream in the metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.TablesStreamIndex">
            <summary>
            Gets the original index of the tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.BlobStream">
            <summary>
            Gets the main blob stream in the metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.BlobStreamIndex">
            <summary>
            Gets the original index of the blob stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.GuidStream">
            <summary>
            Gets the main GUID stream in the metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.GuidStreamIndex">
            <summary>
            Gets the original index of the GUID stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.StringsStream">
            <summary>
            Gets the main strings stream in the metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.StringsStreamIndex">
            <summary>
            Gets the original index of the strings stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.UserStringsStream">
            <summary>
            Gets the main user-strings stream in the metadata directory.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.UserStringsStreamIndex">
            <summary>
            Gets the original index of the user-strings stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderContext.Parameters">
            <summary>
            Gets the reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderContext.MarkAsFatal">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderContext.RegisterException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.ModuleReaderParameters">
            <summary>
            Provides parameters for the reading process of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderParameters.#ctor">
            <summary>
            Initializes the default module read parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderParameters.#ctor(AsmResolver.IErrorListener)">
            <summary>
            Initializes the module read parameters with an error listener.
            </summary>
            <param name="errorListener">The object responsible for recording parser errors.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderParameters.#ctor(System.String)">
            <summary>
            Initializes the module read parameters with a working directory.
            </summary>
            <param name="workingDirectory">The working directory of the modules to read.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.ModuleReaderParameters.#ctor(System.String,AsmResolver.IErrorListener)">
            <summary>
            Initializes the module read parameters with a working directory.
            </summary>
            <param name="workingDirectory">The working directory of the modules to read.</param>
            <param name="errorListener">The object responsible for recording parser errors.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderParameters.WorkingDirectory">
            <summary>
            Gets the working directory of the module to read.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderParameters.ModuleResolver">
            <summary>
            Gets or sets the object used for resolving a net module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderParameters.MethodBodyReader">
            <summary>
            Gets or sets the method body parser.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderParameters.FieldRvaDataReader">
            <summary>
            Gets or sets the field initial value reader.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.ModuleReaderParameters.PEReaderParameters">
            <summary>
            Gets or sets the parameters used for parsing a PE file into a PE image.
            </summary>
            <remarks>
            This property is ignored when the module was read from a <see cref="T:AsmResolver.PE.IPEImage"/>
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.AssemblyDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyDefinitionRow@,AsmResolver.DotNet.Serialized.SerializedModuleDefinition)">
            <summary>
            Creates an assembly definition from an assembly metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the assembly for.</param>
            <param name="row">The metadata table row to base the assembly definition on.</param>
            <param name="manifestModule">The instance containing the manifest module definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetCulture">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetPublicKey">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetModules">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.GetSecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyDefinition.TryGetTargetFramework(AsmResolver.DotNet.DotNetRuntimeInfo@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedAssemblyReference">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.AssemblyReference"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyReference.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.AssemblyReferenceRow@)">
            <summary>
            Creates an assembly reference from an assembly reference metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the reference for.</param>
            <param name="row">The metadata table row to base the assembly reference on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyReference.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyReference.GetCulture">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyReference.GetPublicKeyOrToken">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedAssemblyReference.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedClassLayout">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ClassLayout"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedClassLayout.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ClassLayoutRow@)">
            <summary>
            Creates a class layout from a class layout metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the class layout for.</param>
            <param name="row">The metadata table row to base the class layout on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedClassLayout.GetParent">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedConstant">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.Constant"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedConstant.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ConstantRow@)">
            <summary>
            Creates a constant from a constant metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the constant for.</param>
            <param name="row">The metadata table row to base the constant on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedConstant.GetParent">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedConstant.GetValue">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedCustomAttribute">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.CustomAttribute"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedCustomAttribute.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.CustomAttributeRow@)">
            <summary>
            Creates a custom attribute from a custom attribute metadata row.
            </summary>
            <param name="context">The reader context..</param>
            <param name="token">The token to initialize the custom attribute for.</param>
            <param name="row">The metadata table row to base the custom attribute on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedCustomAttribute.GetParent">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedCustomAttribute.GetConstructor">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedCustomAttribute.GetSignature">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedEventDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.EventDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.EventDefinitionRow@)">
            <summary>
            Creates a event definition from a event metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the event for.</param>
            <param name="row">The metadata table row to base the event definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.GetEventType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.GetSemantics">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedEventDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedExportedType">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ExportedType"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedExportedType.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ExportedTypeRow@)">
            <summary>
            Creates a exported type from a exported type metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the exported type for.</param>
            <param name="row">The metadata table row to base the exported type on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedExportedType.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedExportedType.GetNamespace">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedExportedType.GetImplementation">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedExportedType.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedFieldDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.FieldDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FieldDefinitionRow@)">
            <summary>
            Creates a field definition from a field metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the field for.</param>
            <param name="row">The metadata table row to base the field definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetConstant">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetMarshalDescriptor">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetImplementationMap">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetFieldRva">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetFieldOffset">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFieldDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedFileReference">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.FileReference"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFileReference.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.FileReferenceRow@)">
            <summary>
            Creates a file reference from a file reference metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the reference for.</param>
            <param name="row">The metadata table row to base the member reference on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFileReference.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFileReference.GetHashValue">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedFileReference.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedGenericParameter">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.GenericParameter"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameter.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterRow@)">
            <summary>
            Creates a generic parameter from a generic parameter metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the generic parameter for.</param>
            <param name="row">The metadata table row to base the generic parameter on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameter.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameter.GetOwner">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameter.GetConstraints">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameter.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedGenericParameterConstraint">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.GenericParameterConstraint"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameterConstraint.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.GenericParameterConstraintRow@)">
            <summary>
            Creates a generic parameter constraint from a generic parameter constraint metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the constraint for.</param>
            <param name="row">The metadata table row to base the constraint on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameterConstraint.GetOwner">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameterConstraint.GetConstraint">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedGenericParameterConstraint.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedImplementationMap">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ImplementationMap"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedImplementationMap.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ImplementationMapRow@)">
            <summary>
            Creates a member reference from an implementation map metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the mapping for.</param>
            <param name="row">The metadata table row to base the mapping on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedImplementationMap.GetMemberForwarded">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedImplementationMap.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedImplementationMap.GetScope">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedInterfaceImplementation">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.InterfaceImplementation"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedInterfaceImplementation.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.InterfaceImplementationRow@)">
            <summary>
            Creates a interface implementation from an interface implementation metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the interface implementation for.</param>
            <param name="row">The metadata table row to base the interface implementation on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedInterfaceImplementation.GetClass">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedInterfaceImplementation.GetInterface">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedInterfaceImplementation.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedManifestResource">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ManifestResource"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedManifestResource.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ManifestResourceRow@)">
            <summary>
            Creates a manifest resource from a manifest resource metadata row.
            </summary>
            <param name="context">The module that contains the resource.</param>
            <param name="token">The token to initialize the resource for.</param>
            <param name="row">The metadata table row to base the resource \on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedManifestResource.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedManifestResource.GetImplementation">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedManifestResource.GetEmbeddedDataSegment">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedManifestResource.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedMemberReference">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.MemberReference"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMemberReference.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MemberReferenceRow@)">
            <summary>
            Creates a member reference from a member reference metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the reference for.</param>
            <param name="row">The metadata table row to base the member reference on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMemberReference.GetParent">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMemberReference.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMemberReference.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMemberReference.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedMethodDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.MethodDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodDefinitionRow@)">
            <summary>
            Creates a method definition from a method metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the method for.</param>
            <param name="row">The metadata table row to base the method definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetSecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetBody">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetImplementationMap">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetGenericParameters">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetSemantics">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodDefinition.GetExportInfo">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedMethodSemantics">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.MethodSemantics"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSemantics.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSemanticsRow@)">
            <summary>
            Creates a method semantics object from a method semantics row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the semantics for.</param>
            <param name="row">The metadata table row to base the semantics on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSemantics.GetMethod">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSemantics.GetAssociation">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedMethodSpecification">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.MethodSpecification"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSpecification.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.MethodSpecificationRow@)">
            <summary>
            Creates a method specification from a method specification metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the method specification for.</param>
            <param name="row">The metadata table row to base the method specification on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSpecification.GetMethod">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSpecification.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedMethodSpecification.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedModuleDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ModuleDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.#ctor(AsmResolver.PE.IPEImage,AsmResolver.DotNet.Serialized.ModuleReaderParameters)">
            <summary>
            Interprets a PE image as a .NET module.
            </summary>
            <param name="peImage">The image to interpret as a .NET module.</param>
            <param name="readerParameters">The parameters to use while reading the module.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.DotNetDirectory">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.ReaderContext">
            <summary>
            Gets the reading context that is used for reading the contents of the module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.LookupMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.TryLookupMember(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.DotNet.IMetadataMember@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.LookupString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.TryLookupString(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetIndexEncoder(AsmResolver.PE.DotNet.Metadata.Tables.CodedIndex)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetImportedTypeReferences">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetImportedMemberReferences">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetMvid">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetEncId">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetEncBaseId">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetTopLevelTypes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetAssemblyReferences">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetModuleReferences">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetFileReferences">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetResources">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetExportedTypes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetRuntimeVersion">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetManagedEntryPoint">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetNativeResources">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetDebugData">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedModuleReference">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ModuleReference"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleReference.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ModuleReferenceRow@)">
            <summary>
            Creates a module reference from a module reference metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the module reference for.</param>
            <param name="row">The metadata table row to base the module reference. on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleReference.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedModuleReference.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedParameterDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.ParameterDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.ParameterDefinitionRow@)">
            <summary>
            Creates a parameter definition from a parameter metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the parameter for.</param>
            <param name="row">The metadata table row to base the parameter definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.GetMethod">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.GetConstant">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedParameterDefinition.GetMarshalDescriptor">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.PropertyDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.PropertyDefinitionRow@)">
            <summary>
            Creates a property definition from a property metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the property for.</param>
            <param name="row">The metadata table row to base the property definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetSemantics">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedPropertyDefinition.GetConstant">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedSecurityDeclaration">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.SecurityDeclaration"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedSecurityDeclaration.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.SecurityDeclarationRow@)">
            <summary>
            Creates a security declaration from a declaration metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the declaration for.</param>
            <param name="row">The metadata table row to base the security declaration on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedSecurityDeclaration.GetParent">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedSecurityDeclaration.GetPermissionSet">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedStandAloneSignature">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.StandAloneSignature"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedStandAloneSignature.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.StandAloneSignatureRow@)">
            <summary>
            Creates a stand-alone signature from a stand-alone sig metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the signature for.</param>
            <param name="row">The metadata table row to base the signature on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedStandAloneSignature.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedStandAloneSignature.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedTypeDefinition">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.TypeDefinition"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeDefinitionRow@)">
            <summary>
            Creates a type definition from a type metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the type for.</param>
            <param name="row">The metadata table row to base the type definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetNamespace">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetBaseType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetNestedTypes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetFields">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetMethods">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetProperties">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetEvents">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetSecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetGenericParameters">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetInterfaces">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetMethodImplementations">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeDefinition.GetClassLayout">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedTypeReference">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.TypeReference"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeReference.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeReferenceRow@)">
            <summary>
            Creates a type reference from a type metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the type for.</param>
            <param name="row">The metadata table row to base the type definition on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeReference.GetNamespace">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeReference.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeReference.GetScope">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeReference.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Serialized.SerializedTypeSpecification">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.DotNet.TypeSpecification"/>  that is read from a
            .NET metadata image.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeSpecification.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken,AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeSpecificationRow@)">
            <summary>
            Creates a type specification from a type metadata row.
            </summary>
            <param name="context">The reader context.</param>
            <param name="token">The token to initialize the type for.</param>
            <param name="row">The metadata table row to base the type specification on.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeSpecification.GetSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Serialized.SerializedTypeSpecification.GetCustomAttributes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.BlobReaderContext">
            <summary>
            Provides a context in which a metadata blob parser exists in. This includes the original module reader context
            as well as a mechanism to protect against infinite recursion.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobReaderContext.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.BlobReaderContext"/> structure.
            </summary>
            <param name="readerContext">The original read context.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobReaderContext.#ctor(AsmResolver.DotNet.Serialized.ModuleReaderContext,AsmResolver.DotNet.Signatures.Types.ITypeSignatureResolver)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.BlobReaderContext"/> structure.
            </summary>
            <param name="readerContext">The original read context.</param>
            <param name="resolver">The object responsible for resolving raw type metadata tokens and addresses.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BlobReaderContext.ReaderContext">
            <summary>
            Gets the module reader context.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BlobReaderContext.TypeSignatureResolver">
            <summary>
            Gets the object responsible for resolving raw type metadata tokens and addresses.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobReaderContext.StepInToken(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Records a step in the blob reading process where a metadata token into the tables stream is about to
            be traversed.
            </summary>
            <param name="token">The token to traverse</param>
            <returns>
            <c>true</c> if this token was recorded, <c>false</c> if the token was already traversed before.
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobReaderContext.StepOutToken">
            <summary>
            Records a step in the blob reading process where the last recorded metadata token into the tables stream
            was traversed and processed completely.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when there was no token traversed.</exception>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.BlobSerializationContext">
            <summary>
            Describes a context in which a blob signature is to be serialized in.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobSerializationContext.#ctor(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.DotNet.Signatures.ITypeCodedIndexProvider,AsmResolver.IErrorListener)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.BlobSerializationContext"/> class.
            </summary>
            <param name="writer">The output stream to write the raw data to.</param>
            <param name="indexProvider">The object responsible for obtaining coded indices to types.</param>
            <param name="errorListener">The object responsible for collecting diagnostic information during the serialization process.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BlobSerializationContext.Writer">
            <summary>
            Gets the output stream to write the raw data to.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BlobSerializationContext.IndexProvider">
            <summary>
            Gets the object responsible for obtaining coded indices to types.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BlobSerializationContext.ErrorListener">
            <summary>
            Gets the bag used to collect diagnostic information during the serialization process.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.BlobSignature">
            <summary>
            Represents a signature stored in the #Blob stream of a managed executable file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobSignature.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <summary>
            Serializes the blob to an output stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BlobSignature.MakeStandAloneSignature">
            <summary>
            Wraps the blob signature into a new stand-alone signature that can be referenced by a metadata token.
            </summary>
            <returns>The new stand-alone signature.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.BoxedArgument">
            <summary>
            Represents a boxed object in a custom attribute signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BoxedArgument.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.BoxedArgument"/> class.
            </summary>
            <param name="type">The value type of the boxed object.</param>
            <param name="value">The boxed value.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BoxedArgument.Type">
            <summary>
            Gets the type of the boxed argument.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.BoxedArgument.Value">
            <summary>
            Gets the boxed value.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BoxedArgument.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BoxedArgument.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.BoxedArgument.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CallingConventionAttributes">
            <summary>
            Provides members for describing all available attributes that can be used in a calling convention signature.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Default">
            <summary>
            Indicates a method is using the default calling convention specified by the runtime.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.C">
            <summary>
            Indicates a method is using the cdecl calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.StdCall">
            <summary>
            Indicates a method is using the stdcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.ThisCall">
            <summary>
            Indicates a method is using the thiscall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.FastCall">
            <summary>
            Indicates a method is using the fastcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.VarArg">
            <summary>
            Indicates the method supports supplying a variable amount of arguments.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Field">
            <summary>
            Indicates the signature references a field signature.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Local">
            <summary>
            Indicates the signature references a list of local variable signatures.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Property">
            <summary>
            Indicates the signature references a property signature.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Unmanaged">
            <summary>
            Indicates the signature references an unmanaged function signature for which the calling convention is
            determined by the optional modifiers on the return type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.GenericInstance">
            <summary>
            Indicates the signature references a generic method instantiation.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Generic">
            <summary>
            Indicates the member defines generic parameters.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.HasThis">
            <summary>
            Indicates the member is an instance member and an additional argument is required to use this member.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.ExplicitThis">
            <summary>
            Indicates the current instance parameter is explicitly specified in the parameter list.
            That is, determines whether the first parameter is used for the current instance object.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Sentinel">
            <summary>
            Indicates the signature is part of a vararg method signature.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CallingConventionSignature">
            <summary>
            Provides a base for all signature that deal with a calling convention. This includes most member signatures,
            such as method and field signatures.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CallingConventionSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@,System.Boolean)">
            <summary>
            Reads a single calling convention signature at the current position of the provided stream reader.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The reader to use.</param>
            <param name="readToEnd">Determines whether any extra data after the signature should be read and
            put into the <see cref="P:AsmResolver.DotNet.Signatures.ExtendableBlobSignature.ExtraData"/> property.</param>
            <returns>The read signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CallingConventionSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes)">
            <summary>
            Creates a new calling convention signature.
            </summary>
            <param name="attributes">The attributes associated to the signature.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.Attributes">
            <summary>
            Gets or sets the attributes of the signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsMethod">
            <summary>
            Gets a value indicating whether the signature describes a method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsField">
            <summary>
            Gets a value indicating whether the signature describes a field
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsLocal">
            <summary>
            Gets a value indicating whether the signature describes a local variable.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsGenericInstance">
            <summary>
            Gets a value indicating whether the signature describes a generic instance of a method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsGeneric">
            <summary>
            Gets or sets a value indicating whether the member using this signature is a generic member and defines
            generic parameters.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.HasThis">
            <summary>
            Gets or sets a value indicating whether the member is an instance member and an additional argument is
            required to use this member.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.ExplicitThis">
            <summary>
            Gets or sets a value indicating whether the this parameter is explicitly specified in the parameter list.
            That is, determines whether the first parameter is used for the current instance object.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsSentinel">
            <summary>
            Gets or sets a value indicating whether the signature is part of a vararg method signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CallingConventionSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CallingConventionSignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CallingConventionSignature.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CustomAttributeArgument">
            <summary>
            Represents an argument value in a custom attribute construction.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single argument from the provided input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="argumentType">The type of the argument to read.</param>
            <param name="reader">The input stream.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new empty custom attribute argument.
            </summary>
            <param name="argumentType">The type of the argument.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Object)">
            <summary>
            Creates a new custom attribute argument.
            </summary>
            <param name="argumentType">The type of the argument.</param>
            <param name="value">The value of the argument.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new custom attribute array argument.
            </summary>
            <param name="argumentType">The type of the argument.</param>
            <param name="elements">The value making up the elements of the array argument.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Object[])">
            <summary>
            Creates a new custom attribute array argument.
            </summary>
            <param name="argumentType">The type of the argument.</param>
            <param name="elements">The value making up the elements of the array argument.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeArgument.ArgumentType">
            <summary>
            Gets or sets the type of the argument value.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeArgument.Element">
            <summary>
            When <see cref="P:AsmResolver.DotNet.Signatures.CustomAttributeArgument.ArgumentType"/> is not a <see cref="T:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature"/>, gets the first element of the
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeArgument.Elements">
            <summary>
            Gets a collection of all elements that the argument is built with.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeArgument.IsNullArray">
            <summary>
            Gets or sets a value indicating whether the argument represents the null array value.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeArgument.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext)">
            <summary>
            Writes the fixed argument to the provided output stream.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CustomAttributeArgumentMemberType">
            <summary>
            Provides fields for describing all possible members that can be referenced by name in a custom attribute.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CustomAttributeArgumentMemberType.Field">
            <summary>
            Indicates the referenced member is a field. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CustomAttributeArgumentMemberType.Property">
            <summary>
            Indicates the referenced member is a property.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument">
            <summary>
            Represents an argument value in a custom attribute construction that is assigned to a field or property in the
            attribute class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.#ctor(AsmResolver.DotNet.Signatures.CustomAttributeArgumentMemberType,AsmResolver.Utf8String,AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.CustomAttributeArgument)">
            <summary>
            Creates a new named custom attribute argument.
            </summary>
            <param name="memberType">Indicates whether the provided name references a field or a property.</param>
            <param name="memberName">The name of the referenced member.</param>
            <param name="argumentType">The type of the argument to store.</param>
            <param name="argument">The argument value.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.MemberType">
            <summary>
            Gets or sets a value indicating whether the referenced member is a field or a property.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.MemberName">
            <summary>
            Gets or sets the name of the referenced member.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.ArgumentType">
            <summary>
            Gets or sets the type of the argument to store.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.Argument">
            <summary>
            Gets or sets the argument.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single named argument from the input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The input stream.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext)">
            <summary>
            Writes the named argument to the provided output stream.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.CustomAttributeSignature">
            <summary>
            Represents the blob signature of a custom attribute, containing the arguments that are passed onto the attribute
            constructor.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.CustomAttributeSignature.CustomAttributeSignaturePrologue">
            <summary>
            The header value of every custom attribute signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.#ctor">
            <summary>
            Creates a new empty custom attribute signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.#ctor(AsmResolver.DotNet.Signatures.CustomAttributeArgument[])">
            <summary>
            Creates a new custom attribute signature with the provided fixed arguments.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.#ctor(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.CustomAttributeArgument})">
            <summary>
            Creates a new custom attribute signature with the provided fixed arguments.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.#ctor(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.CustomAttributeArgument},System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument})">
            <summary>
            Creates a new custom attribute signature with the provided fixed and named arguments.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.FixedArguments">
            <summary>
            Gets a collection of fixed arguments that are passed onto the constructor of the attribute.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.NamedArguments">
            <summary>
            Gets a collection of values that are assigned to fields and/or members of the attribute class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.DotNet.ICustomAttributeType,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single custom attribute signature from the input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="ctor">The constructor that was called.</param>
            <param name="reader">The input stream.</param>
            <returns>The signature.</returns>
            <exception cref="T:System.FormatException">Occurs when the input stream does not point to a valid signature.</exception>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.IsInitialized">
            <summary>
            Gets a value indicating whether the <see cref="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.FixedArguments"/> and <see cref="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.NamedArguments"/> collections
            are initialized or not.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.EnsureIsInitialized">
            <summary>
            Ensures that the <see cref="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.FixedArguments"/> and <see cref="P:AsmResolver.DotNet.Signatures.CustomAttributeSignature.NamedArguments"/> are initialized.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.Initialize(System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.CustomAttributeArgument},System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument})">
            <summary>
            Initializes the argument collections of the signature.
            </summary>
            <param name="fixedArguments">The collection that will receive the fixed arguments.</param>
            <param name="namedArguments">The collection that will receive the named arguments.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.IsCompatibleWith(AsmResolver.DotNet.ICustomAttributeType)">
            <summary>
            Validates whether the signature is compatible with the provided attribute constructor.
            </summary>
            <param name="constructor">The constructor to validate against.</param>
            <returns><c>true</c> if the constructor is compatible, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.CustomAttributeSignature.IsCompatibleWith(AsmResolver.DotNet.ICustomAttributeType,AsmResolver.IErrorListener)">
            <summary>
            Validates whether the signature is compatible with the provided attribute constructor.
            </summary>
            <param name="constructor">The constructor to validate against.</param>
            <param name="listener">The object responsible for reporting any errors during the validation of the signature.</param>
            <returns><c>true</c> if the constructor is compatible, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.DataBlobSignature">
            <summary>
            Represents a blob signature storing raw data.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single data blob signature from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The blob signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.#ctor(System.Byte[])">
            <summary>
            Creates a new data blob signature.
            </summary>
            <param name="data">The raw data to store.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data">
            <summary>
            Gets or sets the raw data stored in the blob signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.InterpretData(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType)">
            <summary>
            Interprets the raw data stored in the <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/> property as a literal.
            </summary>
            <param name="elementType">The type of the literal.</param>
            <returns>The deserialized literal.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Boolean)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Char)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Byte)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.SByte)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.UInt16)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Int16)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.UInt32)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Int32)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.UInt64)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Int64)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Single)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.Double)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.DataBlobSignature.FromValue(System.String)">
            <summary>
            Create a <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> from a value
            </summary>
            <param name="value">The value to be converted into data</param>
            <returns>
            A new <see cref="T:AsmResolver.DotNet.Signatures.DataBlobSignature"/> with the correct <see cref="P:AsmResolver.DotNet.Signatures.DataBlobSignature.Data"/>
            </returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.ExtendableBlobSignature">
            <summary>
            Represents a blob signature that might contain extra data not part of the standard format of the signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.ExtendableBlobSignature.ExtraData">
            <summary>
            Gets or sets the extra custom data in the blob signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.ExtendableBlobSignature.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.ExtendableBlobSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <summary>
            Serializes the blob (without extra data) to an output stream.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.FieldSignature">
            <summary>
            Represents a signature of a field defined in a .NET executable file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new field signature for a static field.
            </summary>
            <param name="fieldType">The value type of the field.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new field signature for a static field.
            </summary>
            <param name="fieldType">The value type of the field.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single field signature from an input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The blob input stream.</param>
            <returns>The field signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new field signature with the provided field type.
            </summary>
            <param name="fieldType">The field type.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new field signature with the provided field type.
            </summary>
            <param name="attributes">The attributes of the field.</param>
            <param name="fieldType">The field type.</param>
            <remarks>
            This constructor automatically sets the <see cref="F:AsmResolver.DotNet.Signatures.CallingConventionAttributes.Field"/> bit.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.FieldSignature.FieldType">
            <summary>
            Gets the type of the value that the field contains.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.InstantiateGenericTypes(AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Substitutes any generic type parameter in the field signature with the parameters provided by
            the generic context.
            </summary>
            <param name="context">The generic context.</param>
            <returns>The instantiated field signature.</returns>
            <remarks>
            When the type signature does not contain any generic parameter, this method might return the current
            instance of the field signature.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the field signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported field signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.FieldSignature.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.GenericContext">
            <summary>
            Provides a context within a generic instantiation, including the type arguments of the enclosing type and method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.#ctor(AsmResolver.DotNet.Signatures.IGenericArgumentsProvider,AsmResolver.DotNet.Signatures.IGenericArgumentsProvider)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.GenericContext"/> class.
            </summary>
            <param name="type">The type providing type arguments.</param>
            <param name="method">The method providing type arguments.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.GenericContext.Type">
            <summary>
            Gets the object responsible for providing type arguments defined by the current generic type instantiation.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.GenericContext.Method">
            <summary>
            Gets the object responsible for providing type arguments defined by the current generic method instantiation.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.GenericContext.IsEmpty">
            <summary>
            Returns true if both Type and Method providers are null
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.WithType(AsmResolver.DotNet.Signatures.IGenericArgumentsProvider)">
            <summary>
            Enters a new generic context with a new type providing type arguments.
            </summary>
            <param name="type">The new type providing the type arguments.</param>
            <returns>The new generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.WithMethod(AsmResolver.DotNet.Signatures.IGenericArgumentsProvider)">
            <summary>
            Enters a new generic context with a new method providing type arguments.
            </summary>
            <param name="method">The new method providing the type arguments.</param>
            <returns>The new generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.GetTypeArgument(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <summary>
            Resolves a type parameter to a type argument, based on the current generic context.
            </summary>
            <remarks>
            If a type parameter within the signature references a parameter that is not captured by the context
            (i.e. the corresponding generic argument provider is set to null),
            then this type parameter will not be substituted.
            </remarks>
            <param name="parameter">The parameter to get the argument value for.</param>
            <returns>The argument type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromType(AsmResolver.DotNet.TypeSpecification)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.TypeSpecification"/>.
            </summary>
            <param name="type">Type specification to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature"/>.
            </summary>
            <param name="type">Generic type signature to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.ITypeDescriptor"/>.
            </summary>
            <param name="type">Type to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromMethod(AsmResolver.DotNet.MethodSpecification)">
            <summary>
            Gets a method and/or type generic context from <see cref="T:AsmResolver.DotNet.MethodSpecification"/>.
            </summary>
            <param name="method">Method specification to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromMethod(AsmResolver.DotNet.IMethodDescriptor)">
            <summary>
            Gets a method and/or type generic context from <see cref="T:AsmResolver.DotNet.IMethodDescriptor"/>.
            </summary>
            <param name="method">Method to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromField(AsmResolver.DotNet.IFieldDescriptor)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.IFieldDescriptor"/>.
            </summary>
            <param name="field">Field to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromMember(AsmResolver.DotNet.MemberReference)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.MemberReference"/>.
            </summary>
            <param name="member">Member reference to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.FromMember(AsmResolver.DotNet.IMemberDescriptor)">
            <summary>
            Gets a type generic context from <see cref="T:AsmResolver.DotNet.IMemberDescriptor"/>.
            </summary>
            <param name="member">Member to get the generic context from.</param>
            <returns>Generic context.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.Equals(AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Determines whether two generic contexts have the same generic argument providers.
            </summary>
            <param name="other">The other context.</param>
            <returns><c>true</c> if the contexts are considered equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericContext.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature">
            <summary>
            Represents an instantiation of a generic method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes)">
            <summary>
            Creates a new instantiation signature for a generic method.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,System.Int32)">
            <summary>
            Creates a new instantiation signature for a generic method.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="capacity">The initial number of elements that the <see cref="P:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.TypeArguments"/> property can store.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a new instantiation signature for a generic method with the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments to use for the instantiation.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.#ctor(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a new instantiation signature for a generic method with the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments to use for the instantiation.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a new instantiation signature for a generic method with the provided type arguments.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="typeArguments">The type arguments to use for the instantiation.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.TypeArguments">
            <summary>
            Gets a collection of type arguments that are used to instantiate the method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the generic method instantiation signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.IGenericArgumentsProvider">
            <summary>
            Provides members for describing an instantiation of a type or method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.IGenericArgumentsProvider.TypeArguments">
            <summary>
            Gets a collection of type arguments used to instantiate the generic member.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException">
            <summary>
            Describes the exception that occurs upon encountering an invalid or incomplete blob signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException.#ctor(AsmResolver.DotNet.Signatures.BlobSignature)">
            <summary>
            Creates a new instance of <see cref="T:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException"/>.
            </summary>
            <param name="signature">The invalid or incomplete signature.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException.#ctor(AsmResolver.DotNet.Signatures.BlobSignature,System.String)">
            <summary>
            Creates a new instance of <see cref="T:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException"/>.
            </summary>
            <param name="signature">The invalid or incomplete signature.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException.#ctor(AsmResolver.DotNet.Signatures.BlobSignature,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException"/>.
            </summary>
            <param name="signature">The invalid or incomplete signature.</param>
            <param name="inner">The inner cause of the invalid blob signature.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException.#ctor(AsmResolver.DotNet.Signatures.BlobSignature,System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException"/>.
            </summary>
            <param name="signature">The invalid or incomplete signature.</param>
            <param name="message">The error message.</param>
            <param name="inner">The inner cause of the invalid blob signature.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.InvalidBlobSignatureException.Signature">
            <summary>
            Gets the invalid or incomplete blob signature.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.ITypeCodedIndexProvider">
            <summary>
            Provides members for obtaining coded indices into a metadata tables stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.ITypeCodedIndexProvider.GetTypeDefOrRefIndex(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Obtains a coded index to the provided type reference.
            </summary>
            <param name="type">The type.</param>
            <returns>The coded index.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.LocalVariablesSignature">
            <summary>
            Represents a blob signature containing a list of variable types for a CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single local variables signature from the provided input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The input stream.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.#ctor">
            <summary>
            Creates a new empty local variables signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a new local variables signature with the provided variable types.
            </summary>
            <param name="variableTypes">The types of the variables.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.#ctor(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a new local variables signature with the provided variable types.
            </summary>
            <param name="variableTypes">The types of the variables.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.LocalVariablesSignature.VariableTypes">
            <summary>
            Gets a collection representing the variable types of a CIL method body.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the local variables signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.LocalVariablesSignature.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor">
            <summary>
            Represents a description of a marshaller that marshals a value to a COM interface object.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor.FromReader(AsmResolver.DotNet.Signatures.Marshal.NativeType,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single COM interface marshal descriptor from the provided input stream.
            </summary>
            <param name="type">The type of COM interface marshaller to read.</param>
            <param name="reader">The input stream.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor.#ctor(AsmResolver.DotNet.Signatures.Marshal.NativeType)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor"/> class.
            </summary>
            <param name="nativeType">The type of COM interface to marshal to.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor.IidParameterIndex">
            <summary>
            Gets or sets the index of the parameter containing the COM IID of the interface.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.ComInterfaceMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor">
            <summary>
            Represents a description for a marshaller that marshals a value using a custom marshaller type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.FromReader(AsmResolver.DotNet.ModuleDefinition,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single custom marshal descriptor from the provided input stream.
            </summary>
            <param name="parentModule">The module defining the descriptor.</param>
            <param name="reader">The input stream.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.#ctor(System.String,AsmResolver.Utf8String,AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.Utf8String)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor"/> class.
            </summary>
            <param name="guid"></param>
            <param name="nativeTypeName"></param>
            <param name="marshalType"></param>
            <param name="cookie"></param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.Guid">
            <summary>
            Gets or sets the unique identifier of the type library that contains the marshaller.
            </summary>
            <remarks>
            This field is ignored by the CLR.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.NativeTypeName">
            <summary>
            Gets or sets the name of the native type of the marshaller.
            </summary>
            <remarks>
            This field is ignored by the CLR.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.MarshalType">
            <summary>
            Gets or sets the type used to marshal the value.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.Cookie">
            <summary>
            Gets or sets an additional value to be passed onto the custom marshaller.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.CustomMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor">
            <summary>
            Represents a description for a marshaller that marshals a value as a fixed-length array.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single fixed array marshal descriptor from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor"/> class.
            </summary>
            <param name="size">The fixed size of the array.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.#ctor(System.Int32,AsmResolver.DotNet.Signatures.Marshal.NativeType)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor"/> class.
            </summary>
            <param name="size">The fixed size of the array.</param>
            <param name="arrayElementType">The type each element in the array should be marshalled as.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.Size">
            <summary>
            Gets or sets the fixed size of the array.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.ArrayElementType">
            <summary>
            Gets or sets the type each element in the array should be marshalled as.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedArrayMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor">
            <summary>
            Represents a description of a marshaller that marshals a given value to a fixed-length string using the system
            defined string encoding.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single fixed system string marshal descriptor from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor"/> class.
            </summary>
            <param name="size">The number of characters in the string.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor.Size">
            <summary>
            Gets or sets the number of characters in the string.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.FixedSysStringMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.LPArrayFlags">
            <summary>
            Provides flags that can be assigned to an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.LPArrayFlags.SizeParamIndexSpecified">
            <summary>
            Indicates the index of the size-parameter is specified.  
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.LPArrayFlags.Reserved">
            <summary>
            Indicates all reserved bits that might be used in the future.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor">
            <summary>
            Represents the marshal descriptor for a pointer to the first element of a C-style array.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single array marshal descriptor at the current position of the binary stream reader.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>The read array descriptor.</returns>
            <remarks>
            This method assumes the native type has already been read from the binary stream reader.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.#ctor">
            <summary>
            Creates a new empty instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.#ctor(System.Nullable{AsmResolver.DotNet.Signatures.Marshal.NativeType})">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor"/> class.
            </summary>
            <param name="arrayElementType">The type of elements stored in the array.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.ArrayElementType">
            <summary>
            Gets the type of elements stored in the array.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.ParameterIndex">
            <summary>
            Gets or sets the index of the parameter that is marshalled (if available).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.NumberOfElements">
            <summary>
            Gets or sets the number of elements in the parameter
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.Flags">
            <summary>
            Gets or sets the attributes assigned to this marshal descriptor.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.LPArrayMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.MarshalDescriptor">
            <summary>
            When derived from this class, provides a description on how a specific type needs to be marshaled upon
            calling to or from unmanaged code via P/Invoke dispatch.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.MarshalDescriptor.FromReader(AsmResolver.DotNet.ModuleDefinition,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a marshal descriptor signature from the provided input stream.
            </summary>
            <param name="parentModule">The module that defines the marshal descriptor</param>
            <param name="reader">The input stream.</param>
            <returns>The marshal descriptor.</returns>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.MarshalDescriptor.NativeType">
            <summary>
            Gets the native type of the marshal descriptor. This is the byte any descriptor starts with.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.NativeType">
            <summary>
            Provides members describing native types used for marshalling managed types to unmanaged types and vice versa.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Void">
            <summary>
            Indicates the void native type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Boolean">
            <summary>
            Indicates the 4 byte boolean value type where 0 represents false, and any non-zero value represents true. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.I1">
            <summary>
            Indicates the signed byte value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.U1">
            <summary>
            Indicates the unsigned byte value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.I2">
            <summary>
            Indicates the signed 16 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.U2">
            <summary>
            Indicates the unsigned 16 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.I4">
            <summary>
            Indicates the signed 32 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.U4">
            <summary>
            Indicates the unsigned 32 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.I8">
            <summary>
            Indicates the signed 64 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.U8">
            <summary>
            Indicates the unsigned 64 bit integer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.R4">
            <summary>
            Indicates the 32 bit floating point value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.R8">
            <summary>
            Indicates the 64 bit floating point value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.SysChar">
            <summary>
            Indicates the system character type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Variant">
            <summary>
            Indicates the variant type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Currency">
            <summary>
            Indicates the currency type
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Ptr">
            <summary>
            Indicates the raw pointer type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Decimal">
            <summary>
            Indicates the decimal value type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Date">
            <summary>
            Indicates the date value type. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.BStr">
            <summary>
            Indicates the Unicode character string type that is a length-prefixed double byte.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPStr">
            <summary>
            Indicates the value is a pointer to an array of 8 bit characters.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPWStr">
            <summary>
            Indicates the value is a pointer to an array of 16 bit characters.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPTStr">
            <summary>
            Indicates the value is a pointer to an array of TCHAR.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.FixedSysString">
            <summary>
            Indicates the value is a fixed length string using the system character encoding. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.ObjectRef">
            <summary>
            Indicates the value is an object reference. This type is deprecated.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.IUnknown">
            <summary>
            Indicates the COM IUnknown pointer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.IDispatch">
            <summary>
            Indicates the COM IDispatch pointer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Struct">
            <summary>
            Indicates the VARIANT type, which is used to marshal managed formatted classes and value types.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Interface">
            <summary>
            Indicates the Windows Runtime interface pointer type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.SafeArray">
            <summary>
            Indicates the SafeArray value type, which is a self-describing array that carries the type, rank, and bounds
            of the associated array data.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.FixedArray">
            <summary>
            Indicates the ByValArray or FixedArray value type. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.SysInt">
            <summary>
            Indicates the signed system integer type. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.SysUInt">
            <summary>
            Indicates the unsigned system integer type. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.NestedStruct">
            <summary>
            Indicates the nested struct value type. This type is deprecated and <see cref="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Struct"/> is recommended instead.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.ByValStr">
            <summary>
            Indicates the value tyep that enables Visual Basic to change a string in unmanaged code and have the results
            reflected in managed code. This value is only supported for platform invoke.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.AnsiBStr">
            <summary>
            Indicates the ANSI character string that is a length-prefixed single byte. You can use this member on the String data type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.TBStr">
            <summary>
            Indicates the length-prefixed, platform-dependent char string type, which is ANSI on Windows 98, Unicode on
            Windows NT.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.VariantBool">
            <summary>
            Indicates the 2 byte VARIANT_BOOL type, where 0 represents false and -1 represents true.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.FunctionPointer">
            <summary>
            Indicates the C-style function pointer value type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.AsAny">
            <summary>
            Indicates the dynamic type that determines the type of an object at run time and marshals the object as that
            type. This member is valid for platform invoke methods only.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPArray">
            <summary>
            Indicates a pointer to the first element of a C-style array. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPStruct">
            <summary>
            Indicates a pointer to a C-style structure that you use to marshal managed formatted classes. This member
            is valid for platform invoke methods only.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.CustomMarshaller">
            <summary>
            Indicates a custom marshaller type, indicated by a string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Error">
            <summary>
            Indicates the native type that is associated with an I4 or an U4 and that causes the parameter to be exported
            as an HRESULT in the exported type library.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.IInspectable">
            <summary>
            Indicates a Windows Runtime interface pointer. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.HString">
            <summary>
            Indicates a Windows Runtime string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.LPUTF8Str">
            <summary>
            Indicates a pointer to a UTF-8 encoded string.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.NativeType.Max">
            <summary>
            Indicates 
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor">
            <summary>
            Represents a description for marshalling a safe array, which is a self-describing array that carries the type,
            rank, and bounds of the associated array data.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.FromReader(AsmResolver.DotNet.ModuleDefinition,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single safe array marshal descriptor from the provided input stream.
            </summary>
            <param name="parentModule">The module defining the descriptor.</param>
            <param name="reader">The input stream.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.#ctor(AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor"/> class.
            </summary>
            <param name="variantType">The element type of the safe array.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.#ctor(AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType,AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor"/> class.
            </summary>
            <param name="variantType">The element type of the safe array.</param>
            <param name="flags">The flags associated to the element type of the safe array.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.#ctor(AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType,AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor"/> class.
            </summary>
            <param name="variantType">The element type of the safe array.</param>
            <param name="flags">The flags associated to the element type of the safe array.</param>
            <param name="subType">The user defined array element type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.VariantType">
            <summary>
            Gets or sets the element type of the safe array.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.VariantTypeFlags">
            <summary>
            Gets or sets the flags associated to the element type of the safe array.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.IsVector">
            <summary>
            Gets or sets a value indicating whether the type is a vector.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.IsArray">
            <summary>
            Gets or sets a value indicating whether the type is an array.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.IsByRef">
            <summary>
            Gets or sets a value indicating whether the type is a by-reference type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.UserDefinedSubType">
            <summary>
            Gets or sets the user defined element type of the safe array.
            </summary>
            <remarks>
            This value is usually <c>null</c>. Valid .NET assemblies require <see cref="P:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.VariantType"/> to be set to
            <see cref="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType.Unknown"/>, <see cref="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType.Dispatch"/>, or
            <see cref="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType.Record"/>.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SafeArrayMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags">
            <summary>
            Provides members defining all valid flags for an element type in a safe array marshal descriptor.  
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags.Vector">
            <summary>
            Indicates the type is a vector.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags.Array">
            <summary>
            Indicates the type is an array.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags.ByRef">
            <summary>
            Indicate the type is a by-reference type.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Marshal.SafeArrayTypeFlags.Mask">
            <summary>
            Provides a bit mask for the type flags. 
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.SafeArrayVariantType">
            <summary>
            Provides members defining all valid element types for a safe array.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Marshal.SimpleMarshalDescriptor">
            <summary>
            Represents a marshal descriptor that requires no further parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SimpleMarshalDescriptor.#ctor(AsmResolver.DotNet.Signatures.Marshal.NativeType)">
            <summary>
            Creates a new instance of the <see cref="T:AsmResolver.DotNet.Signatures.Marshal.SimpleMarshalDescriptor"/> class.
            </summary>
            <param name="nativeType"></param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Marshal.SimpleMarshalDescriptor.NativeType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Marshal.SimpleMarshalDescriptor.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.MemberSignature">
            <summary>
            Provides a base for all member signatures.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MemberSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Initializes a new member signature.
            </summary>
            <param name="attributes">The attributes of the signature.</param>
            <param name="memberReturnType">The type of the object this member returns or contains.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MemberSignature.MemberReturnType">
            <summary>
            Gets the type of the object this member returns or contains.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MemberSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.MethodSignature">
            <summary>
            Represents the signature of a method defined or referenced by a .NET executable file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single method signature from an input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The blob input stream.</param>
            <returns>The method signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new parameter-less method signature for a static method.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a generic method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="genericParameterCount">The number of generic parameters this method defines.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a generic method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="genericParameterCount">The number of generic parameters this method defines.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new parameter-less method signature for an instance method.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a method signature for an instance method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a generic method signature for an instance method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="genericParameterCount">The number of generic parameters this method defines.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a method signature for an instance method  that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a generic method signature for an instance method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="genericParameterCount">The number of generic parameters this method defines.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a new method signature with the provided return and parameter types.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The types of the parameter the method defines.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignature.GenericParameterCount">
            <summary>
            Gets or sets the number of generic parameters this method defines.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.InstantiateGenericTypes(AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Substitutes any generic type parameter in the method signature with the parameters provided by
            the generic context.
            </summary>
            <param name="context">The generic context.</param>
            <returns>The instantiated method signature.</returns>
            <remarks>
            When the type signature does not contain any generic parameter, this method might return the current
            instance of the method signature.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.MakeFunctionPointerType">
            <summary>
            Constructs a new function pointer type signature based on this method signature.
            </summary>
            <returns>The new type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the method signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.MethodSignatureBase">
            <summary>
            Provides a base for method and property signatures.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignatureBase.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Initializes the base of a method signature.
            </summary>
            <param name="attributes">The attributes associated to the signature.</param>
            <param name="memberReturnType">The return type of the member.</param>
            <param name="parameterTypes">The types of all (non-sentinel) parameters.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.ParameterTypes">
            <summary>
            Gets an ordered list of types indicating the types of the parameters that this member defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.ReturnType">
            <summary>
            Gets or sets the type of the value that this member returns.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.IncludeSentinel">
            <summary>
            Gets or sets a value indicating whether sentinel parameters should be included in the signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.ReturnsValue">
            <summary>
            Gets value indicating if method returns value or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.SentinelParameterTypes">
            <summary>
            Gets an ordered list of types indicating the types of the sentinel parameters that this member defines.
            </summary>
            <remarks>
            For any of the sentinel parameter types to be emitted to the output module, the <see cref="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.IncludeSentinel"/>
            must be set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignatureBase.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignatureBase.ReadParametersAndReturnType(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Initializes the <see cref="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.ParameterTypes"/> and <see cref="P:AsmResolver.DotNet.Signatures.MethodSignatureBase.ReturnType"/> properties by reading
            the parameter count, return type and parameter fields of the signature from the provided input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignatureBase.WriteParametersAndReturnType(AsmResolver.DotNet.Signatures.BlobSerializationContext)">
            <summary>
            Writes the parameter and return types in the signature to the provided output stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.MethodSignatureBase.GetTotalParameterCount">
            <summary>
            Determines the total number of parameters that this method requires to be invoked.
            </summary>
            <returns>The number of parameters</returns>
            <remarks>
            This number includes the this parameter, as well as any potential sentinel parameters.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.PropertySignature">
            <summary>
            Represents the signature that is assigned to a property. This includes the type of the property, as well as the
            types of the parameters that it defines.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single property signature from an input stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The blob input stream.</param>
            <returns>The property signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new parameter-less method signature for a static method.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateStatic(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a method signature for a static method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new parameter-less method signature for an instance method.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a method signature for an instance method that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.CreateInstance(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Creates a method signature for an instance method  that has a number of parameters.
            </summary>
            <param name="returnType">The return type of the method.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.#ctor(AsmResolver.DotNet.Signatures.CallingConventionAttributes,AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <summary>
            Initializes a new property signature with the provided property type and a list of parameter types.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="propertyType">The property type.</param>
            <param name="parameterTypes">The parameter types.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.InstantiateGenericTypes(AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Substitutes any generic type parameter in the property signature with the parameters provided by
            the generic context.
            </summary>
            <param name="context">The generic context.</param>
            <returns>The instantiated property signature.</returns>
            <remarks>
            When the type signature does not contain any generic parameter, this method might return the current
            instance of the property signature.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the property signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.PropertySignature.ImportWithInternal(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Security.PermissionSetSignature">
            <summary>
            Represents a blob signature containing a set of security attributes.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.PermissionSetSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a permission set signature from the provided input blob stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The input blob stream.</param>
            <returns>The permission set.</returns>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Security.PermissionSetSignature.Attributes">
            <summary>
            Gets the security attributes stored in the signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.PermissionSetSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Security.SecurityAttribute">
            <summary>
            Represents a single instance of a security attribute.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single security attribute from the provided input blob stream.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The input blob stream.</param>
            <returns>The security attribute.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new security attribute with the provided type.
            </summary>
            <param name="type">The security attribute type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.AttributeType">
            <summary>
            Gets or sets the security attribute type that is used.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.NamedArguments">
            <summary>
            Gets the list of named arguments used for instantiating the attribute.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.Write(AsmResolver.DotNet.Signatures.BlobSerializationContext)">
            <summary>
            Writes the security attribute to the provided output stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Security.SecurityAttribute.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.SerializedCustomAttributeSignature">
            <summary>
            Provides a lazy initialized implementation of the <see cref="T:AsmResolver.DotNet.Signatures.CustomAttributeSignature"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SerializedCustomAttributeSignature.#ctor(AsmResolver.DotNet.Signatures.BlobReaderContext@,System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature},AsmResolver.DotNet.Signatures.GenericContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Initializes a new lazy custom attribute signature from an input blob stream reader.
            </summary>
            <param name="readerContext">The blob reading context the signature is situated in.</param>
            <param name="fixedArgTypes">The types of all fixed arguments.</param>
            <param name="genericContext">The generic context the arguments live in.</param>
            <param name="reader">The input blob reader.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SerializedCustomAttributeSignature.Initialize(System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.CustomAttributeArgument},System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.CustomAttributeNamedArgument})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SerializedCustomAttributeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SerializedCustomAttributeSignature.IsCompatibleWith(AsmResolver.DotNet.ICustomAttributeType,AsmResolver.IErrorListener)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.SignatureComparer">
            <summary>
            Provides a mechanism for comparing signatures of members defined in a .NET assembly by their contents.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.CallingConventionSignature,AsmResolver.DotNet.Signatures.CallingConventionSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.CallingConventionSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.FieldSignature,AsmResolver.DotNet.Signatures.FieldSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.FieldSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.MethodSignature,AsmResolver.DotNet.Signatures.MethodSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.MethodSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.LocalVariablesSignature,AsmResolver.DotNet.Signatures.LocalVariablesSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.LocalVariablesSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature,AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.GenericInstanceMethodSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.PropertySignature,AsmResolver.DotNet.Signatures.PropertySignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.PropertySignature)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.SignatureComparer.Default">
            <summary>
            An immutable default instance of <see cref="T:AsmResolver.DotNet.Signatures.SignatureComparer"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.SignatureComparer.Flags">
            <summary>
            Flags for controlling comparison behavior.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.#ctor">
            <summary>
            The default <see cref="T:AsmResolver.DotNet.Signatures.SignatureComparer"/> constructor.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.#ctor(AsmResolver.DotNet.Signatures.SignatureComparisonFlags)">
            <summary>
            A <see cref="T:AsmResolver.DotNet.Signatures.SignatureComparer"/> constructor with a parameter for specifying the <see cref="P:AsmResolver.DotNet.Signatures.SignatureComparer.Flags"/>
            used in comparisons.
            </summary>
            <param name="flags">The <see cref="P:AsmResolver.DotNet.Signatures.SignatureComparer.Flags"/> used in comparisons.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.MemberReference,AsmResolver.DotNet.MemberReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.MemberReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.IMethodDescriptor,AsmResolver.DotNet.IMethodDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.IMethodDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.IFieldDescriptor,AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.IFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.MethodSpecification,AsmResolver.DotNet.MethodSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.MethodSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.IResolutionScope,AsmResolver.DotNet.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.AssemblyDescriptor,AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.AssemblyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.ITypeDescriptor,AsmResolver.DotNet.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.ITypeDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.ITypeDefOrRef,AsmResolver.DotNet.ITypeDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.ITypeDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.TypeDefinition,AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.TypeReference,AsmResolver.DotNet.TypeReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.TypeReference)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.TypeSpecification,AsmResolver.DotNet.TypeSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.TypeSpecification)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.ExportedType,AsmResolver.DotNet.ExportedType)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.ExportedType)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.InvalidTypeDefOrRef,AsmResolver.DotNet.InvalidTypeDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.InvalidTypeDefOrRef)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature,AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature,AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature,AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature,AsmResolver.DotNet.Signatures.Types.PointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature,AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature,AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature,AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature,AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature,AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature,AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature,AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature,AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature,AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.Types.TypeSignature},System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(System.Collections.Generic.IList{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.Equals(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature},System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.SignatureComparer.GetHashCode(System.Collections.Generic.IEnumerable{AsmResolver.DotNet.Signatures.Types.TypeSignature})">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.SignatureComparisonFlags">
            <summary>
            Flags for controlling the behavior of <see cref="T:AsmResolver.DotNet.Signatures.SignatureComparer"/>.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.ExactVersion">
            <summary>
            When neither <see cref="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.AcceptOlderVersions"/> nor <see cref="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.AcceptNewerVersions"/> are specified,
            the exact version number must match in the comparison of two assembly descriptors.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.AcceptOlderVersions">
            <summary>
            If this flag is used, the containing assembly of the second member to compare is
            allowed to be an older version than the containing assembly of the first member.
            </summary>
            <remarks>
            If this flag is used, then any member reference that is contained in a certain
            assembly (e.g. with version 1.1.0.0), will be considered equal to a member reference with the
            same name or signature contained in an assembly with a older version (e.g. 1.0.0.0).
            Otherwise, they will be treated as inequal.
            </remarks>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.AcceptNewerVersions">
            <summary>
            If this flag is used, the containing assembly of the second member to compare is
            allowed to be a newer version than the containing assembly of the first member.
            </summary>
            <remarks>
            If this flag is used, then any member reference that is contained in a certain
            assembly (e.g. with version 1.0.0.0), will be considered equal to a member reference with the
            same name or signature contained in an assembly with a newer version (e.g. 1.1.0.0).
            Otherwise, they will be treated as inequal.
            </remarks>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.SignatureComparisonFlags.VersionAgnostic">
            <summary>
            If this flag is used, version numbers will be excluded in the comparison of two
            assembly descriptors.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ArrayDimension">
            <summary>
            Represents a single dimension in an array specification.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayDimension.#ctor(System.Int32)">
            <summary>
            Creates a new array dimension.
            </summary>
            <param name="size">The number of elements in this dimension.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayDimension.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new array dimension.
            </summary>
            <param name="size">The number of elements in this dimension.</param>
            <param name="lowerBound">the lower bound for each index in the dimension (if specified)</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayDimension.Size">
            <summary>
            Gets or sets the number of elements in the dimension (if specified).
            </summary>
            <remarks>
            When this value is not specified (<c>null</c>), no upper bound on the number of elements is assumed by the CLR.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayDimension.LowerBound">
            <summary>
            Gets or sets the lower bound for each index in the dimension (if specified).
            </summary>
            <remarks>
            When this value is not specified (<c>null</c>), a lower bound of 0 is assumed by the CLR.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayDimension.Equals(AsmResolver.DotNet.Signatures.Types.ArrayDimension)">
            <summary>
            Determines whether two dimensions are considered equal.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayDimension.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayDimension.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature">
            <summary>
            Represents a single (complex) array type signature, which encodes a variable amount of array dimensions,
            as well as their sizes and lower bounds.
            </summary>
            <remarks>
            For simple single-dimension arrays, use <see cref="T:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature"/> instead.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new array type signature.
            </summary>
            <param name="baseType">The element type.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Int32)">
            <summary>
            Creates a new array type signature with the provided dimensions count.
            </summary>
            <param name="baseType">The element type.</param>
            <param name="dimensionCount">The number of dimensions.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature,AsmResolver.DotNet.Signatures.Types.ArrayDimension[])">
            <summary>
            Creates a new array type signature with the provided dimensions count.
            </summary>
            <param name="baseType">The element type.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.Dimensions">
            <summary>
            Gets a collection of dimensions.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.Validate">
            <summary>
            Verifies that the array signature only contains dimensions that are valid.
            </summary>
            <returns></returns>
            <remarks>
            An array signature is valid if all bounded dimensions are in the front of the dimensions list.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature">
            <summary>
            Represents a type modifier indicating a boxing of a value type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new boxed type signature..
            </summary>
            <param name="baseType">The type to box..</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature">
            <summary>
            Represents a type signature that describes a type that is passed on by reference.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new by reference type signature.
            </summary>
            <param name="baseType">The type that is passed on by reference.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory">
            <summary>
            Provides a mechanism for obtaining commonly used element type signatures in various blob signatures, defined
            in the common object runtime library, such as mscorlib (for .NET framework) or System.Private.CorLib
            (for .NET Core).
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.CreateMscorlib40TypeFactory(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Creates a new type factory that references mscorlib 4.0.0.0.
            </summary>
            <returns>The factory.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.#ctor(AsmResolver.DotNet.IResolutionScope)">
            <summary>
            Creates a new factory with the provided resolution scope referencing a common object runtime library.
            </summary>
            <param name="corLibScope">The reference to the common object runtime library.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.CorLibScope">
            <summary>
            Gets the resolution scope referencing the common object runtime (COR) library.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Void">
            <summary>
            Gets the element type signature for <see cref="T:System.Void"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Boolean">
            <summary>
            Gets the element type signature for <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Char">
            <summary>
            Gets the element type signature for <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.SByte">
            <summary>
            Gets the element type signature for <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Byte">
            <summary>
            Gets the element type signature for <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Int16">
            <summary>
            Gets the element type signature for <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.UInt16">
            <summary>
            Gets the element type signature for <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Int32">
            <summary>
            Gets the element type signature for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.UInt32">
            <summary>
            Gets the element type signature for <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Int64">
            <summary>
            Gets the element type signature for <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.UInt64">
            <summary>
            Gets the element type signature for <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Single">
            <summary>
            Gets the element type signature for <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Double">
            <summary>
            Gets the element type signature for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.String">
            <summary>
            Gets the element type signature for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.IntPtr">
            <summary>
            Gets the element type signature for <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.UIntPtr">
            <summary>
            Gets the element type signature for <see cref="T:System.UIntPtr"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.TypedReference">
            <summary>
            Gets the element type signature for <see cref="T:System.TypedReference"/>.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.Object">
            <summary>
            Gets the element type signature for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.FromType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Transforms the provided type descriptor to a common object runtime type signature.
            </summary>
            <param name="type">The type to transform to a corlib type signature.</param>
            <returns>The corlib type, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.FromElementType(AsmResolver.PE.DotNet.Metadata.Tables.Rows.ElementType)">
            <summary>
            Obtains the common object runtime type signature from its element type.
            </summary>
            <param name="elementType">The element type.</param>
            <returns>The corlib type, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.FromName(System.String,System.String)">
            <summary>
            Obtains the common object runtime type signature by its full name.
            </summary>
            <param name="ns">The namespace.</param>
            <param name="name">The name.</param>
            <returns>The corlib type, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeFactory.ExtractDotNetRuntimeInfo">
            <summary>
            Maps the corlib reference to the appropriate .NET or .NET Core version.
            </summary>
            <returns>The runtime information.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature">
            <summary>
            Represents a blob type signature referencing an element type defined in a common object runtime library such as
            mscorlib (.NET framework) or System.Private.CorLib (.NET Core).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.Type">
            <summary>
            Gets the reference to the type as it is defined in the common object runtime library.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.Scope">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.ToTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature">
            <summary>
            Represents a type signature that is annotated with a required or optional custom modifier type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.#ctor(AsmResolver.DotNet.ITypeDefOrRef,System.Boolean,AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new type signature annotated with a modifier type.
            </summary>
            <param name="modifierType">The modifier type.</param>
            <param name="isRequired">Indicates whether the modifier is required or optional.</param>
            <param name="baseType">The type signature that was annotated.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.IsRequired">
            <summary>
            Gets or sets a value indicating whether the custom modifier type is a required modifier.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.IsOptional">
            <summary>
            Gets or sets a value indicating whether the custom modifier type is an optional modifier.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.ModifierType">
            <summary>
            Gets or sets the type representing the modifier that is added to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature">
            <summary>
            Represents the type of an object referencing a function or method pointer.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.#ctor(AsmResolver.DotNet.Signatures.MethodSignature)">
            <summary>
            Creates a new function pointer type signature.
            </summary>
            <param name="signature">The signature of the function pointer.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.Signature">
            <summary>
            Gets or sets the signature of the function or method that is referenced by the object.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature">
            <summary>
            Represents an instantiation of a generic type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.#ctor(AsmResolver.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Creates a new instantiation of a generic type.
            </summary>
            <param name="genericType">The type to instantiate.</param>
            <param name="isValueType">Indicates the type is a value type or not.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.#ctor(AsmResolver.DotNet.ITypeDefOrRef,System.Boolean,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Creates a new instantiation of a generic type.
            </summary>
            <param name="genericType">The type to instantiate.</param>
            <param name="isValueType">Indicates the type is a value type or not.</param>
            <param name="typeArguments">The arguments to use for instantiating the generic type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.GenericType">
            <summary>
            Gets or sets the underlying generic type definition or reference.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.TypeArguments">
            <summary>
            Gets a collection of type arguments used to instantiate the generic type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature">
            <summary>
            Represents a type signature that references a type argument from a generic type or method.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.#ctor(AsmResolver.DotNet.Signatures.Types.GenericParameterType,System.Int32)">
            <summary>
            Creates a new reference to a generic parameter.
            </summary>
            <param name="parameterType">Indicates the parameter signature is declared by a type or a method.</param>
            <param name="index">The index of the referenced parameter.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.#ctor(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.Signatures.Types.GenericParameterType,System.Int32)">
            <summary>
            Creates a new reference to a generic parameter.
            </summary>
            <param name="module">The module in which this generic parameter signature resides.</param>
            <param name="parameterType">Indicates the parameter signature is declared by a type or a method.</param>
            <param name="index">The index of the referenced parameter.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.ParameterType">
            <summary>
            Gets or sets a value indicating whether this parameter signature is declared by a type or a method.
            generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.Index">
            <summary>
            Gets or sets the index of the referenced generic parameter.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.GenericParameterType">
            <summary>
            Provides members indicating whether a reference to a generic parameter is declared in a type or a method.
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Types.GenericParameterType.Type">
            <summary>
            Indicates the generic parameter type is defined in an enclosing type. 
            </summary>
        </member>
        <member name="F:AsmResolver.DotNet.Signatures.Types.GenericParameterType.Method">
            <summary>
            Indicates the generic parameter type is defined in an enclosing method.
            </summary>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator">
            <summary>
            Provides a mechanism for substituting generic type parameters in a type signature with arguments.
            </summary>
            <remarks>
            When the type signature does not contain any generic parameter, this activator might return the current
            instance of the type signature, to preserve heap allocations.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.Instance">
            <summary>
            Gets the default instance of the <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator"/> class
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.InstantiateFieldSignature(AsmResolver.DotNet.Signatures.FieldSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Instantiates a new field signature, substituting any generic type parameter in the signature with
            the activation context.
            </summary>
            <param name="signature">The signature to activate.</param>
            <param name="context">The generic context to put the type signature in.</param>
            <returns>The activated signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.InstantiatePropertySignature(AsmResolver.DotNet.Signatures.PropertySignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Instantiates a new method signature, substituting any generic type parameter in the signature with
            the activation context.
            </summary>
            <param name="signature">The signature to activate.</param>
            <param name="context">The generic context to put the type signature in.</param>
            <returns>The activated signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.InstantiateMethodSignature(AsmResolver.DotNet.Signatures.MethodSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Instantiates a new method signature, substituting any generic type parameter in the signature with
            the activation context.
            </summary>
            <param name="signature">The signature to activate.</param>
            <param name="context">The generic context to put the type signature in.</param>
            <returns>The activated signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.GenericTypeActivator.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature,AsmResolver.DotNet.Signatures.GenericContext)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ITypeSignatureResolver">
            <summary>
            Provides members for resolving raw metadata tokens and addresses to types.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureResolver.ResolveToken(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Resolves a metadata token to a type.
            </summary>
            <param name="context">The blob reading context the type is situated in.</param>
            <param name="token">The token to resolve.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureResolver.ResolveRuntimeType(AsmResolver.DotNet.Signatures.BlobReaderContext@,System.IntPtr)">
            <summary>
            Resolves an address to a runtime method table to a type signature.
            </summary>
            <param name="context">The blob reading context the type is situated in.</param>
            <param name="address">The address to resolve.</param>
            <returns>The type.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1">
            <summary>
            Provides members for visiting type signatures.
            </summary>
            <typeparam name="TResult">The type of value to return.</typeparam>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature)">
            <summary>
            Visits an instance of an <see cref="T:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`1.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2">
            <summary>
            Provides members for visiting type signatures.
            </summary>
            <typeparam name="TState">The type of additional state.</typeparam>
            <typeparam name="TResult">The type of value to return.</typeparam>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature,`0)">
            <summary>
            Visits an instance of an <see cref="T:AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.GenericParameterSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor`2.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature,`0)">
            <summary>
            Visits an instance of a <see cref="T:AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature"/>.
            </summary>
            <param name="signature">The signature to visit.</param>
            <param name="state">Additional state.</param>
            <returns>The result provided by the visitor.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder">
            <summary>
            Provides a mechanism for building up a fully qualified type names, as they are stored in custom attribute signatures.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.GetAssemblyQualifiedName(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Builds up an assembly qualified type name.
            </summary>
            <param name="signature">The type to convert to a string.</param>
            <returns>The built up type name.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.GetAssemblyQualifiedName(AsmResolver.DotNet.Signatures.Types.TypeSignature,System.Boolean)">
            <summary>
            Builds up an assembly qualified type name.
            </summary>
            <param name="signature">The type to convert to a string.</param>
            <param name="omitCorLib">Indicates any reference to corlib should not be included explicitly.</param>
            <returns>The built up type name.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitArrayType(AsmResolver.DotNet.Signatures.Types.ArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitBoxedType(AsmResolver.DotNet.Signatures.Types.BoxedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitByReferenceType(AsmResolver.DotNet.Signatures.Types.ByReferenceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitCorLibType(AsmResolver.DotNet.Signatures.Types.CorLibTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitCustomModifierType(AsmResolver.DotNet.Signatures.Types.CustomModifierTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitGenericInstanceType(AsmResolver.DotNet.Signatures.Types.GenericInstanceTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitGenericParameter(AsmResolver.DotNet.Signatures.Types.GenericParameterSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitPinnedType(AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitPointerType(AsmResolver.DotNet.Signatures.Types.PointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitSentinelType(AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitSzArrayType(AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitTypeDefOrRef(AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameBuilder.VisitFunctionPointerType(AsmResolver.DotNet.Signatures.Types.FunctionPointerTypeSignature)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameParser">
            <summary>
            Provides a mechanism for parsing a fully assembly qualified name of a type.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.Parsing.TypeNameParser.Parse(AsmResolver.DotNet.ModuleDefinition,System.String)">
            <summary>
            Parses a single fully assembly qualified name.
            </summary>
            <param name="module">The module containing the assembly qualified name.</param>
            <param name="canonicalName">The fully qualified assembly name of the type.</param>
            <returns>The parsed type.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.PhysicalTypeSignatureResolver">
            <summary>
            Provides an implementation for the <see cref="T:AsmResolver.DotNet.Signatures.Types.ITypeSignatureResolver"/> that resolves metadata tokens from
            the underlying module's tables stream.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PhysicalTypeSignatureResolver.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:AsmResolver.DotNet.Signatures.Types.PhysicalTypeSignatureResolver"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PhysicalTypeSignatureResolver.ResolveToken(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PhysicalTypeSignatureResolver.ResolveRuntimeType(AsmResolver.DotNet.Signatures.BlobReaderContext@,System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature">
            <summary>
            Represents a type modifier indicating the value is pinned into memory, and the garbage collector cannot
            change the location of a value at runtime.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new pinned type signature.
            </summary>
            <param name="baseType">The type to pin.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PinnedTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature">
            <summary>
            Represents a type signature that describes an unmanaged pointer that addresses a chunk of data in memory.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new pointer type signature.
            </summary>
            <param name="baseType">The type of values the pointer addresses.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.PointerTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature">
            <summary>
            Represents a sentinel type signature to be used in a method signature, indicating the start of any vararg
            argument types.
            </summary>
            <remarks>
            This type signature should not be used directly.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SentinelTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature">
            <summary>
            Represents a type signature describing a single dimension array with 0 as a lower bound.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new single-dimension array signature with 0 as a lower bound.
            </summary>
            <param name="baseType">The type of the elements to store in the array.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.SzArrayTypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature">
            <summary>
            Represents a type signature that references a type in the metadata tables of a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.#ctor(AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new type signature referencing a type in a type metadata table.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.#ctor(AsmResolver.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Creates a new type signature referencing a type in a type metadata table.
            </summary>
            <param name="type">The type to reference.</param>
            <param name="isValueType">Indicates whether the referenced type is a value type or not.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Type">
            <summary>
            Gets the metadata type that is referenced by this signature.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.ElementType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.ToTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeDefOrRefSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.TypeSignature">
            <summary>
            Provides a base for blob signatures that reference a type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.Name">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.ElementType">
            <summary>
            Gets the element type of the
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSignature.DeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.FromReader(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a type signature from a blob reader.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The blob signature reader.</param>
            <returns>The type signature.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the blob reader points to an element type that is
            invalid or unsupported.</exception>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.ReadTypeDefOrRef(AsmResolver.DotNet.Signatures.BlobReaderContext@,AsmResolver.IO.BinaryStreamReader@,System.Boolean)">
            <summary>
            Reads a TypeDefOrRef coded index from the provided blob reader.
            </summary>
            <param name="context">The blob reader context.</param>
            <param name="reader">The blob reader.</param>
            <param name="allowTypeSpec">Indicates the coded index to the type is allowed to be decoded to a member in
            the type specification table.</param>
            <returns>The decoded and resolved type definition or reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.WriteTypeDefOrRef(AsmResolver.DotNet.Signatures.BlobSerializationContext,AsmResolver.DotNet.ITypeDefOrRef,System.String)">
            <summary>
            Writes a TypeDefOrRef coded index to the output stream.
            </summary>
            <param name="context">The output stream.</param>
            <param name="type">The type to write.</param>
            <param name="propertyName">The property name that was written.</param>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.ToTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.GetUnderlyingTypeDefOrRef">
            <summary>
            Gets the underlying base type signature, without any extra adornments.
            </summary>
            <returns>The base signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.InstantiateGenericTypes(AsmResolver.DotNet.Signatures.GenericContext)">
            <summary>
            Substitutes any generic type parameter in the type signature with the parameters provided by
            the generic context.
            </summary>
            <param name="context">The generic context.</param>
            <returns>The instantiated type signature.</returns>
            <remarks>
            When the type signature does not contain any generic parameter, this method might return the current
            instance of the type signature.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the type signature using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to us.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.AcceptVisitor``1(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0})">
            <summary>
            Visit the current type signature using the provided visitor.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <typeparam name="TResult">The type of result the visitor produces.</typeparam>
            <returns>The result the visitor produced after visiting this type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.AcceptVisitor``2(AsmResolver.DotNet.Signatures.Types.ITypeSignatureVisitor{``0,``1},``0)">
            <summary>
            Visit the current type signature using the provided visitor.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="state">Additional state.</param>
            <typeparam name="TState">The type of additional state.</typeparam>
            <typeparam name="TResult">The type of result the visitor produces.</typeparam>
            <returns>The result the visitor produced after visiting this type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSignature.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature">
            <summary>
            Provides a base for type signatures that are based on another type signature.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Initializes a new type specification.
            </summary>
            <param name="baseType">The type to base the specification on.</param>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.BaseType">
            <summary>
            Gets the type this specification is based on.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.Namespace">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.Scope">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.GetUnderlyingTypeDefOrRef">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.WriteContents(AsmResolver.DotNet.Signatures.BlobSerializationContext@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.WriteBaseType(AsmResolver.DotNet.Signatures.BlobSerializationContext)">
            <summary>
            Writes <see cref="P:AsmResolver.DotNet.Signatures.Types.TypeSpecificationSignature.BaseType"/> to the output stream.
            </summary>
            <param name="context">The output stream.</param>
        </member>
        <member name="T:AsmResolver.DotNet.StandAloneSignature">
            <summary>
            Represents a blob signature that can be referenced by metadata token.
            </summary>
            <remarks>
            Stand-alone signatures are often used by the runtime for referencing local variable signatures, or serve
            as an operand for calli instructions.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.StandAloneSignature.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new stand-alone signature.
            </summary>
            <param name="token">The token of the stand-alone signature.</param>
        </member>
        <member name="M:AsmResolver.DotNet.StandAloneSignature.#ctor(AsmResolver.DotNet.Signatures.BlobSignature)">
            <summary>
            Wraps a blob signature into a new stand-alone signature.
            </summary>
            <param name="signature">The signature to assign a metadata token.</param>
        </member>
        <member name="P:AsmResolver.DotNet.StandAloneSignature.Signature">
            <summary>
            Gets or sets the signature that was referenced by this metadata member.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.StandAloneSignature.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.StandAloneSignature.GetSignature">
            <summary>
            Obtains the signature referenced by this metadata member.
            </summary>
            <returns>The signature</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.StandAloneSignature.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.StandAloneSignature.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.StandAloneSignature.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.StandAloneSignature.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.TokenAllocator">
            <summary>
            Provides a mechanism to assign metadata tokens
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.TokenAllocator.GetNextAvailableToken(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Obtains the next unused <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken"/> for the provided table.
            </summary>
            <param name="index">Type of <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken"/></param>
            <remarks>
            This method is pure. That is, it only returns the next available metadata token and does not claim
            any metadata token.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when an invalid <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.TableIndex"/> is provided.
            </exception>
            <returns>The next unused <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken"/>.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TokenAllocator.AssignNextAvailableToken(AsmResolver.DotNet.MetadataMember)">
            <summary>
            Determines the next metadata token for provided member and assigns it.
            </summary>
            <remarks>This method only succeeds when new or copied member is provided</remarks>
            <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="member"/> is null</exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="member"/> is already assigned a <see cref="T:AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken"/>
            </exception>
            <param name="member">The member to assign a new metadata token.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TokenAllocator.GetAssignees(AsmResolver.PE.DotNet.Metadata.Tables.TableIndex)">
            <summary>
            Obtains the members that were manually assigned a new metadata token using this token allocator.
            </summary>
            <param name="table">The table for which to get the assignees from.</param>
            <returns>The assignees.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.TypeDefinition">
            <summary>
            Represents a type (a class, interface or structure) defined in a .NET module.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new type definition.
            </summary>
            <param name="token">The token of the type definition.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes)">
            <summary>
            Creates a new type definition.
            </summary>
            <param name="ns">The namespace the type resides in.</param>
            <param name="name">The name of the type.</param>
            <param name="attributes">The attributes associated to the type.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.#ctor(AsmResolver.Utf8String,AsmResolver.Utf8String,AsmResolver.PE.DotNet.Metadata.Tables.Rows.TypeAttributes,AsmResolver.DotNet.ITypeDefOrRef)">
            <summary>
            Creates a new type definition.
            </summary>
            <param name="ns">The namespace the type resides in.</param>
            <param name="name">The name of the type.</param>
            <param name="attributes">The attributes associated to the type.</param>
            <param name="baseType">The super class that this type extends.</param>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Namespace">
            <summary>
            Gets or sets the namespace the type resides in.
            </summary>
            <remarks>
            This property corresponds to the Namespace column in the type definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
            <remarks>
            This property corresponds to the Name column in the type definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.FullName">
            <summary>
            Gets the full name (including namespace or declaring type full name) of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Attributes">
            <summary>
            Gets or sets the attributes associated to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNotPublic">
            <summary>
            Gets a value indicating whether the type is in a public scope or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsPublic">
            <summary>
            Gets or sets a value indicating whether the type is in a public scope or not.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedPublic">
            <summary>
            Gets or sets a value indicating whether the type is nested with public visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedPrivate">
            <summary>
            Gets or sets a value indicating whether the type is nested with private visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedFamily">
            <summary>
            Gets or sets a value indicating whether the type is nested with family visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedAssembly">
            <summary>
            Gets or sets a value indicating whether the type is nested with assembly visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedFamilyAndAssembly">
            <summary>
            Gets or sets a value indicating whether the type is nested with family and assembly visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNestedFamilyOrAssembly">
            <summary>
            Gets or sets a value indicating whether the type is nested with family or assembly visibility.
            </summary>
            <remarks>
            Updating the value of this property does not automatically make the type nested in another type.
            Similarly, adding this type to another enclosing type will not automatically update this property.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsAutoLayout">
            <summary>
            Gets or sets a value indicating whether the fields of the type are auto-laid out by the
            common language runtime (CLR).
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsSequentialLayout">
            <summary>
            Gets or sets a value indicating whether the fields of the type are laid out sequentially.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsExplicitLayout">
            <summary>
            Gets or sets a value indicating whether the fields of the type are laid out explicitly.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsClass">
            <summary>
            Gets or sets a value indicating whether the type is a class.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsInterface">
            <summary>
            Gets or sets a value indicating whether the type is an interface.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsAbstract">
            <summary>
            Gets or sets a value indicating whether the type is defined abstract and should be extended before
            an object can be instantiated.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsSealed">
            <summary>
            Gets or sets a value indicating whether the type is defined sealed and cannot be extended by a sub class.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsSpecialName">
            <summary>
            Gets or sets a value indicating whether the type has a special name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsRuntimeSpecialName">
            <summary>
            Gets or sets a value indicating whether the runtime should check the encoding of the name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsImport">
            <summary>
            Gets or sets a value indicating whether the type is imported.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsSerializable">
            <summary>
            Gets or sets a value indicating whether the type is serializable.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsAnsiClass">
            <summary>
            Gets or sets a value indicating whether LPTSTR string instances are interpreted as ANSI strings.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsUnicodeClass">
            <summary>
            Gets or sets a value indicating whether LPTSTR string instances are interpreted as Unicode strings.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsAutoClass">
            <summary>
            Gets or sets a value indicating whether LPTSTR string instances are interpreted automatically by the runtime.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsCustomFormatClass">
            <summary>
            Gets or sets a value indicating whether LPTSTR string instances are interpreted using a non-standard encoding.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsBeforeFieldInit">
            <summary>
            Gets or sets a value indicating the runtime should initialize the class before any time before the first
            static field access.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsForwarder">
            <summary>
            Gets or sets a value indicating the type is an exported type and forwards the definition to another module.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.HasSecurity">
            <summary>
            Gets or sets a value indicating the type has additional security attributes associated to it.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.BaseType">
            <summary>
            Gets or sets the super class that this type extends.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Module">
            <summary>
            Gets the module that defines the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.DeclaringType">
            <summary>
            When this type is nested, gets the enclosing type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsNested">
            <summary>
            Gets a value indicating whether the type is enclosed by another type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.NestedTypes">
            <summary>
            Gets a collection of nested types that this type defines.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsEnum">
            <summary>
            Gets a value indicating whether the type defines an enumeration of discrete values.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsDelegate">
            <summary>
            Gets a value indicating whether the type describes a delegate referring to a method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsModuleType">
            <summary>
            <c>true</c> if this is the global (i.e., &lt;Module&gt;) type, otherwise <c>false</c>.
            </summary>
            <remarks>
            If the global (i.e., &lt;Module&gt;) type was not added or does not exist yet in the <see cref="P:AsmResolver.DotNet.TypeDefinition.Module"/>,
            this will return <c>false</c>.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsReadOnly">
            <summary>
            Determines whether the type is marked as read-only.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.IsByRefLike">
            <summary>
            Determines whether the type is marked with the IsByRefLike attribute, indicating a ref struct definition.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Fields">
            <summary>
            Gets a collection of fields defined in the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Methods">
            <summary>
            Gets a collection of methods defined in the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Properties">
            <summary>
            Gets a collection of properties defined in the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Events">
            <summary>
            Gets a collection of events defined in the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.SecurityDeclarations">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.GenericParameters">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.Interfaces">
            <summary>
            Gets a collection of interfaces that are implemented by the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.MethodImplementations">
            <summary>
            Gets a collection of methods that are explicitly implemented by the type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeDefinition.ClassLayout">
            <summary>
            Gets or sets an override to the layout of a class, indicating its total and packing size.
            </summary>
            <remarks>
            When this property is set to <c>null</c>, the runtime decides the layout of the class.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.InheritsFrom(System.String)">
            <summary>
            Determines whether the type inherits from a particular type
            </summary>
            <param name="fullName">The full name of the type</param>
            <returns>Whether the current <see cref="T:AsmResolver.DotNet.TypeDefinition"/> inherits the type</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.Implements(System.String)">
            <summary>
            Determines whether the type implements a particular interface
            </summary>
            <param name="fullName">The full name of the interface</param>
            <returns>Whether the type implements the interface</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.ToTypeSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.ToTypeSignature(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the type definition using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.IsAccessibleFromType(AsmResolver.DotNet.TypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.ToTypeReference">
            <summary>
            Creates a new type reference to this type definition.
            </summary>
            <returns>The type reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetEnumUnderlyingType">
            <summary>
            When this type is an enum, extracts the underlying enum type.
            </summary>
            <returns>The type, or <c>null</c> if none was found.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when the type is not an enum.</exception>
            <remarks>
            To verify whether a type is an enum or not, use the <see cref="P:AsmResolver.DotNet.TypeDefinition.IsEnum"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetStaticConstructor">
            <summary>
            Gets the static constructor that is executed when the CLR loads this type.
            </summary>
            <returns>The static constructor, or <c>null</c> if none is present.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetOrCreateStaticConstructor">
            <summary>
            Gets or creates the static constructor that is executed when the CLR loads this type.
            </summary>
            <returns>The static constructor, or <c>null</c> if none is present.</returns>
            <remarks>
            If the static constructor was not present in the type, it will be inserted as the first method in the type.
            This method can only be used when the type has already been added to the metadata image.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetOrCreateStaticConstructor(AsmResolver.DotNet.ModuleDefinition)">
            <summary>
            Gets or creates the static constructor that is executed when the CLR loads this type.
            </summary>
            <param name="module">The image to use for creating the signature of the constructor if it is not present yet.</param>
            <returns>The static constructor, or <c>null</c> if none is present.</returns>
            <remarks>
            If the static constructor was not present in the type, it will be inserted as the first method in the type.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetNamespace">
            <summary>
            Obtains the namespace of the type definition.
            </summary>
            <returns>The namespace.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Namespace"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetName">
            <summary>
            Obtains the name of the type definition.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetBaseType">
            <summary>
            Obtains the base type of the type definition.
            </summary>
            <returns>The namespace.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.BaseType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetNestedTypes">
            <summary>
            Obtains the list of nested types that this type defines.
            </summary>
            <returns>The nested types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.NestedTypes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetDeclaringType">
            <summary>
            Obtains the enclosing class of the type definition if available.
            </summary>
            <returns>The enclosing type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetFields">
            <summary>
            Obtains the collection of fields that this type defines.
            </summary>
            <returns>The fields.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Fields"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetMethods">
            <summary>
            Obtains the collection of methods that this type defines.
            </summary>
            <returns>The methods.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Methods"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetProperties">
            <summary>
            Obtains the collection of properties that this type defines.
            </summary>
            <returns>The properties.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Properties"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetEvents">
            <summary>
            Obtains the collection of events that this type defines.
            </summary>
            <returns>The events.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Events"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetSecurityDeclarations">
            <summary>
            Obtains the list of security declarations assigned to the member.
            </summary>
            <returns>The security declarations</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.SecurityDeclarations"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetGenericParameters">
            <summary>
            Obtains the list of generic parameters this member declares.
            </summary>
            <returns>The generic parameters</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.GenericParameters"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetInterfaces">
            <summary>
            Obtains the list of interfaces this type implements.
            </summary>
            <returns>The interfaces.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.Interfaces"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetMethodImplementations">
            <summary>
            Obtains the list of methods this type implements.
            </summary>
            <returns>The method implementations.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.MethodImplementations"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.GetClassLayout">
            <summary>
            Obtains the class layout of this type.
            </summary>
            <returns>The class layout.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeDefinition.ClassLayout"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDefinition.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.TypeDescriptorExtensions">
            <summary>
            Provides convenience extension methods to instances of <see cref="T:AsmResolver.DotNet.ITypeDescriptor"/>.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.IsTypeOf(AsmResolver.DotNet.ITypeDescriptor,System.String,System.String)">
            <summary>
            Determines whether a type matches a namespace and name pair.
            </summary>
            <param name="type">The type.</param>
            <param name="ns">The namespace.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the name and the namespace of the type matches the provided values,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.IsTypeOfUtf8(AsmResolver.DotNet.ITypeDefOrRef,AsmResolver.Utf8String,AsmResolver.Utf8String)">
            <summary>
            Determines whether a type matches a namespace and name pair.
            </summary>
            <param name="type">The type.</param>
            <param name="ns">The namespace.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the name and the namespace of the type matches the provided values,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.IsTypeOfUtf8(AsmResolver.DotNet.ExportedType,AsmResolver.Utf8String,AsmResolver.Utf8String)">
            <summary>
            Determines whether a type matches a namespace and name pair.
            </summary>
            <param name="type">The type.</param>
            <param name="ns">The namespace.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the name and the namespace of the type matches the provided values,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeSzArrayType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Constructs a new single-dimension, zero based array signature with the provided type descriptor
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <returns>The constructed array type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeArrayType(AsmResolver.DotNet.ITypeDescriptor,System.Int32)">
            <summary>
            Constructs a new single-dimension, zero based array signature with the provided type descriptor
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <param name="dimensionCount">The number of dimensions in the array.</param>
            <returns>The constructed array type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeArrayType(AsmResolver.DotNet.ITypeDescriptor,AsmResolver.DotNet.Signatures.Types.ArrayDimension[])">
            <summary>
            Constructs a new single-dimension, zero based array signature with the provided type descriptor
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <param name="dimensions">The dimensions of the array.</param>
            <returns>The constructed array type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeByReferenceType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Constructs a new by-reference type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <returns>The constructed by-reference type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakePinnedType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Constructs a new pinned type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <returns>The constructed by-reference type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakePointerType(AsmResolver.DotNet.ITypeDescriptor)">
            <summary>
            Constructs a new pointer type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <returns>The constructed by-reference type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeModifierType(AsmResolver.DotNet.ITypeDescriptor,AsmResolver.DotNet.ITypeDefOrRef,System.Boolean)">
            <summary>
            Constructs a new pointer type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <param name="modifierType">The modifier type to add.</param>
            <param name="isRequired">Indicates whether the modifier is required or optional.</param>
            <returns>The constructed by-reference type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeGenericInstanceType(AsmResolver.DotNet.ITypeDescriptor,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Constructs a new pointer type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <param name="typeArguments">The arguments to instantiate the type with.</param>
            <returns>The constructed by-reference type signature.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.MakeGenericInstanceType(AsmResolver.DotNet.ITypeDescriptor,System.Boolean,AsmResolver.DotNet.Signatures.Types.TypeSignature[])">
            <summary>
            Constructs a new pointer type signature with the provided type descriptor as element type.
            as element type.
            </summary>
            <param name="type">The element type.</param>
            <param name="isValueType"><c>true</c> if the type is a value type, <c>false</c> otherwise.</param>
            <param name="typeArguments">The arguments to instantiate the type with.</param>
            <returns>The constructed by-reference type signature.</returns>
            <remarks>
            This function can be used to avoid type resolution on type references.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.CreateTypeReference(AsmResolver.DotNet.IResolutionScope,System.String,System.String)">
            <summary>
            Constructs a reference to a type within the provided resolution scope.
            </summary>
            <param name="scope">The scope the type is defined in.</param>
            <param name="ns">The namespace of the type.</param>
            <param name="name">The name of the type.</param>
            <returns>The constructed reference.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.CreateTypeReference(AsmResolver.DotNet.ITypeDefOrRef,System.String)">
            <summary>
            Constructs a reference to a nested type.
            </summary>
            <param name="declaringType">The enclosing type.</param>
            <param name="nestedTypeName">The name of the nested type.</param>
            <returns>The constructed reference.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="declaringType"/> cannot be used as a declaring type of a type reference.
            </exception>
        </member>
        <member name="M:AsmResolver.DotNet.TypeDescriptorExtensions.CreateMemberReference(AsmResolver.DotNet.IMemberRefParent,System.String,AsmResolver.DotNet.Signatures.MemberSignature)">
            <summary>
            Constructs a reference to a member declared within the provided parent member.
            </summary>
            <param name="parent">The declaring member.</param>
            <param name="memberName">The name of the member to reference.</param>
            <param name="signature">The signature of the member to reference.</param>
            <returns>The constructed reference.</returns>
        </member>
        <member name="T:AsmResolver.DotNet.TypeReference">
            <summary>
            Represents a reference to a type defined in a .NET assembly.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes a new empty type reference.
            </summary>
            <param name="token">The token of the type reference.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.#ctor(AsmResolver.DotNet.IResolutionScope,AsmResolver.Utf8String,AsmResolver.Utf8String)">
            <summary>
            Creates a new reference to a type.
            </summary>
            <param name="scope">The scope that defines the type.</param>
            <param name="ns">The namespace the type resides in.</param>
            <param name="name">The name of the type.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.#ctor(AsmResolver.DotNet.ModuleDefinition,AsmResolver.DotNet.IResolutionScope,AsmResolver.Utf8String,AsmResolver.Utf8String)">
            <summary>
            Creates a new reference to a type.
            </summary>
            <param name="module">The module that references the type.</param>
            <param name="scope">The scope that defines the type.</param>
            <param name="ns">The namespace the type resides in.</param>
            <param name="name">The name of the type.</param>
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.Name">
            <summary>
            Gets or sets the name of the referenced type.
            </summary>
            <remarks>
            This property corresponds to the Name column in the type reference table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.Namespace">
            <summary>
            Gets or sets the namespace the type is residing in.
            </summary>
            <remarks>
            This property corresponds to the Namespace column in the type definition table.
            </remarks>
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeReference.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.ToTypeSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.ToTypeSignature(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the type reference using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.GetName">
            <summary>
            Obtains the name of the type reference.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeReference.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.GetNamespace">
            <summary>
            Obtains the namespace of the type reference.
            </summary>
            <returns>The namespace.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeReference.Namespace"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.GetScope">
            <summary>
            Obtains the scope of the type reference.
            </summary>
            <returns>The scope.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeReference.Scope"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeReference.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.DotNet.TypeSpecification">
            <summary>
            Represents a type that allows for assigning metadata tokens to type signatures stored in the blob stream.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.#ctor(AsmResolver.PE.DotNet.Metadata.Tables.MetadataToken)">
            <summary>
            Initializes an empty type specification.
            </summary>
            <param name="token">The token of the type specification.</param>
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.#ctor(AsmResolver.DotNet.Signatures.Types.TypeSignature)">
            <summary>
            Creates a new type specification.
            </summary>
            <param name="signature">The type signature to assign a metadata token.</param>
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.Signature">
            <summary>
            Gets or sets the type signature that this type specification is referencing.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.Name">
            <summary>
            Gets or sets the name of the referenced type.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.Namespace">
            <summary>
            Gets or sets the namespace the type is residing in.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.FullName">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.Module">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.Scope">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.AsmResolver#DotNet#IMemberDescriptor#DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.IsValueType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.DotNet.TypeSpecification.CustomAttributes">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.ToTypeSignature">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.ToTypeSignature(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.IsImportedInModule(AsmResolver.DotNet.ModuleDefinition)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <summary>
            Imports the type specification using the provided reference importer object.
            </summary>
            <param name="importer">The reference importer to use.</param>
            <returns>The imported type.</returns>
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.AsmResolver#DotNet#IImportable#ImportWith(AsmResolver.DotNet.ReferenceImporter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.Resolve">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.GetSignature">
            <summary>
            Obtains the signature the type specification is referencing.
            </summary>
            <returns>The signature.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeSpecification.Signature"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.ToString">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.DotNet.TypeSpecification.GetCustomAttributes">
            <summary>
            Obtains the list of custom attributes assigned to the member.
            </summary>
            <returns>The attributes</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.DotNet.TypeSpecification.CustomAttributes"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.DotNet.UnmanagedExportInfo">
            <summary>
            Provides information about how a method should be exported as an unmanaged symbol in the final PE file.
            </summary>
        </member>
        <member name="M:AsmResolver.DotNet.UnmanagedExportInfo.#ctor(System.UInt32,AsmResolver.PE.DotNet.VTableFixups.VTableType)">
            <summary>
            Creates a new instance of the export information, exporting the method by ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <param name="vTableType">The type of VTable fixup to apply.</param>
        </member>
        <member name="M:AsmResolver.DotNet.UnmanagedExportInfo.#ctor(System.String,AsmResolver.PE.DotNet.VTableFixups.VTableType)">
            <summary>
            Creates a new instance of the export information, exporting the method by name.
            </summary>
            <param name="name">The unmanaged name, as it appears in the export directory.</param>
            <param name="vTableType">The type of VTable fixup to apply.</param>
        </member>
        <member name="M:AsmResolver.DotNet.UnmanagedExportInfo.#ctor(System.UInt32,System.String,AsmResolver.PE.DotNet.VTableFixups.VTableType)">
            <summary>
            Creates a new instance of the export information, exporting the method by name.
            </summary>
            <param name="ordinal">The new ordinal to use.</param>
            <param name="name">The unmanaged name, as it appears in the export directory.</param>
            <param name="vTableType">The type of VTable fixup to apply.</param>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.Ordinal">
            <summary>
            When <see cref="P:AsmResolver.DotNet.UnmanagedExportInfo.HasFixedOrdinal"/> is <c>true</c>, gets the ordinal that is used to export the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.Name">
            <summary>
            When <see cref="P:AsmResolver.DotNet.UnmanagedExportInfo.IsByName"/> is <c>true</c>, gets the name that is used to export the method.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.HasFixedOrdinal">
            <summary>
            Gets a value indicating whether the export is fixed to an ordinal.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.IsByOrdinal">
            <summary>
            Gets a value indicating whether the method is exported by ordinal.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.IsByName">
            <summary>
            Gets a value indicating whether the method is exported by name.
            </summary>
        </member>
        <member name="P:AsmResolver.DotNet.UnmanagedExportInfo.VTableType">
            <summary>
            Gets a value indicating the type of VTable fixup to apply to the export.
            </summary>
        </member>
    </members>
</doc>
