<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsmResolver.Symbols.Pdb</name>
    </assembly>
    <members>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf">
            <summary>
            Represents a leaf containing a list of type arguments for a function or method.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes an empty argument list.
            </summary>
            <param name="typeIndex">The type index to assign to the list.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.#ctor">
            <summary>
            Creates a new empty argument list.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord[])">
            <summary>
            Creates a new argument list.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.Types">
            <summary>
            Gets an ordered collection of types that correspond to the types of each parameter.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.GetArgumentTypes">
            <summary>
            Obtains the argument types stored in the list.
            </summary>
            <returns>The types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.Types"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord">
            <summary>
            Represents a type describing an array of elements.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty array type.
            </summary>
            <param name="typeIndex">The type index to assign to the type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,System.UInt64)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The type of each element in the array.</param>
            <param name="indexType">The type to use for indexing into the array.</param>
            <param name="length">The number of elements in the array.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,System.UInt64,AsmResolver.Utf8String)">
            <summary>
            Creates a new array type.
            </summary>
            <param name="elementType">The type of each element in the array.</param>
            <param name="indexType">The type to use for indexing into the array.</param>
            <param name="length">The number of elements in the array.</param>
            <param name="name">The name of the array type.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.ElementType">
            <summary>
            Gets or sets the type of each element in the array.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.IndexType">
            <summary>
            Gets or sets the type that is used to index into the array.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.Length">
            <summary>
            Gets or sets the number of elements in the array.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.GetElementType">
            <summary>
            Obtains the element type of the array.
            </summary>
            <returns>The element type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.ElementType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.GetIndexType">
            <summary>
            Obtains the index type of the array.
            </summary>
            <returns>The index type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.IndexType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.GetName">
            <summary>
            Obtains the name type of the array.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.BaseClassField">
            <summary>
            Represents a reference to a base class object in a structure.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty base class.
            </summary>
            <param name="typeIndex">The type index to assign to the base class field.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Creates a new base class field.
            </summary>
            <param name="type">The base type to reference.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.Type">
            <summary>
            Gets or sets the base type that this base class is referencing.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.Offset">
            <summary>
            Gets or sets the offset of the base within the class.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.GetBaseType">
            <summary>
            Obtains the base type that the class is referencing.
            </summary>
            <returns>The base type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.Type"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BaseClassField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord">
            <summary>
            Represents a bit field type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes an empty bit field record.
            </summary>
            <param name="typeIndex">The type index to assign to the bit field type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,System.Byte,System.Byte)">
            <summary>
            Creates a new bit field record.
            </summary>
            <param name="type">The type of the bit field.</param>
            <param name="position">The bit index the bit field starts at.</param>
            <param name="length">The number of bits the bit field spans.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.Type">
            <summary>
            Gets or sets the base type that this bit field is referencing.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.Position">
            <summary>
            Gets or sets the bit index that this bit fields starts at.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.Length">
            <summary>
            Gets or sets the number of bits that this bit fields spans.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.GetBaseType">
            <summary>
            Obtains the base type that the bit field is referencing.
            </summary>
            <returns>The base type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.Type"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord">
            <summary>
            Represents a class, structure or interface type in a PDB.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind,System.UInt32)">
            <summary>
            Initializes an empty class type.
            </summary>
            <param name="kind">The kind of type.</param>
            <param name="typeIndex">The type index to assign to the class type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the provided kind is not a class, structure or interface.
            </exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind,AsmResolver.Utf8String,AsmResolver.Utf8String,System.UInt64,AsmResolver.Symbols.Pdb.Leaves.StructureAttributes,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Creates a new class type record.
            </summary>
            <param name="kind">The kind.</param>
            <param name="name">The name of the type.</param>
            <param name="uniqueName">The unique mangled name of the type.</param>
            <param name="size">The size in bytes of the type.</param>
            <param name="attributes">Attributes describing the shape of the type.</param>
            <param name="baseType">The type that this type is derived from, if any.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the provided kind is not a class, structure or interface.
            </exception>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.Size">
            <summary>
            Gets or sets the number bytes that this class spans.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.UniqueName">
            <summary>
            Gets or sets the uniquely identifiable name for this type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.VTableShape">
            <summary>
            Gets or sets the shape of the virtual function table of this type, if available.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.GetUniqueName">
            <summary>
            Obtains the uniquely identifiable name of the type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.UniqueName"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.GetVTableShape">
            <summary>
            Obtains the shape of the virtual function table name of the type.
            </summary>
            <returns>The shape.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord.VTableShape"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention">
            <summary>
            Provides members defining all calling conventions that can be specified in a PDB image.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearC">
            <summary>
            Indicates a near call using the cdecl calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.FarC">
            <summary>
            Indicates a far call using the cdecl calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearPascal">
            <summary>
            Indicates a near call using the Pascal calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.FarPascal">
            <summary>
            Indicates a far call using the Pascal calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearFast">
            <summary>
            Indicates a near call using the fastcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.FarFast">
            <summary>
            Indicates a far call using the fastcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.Skipped">
            <summary>
            Skipped (unused) call index
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearStd">
            <summary>
            Indicates a near call using the stdcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.FarStd">
            <summary>
            Indicates a far call using the stdcall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearSys">
            <summary>
            Indicates a near call using the syscall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.FarSys">
            <summary>
            Indicates a far call using the syscall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.ThisCall">
            <summary>
            Indicates a call using the thiscall calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.MipsCall">
            <summary>
            Indicates a call using the MIPS calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.Generic">
            <summary>
            Indicates a generic calling sequence.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.AlphaCall">
            <summary>
            Indicates a call using the Alpha calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.PpcCall">
            <summary>
            Indicates a call using the PowerPC calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.ShCall">
            <summary>
            Indicates a call using the Hitachi SuperH calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.ArmCall">
            <summary>
            Indicates a call using the ARM calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.Am33Call">
            <summary>
            Indicates a call using the AM33  calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.TriCall">
            <summary>
            Indicates a call using the TriCore  calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.Sh5Call">
            <summary>
            Indicates a call using the Hitachi SuperH-5  calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.M32RCall">
            <summary>
            Indicates a call using the M32R  calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.ClrCall">
            <summary>
            Indicates a call using the clr  calling convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.Inline">
            <summary>
            Marker for routines always inlined and thus lacking a convention.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention.NearVector">
            <summary>
            Indicates a near call using the vectorcall calling convention.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord">
            <summary>
            Provides a base for all code view types that can define one or more fields.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty composite type.
            </summary>
            <param name="typeIndex">The type index to assign to the type.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.StructureAttributes">
            <summary>
            Gets or sets the structural attributes assigned to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.Fields">
            <summary>
            Gets a collection of fields that are defined in the enum.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.GetName">
            <summary>
            Obtains the new name of the type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.GetFields">
            <summary>
            Obtains the fields defined in the type.
            </summary>
            <returns>The fields.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewCompositeTypeRecord.Fields"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField">
            <summary>
            Represents a data member in a class or structure type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty instance data member.
            </summary>
            <param name="typeIndex">The type index to assign to the member.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Utf8String)">
            <summary>
            Creates a new data member.
            </summary>
            <param name="dataType">The data type of the member.</param>
            <param name="name">The name of the member.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.DataType">
            <summary>
            Gets or sets the data type of the member.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.GetDataType">
            <summary>
            Obtains the data type of the member.
            </summary>
            <returns>The data type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.DataType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDataField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord">
            <summary>
            Provides a base for all custom types that may be derived from a base type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord.#ctor(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord.BaseType">
            <summary>
            Gets or sets the base type that this type is deriving from.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord.GetBaseType">
            <summary>
            Obtains the type that the type is derived from.
            </summary>
            <returns>The type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord.BaseType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewDerivedTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewField">
            <summary>
            Represents a single record in a field list of a TPI or IPI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty CodeView field leaf.
            </summary>
            <param name="typeIndex">The type index to assign to the leaf.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewField.Attributes">
            <summary>
            Gets or sets the attributes associated to the field.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewField.IsIntroducingVirtual">
            <summary>
            Gets a value indicating whether the field is a newly introduced virtual function.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes">
            <summary>
            Provides members defining all flags that can be assigned to a field, method or class.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.None">
            <summary>
            Indicates no attributes were assigned to the field.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Private">
            <summary>
            Indicates the field is marked private.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Protected">
            <summary>
            Indicates the field is marked protected.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Public">
            <summary>
            Indicates the field is marked public.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.AccessMask">
            <summary>
            Provides the bit-mask that can be used to extract the access-level of the field.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Virtual">
            <summary>
            Indicates the method is a virtual method.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Static">
            <summary>
            Indicates the method is a static method.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Friend">
            <summary>
            Indicates the method can be accessed only from within the current module.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.IntroducingVirtual">
            <summary>
            Indicates the method is a new introducing virtual method.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.PureVirtual">
            <summary>
            Indicates the method is a pure virtual method.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.PureIntroducingVirtual">
            <summary>
            Indicates the method is a new introducing pure virtual method.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.MethodPropertiesMask">
            <summary>
            Provides the bit-mask that can be used to extract the method properties of the field.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Pseudo">
            <summary>
            Indicates the field is compiler generated and does not exist.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.NoInherit">
            <summary>
            Indicates the class cannot be inherited.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.NoConstruct">
            <summary>
            Indicates the class cannot be constructed.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.CompilerGenerated">
            <summary>
            Indicates the field is compiler generated but does exist.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes.Sealed">
            <summary>
            Indicates the method cannot be overridden.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf">
            <summary>
            Represents a single leaf record in a TPI or IPI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes an empty CodeView leaf.
            </summary>
            <param name="typeIndex">The type index to assign to the leaf.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf.LeafKind">
            <summary>
            Gets the type kind this record encodes.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf.TypeIndex">
            <summary>
            Gets the type index the type is associated to.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind">
            <summary>
            Provides members defining all possible type record kinds that can be stored in a TPI or IPI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind.SimpleType">
            <summary>
            This is not really a type defined in PDB spec, but is used to indicate simple types.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField">
            <summary>
            Represents a single record in a field list that is assigned a name.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty CodeView field leaf.
            </summary>
            <param name="typeIndex">The type index to assign to the leaf.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField.GetName">
            <summary>
            Obtains the name of the field.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewNamedField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord">
            <summary>
            Represents a single type record in a TPI or IPI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes an empty CodeView type record.
            </summary>
            <param name="typeIndex">The type index to assign to the leaf.</param>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.EnumerateField">
            <summary>
            Represents a single enumerate field leaf in a field list.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty enumerate field leaf.
            </summary>
            <param name="typeIndex">The type index to assign to the enumerate field.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.#ctor(AsmResolver.Utf8String,System.Object,AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes)">
            <summary>
            Creates a new enumerate field leaf.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="value">The value assigned to the field.</param>
            <param name="attributes">The attributes associated to the field.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.Value">
            <summary>
            Gets or sets the constant value assigned to the field.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.GetValue">
            <summary>
            Obtains the value assigned to the field.
            </summary>
            <returns>The value.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.Value"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumerateField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.EnumTypeRecord">
            <summary>
            Represents an enum type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty enum type.
            </summary>
            <param name="typeIndex">The type index to assign to the enum type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.EnumTypeRecord.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.StructureAttributes)">
            <summary>
            Creates a new enum type.
            </summary>
            <param name="name">The name of the enum.</param>
            <param name="underlyingType">The underlying type of all members in the enum.</param>
            <param name="attributes">The structural attributes assigned to the enum.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.EnumTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf">
            <summary>
            Represents a leaf containing a list of fields.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes an empty field list.
            </summary>
            <param name="typeIndex">The type index to assign to the list.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.#ctor">
            <summary>
            Creates a new empty field list.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.Entries">
            <summary>
            Gets a collection of fields stored in the list.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.GetEntries">
            <summary>
            Obtains the fields stored in the list.
            </summary>
            <returns>The fields</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf.Entries"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField">
            <summary>
            Represents an instance data member in a class or structure type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty instance data member.
            </summary>
            <param name="typeIndex">The type index to assign to the member.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField.#ctor(AsmResolver.Utf8String,System.UInt64,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Creates a new instance data member.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="offset">The byte offset within the class or structure that the member is stored at.</param>
            <param name="dataType">The data type of the member.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField.Offset">
            <summary>
            Gets or sets the byte offset within the class or structure that the member is stored at.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionAttributes">
            <summary>
            Provides members defining all attributes that can be assigned to a member function.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionAttributes.CxxReturnUdt">
            <summary>
            Indicates if the function is a C++ style ReturnUDT function.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionAttributes.Ctor">
            <summary>
            Indicates the function is an instance constructor.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionAttributes.CtorVBase">
            <summary>
            Indicates the function is an instance constructor of a class with virtual bases.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf">
            <summary>
            Represents a single instance member function.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes an empty member function.
            </summary>
            <param name="typeIndex">The type index to assign to the function.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf)">
            <summary>
            Creates a new member function.
            </summary>
            <param name="returnType">The return type of the function.</param>
            <param name="declaringType">The declaring type of the function.</param>
            <param name="arguments">The argument types of the function.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ReturnType">
            <summary>
            Gets or sets the return type of the function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.DeclaringType">
            <summary>
            Gets or sets the type that declares this member function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ThisType">
            <summary>
            Gets or sets the type of the this pointer that is used to access the member function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.CallingConvention">
            <summary>
            Gets or sets the convention that is used when calling the member function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.Attributes">
            <summary>
            Gets or sets the attributes associated to the function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.Arguments">
            <summary>
            Gets or sets the list of types of the parameters that this function defines.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ThisAdjuster">
            <summary>
            Gets or sets the offset to adjust the this pointer with before devirtualization of this method.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.GetReturnType">
            <summary>
            Obtains the return type of the function.
            </summary>
            <returns>The return type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ReturnType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.GetDeclaringType">
            <summary>
            Obtains the declaring type of the function.
            </summary>
            <returns>The declaring type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.DeclaringType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.GetThisType">
            <summary>
            Obtains the this-type of the function.
            </summary>
            <returns>The this-type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ThisType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.GetArguments">
            <summary>
            Obtains the argument types of the function.
            </summary>
            <returns>The argument types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.Arguments"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry">
            <summary>
            Represents one single entry in a list of overloaded methods.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.#ctor">
            <summary>
            Initializes an empty method list entry.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes,AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf)">
            <summary>
            Creates a new method list entry.
            </summary>
            <param name="attributes">The attributes associated to this method.</param>
            <param name="function">The referenced function.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes,AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf,System.UInt32)">
            <summary>
            Creates a new method list entry.
            </summary>
            <param name="attributes">The attributes associated to this method.</param>
            <param name="function">The referenced function.</param>
            <param name="vTableOffset">The offset to the slot the virtual function table that this method occupies.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.Attributes">
            <summary>
            Gets or sets the attributes associated to this method.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.Function">
            <summary>
            Gets or sets the function that is referenced by this method.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.IsIntroducingVirtual">
            <summary>
            Gets a value indicating whether the function is a newly introduced virtual function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.VTableOffset">
            <summary>
            When this method is an introducing virtual method, gets or sets the offset to the slot the virtual function
            table that this method occupies.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.GetFunction">
            <summary>
            Obtains the function that this method references.
            </summary>
            <returns>The function.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.Function"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf">
            <summary>
            Represents a leaf record containing a list of overloaded methods.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes an empty method list.
            </summary>
            <param name="typeIndex">The type index to assign to the list.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.#ctor">
            <summary>
            Creates a new empty method list.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.#ctor(AsmResolver.Symbols.Pdb.Leaves.MethodListEntry[])">
            <summary>
            Creates a new method list.
            </summary>
            <param name="entries">The methods to include.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.Entries">
            <summary>
            Gets a collection of methods stored in the list.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.GetEntries">
            <summary>
            Obtains the methods stored in the list.
            </summary>
            <returns>The methods</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf.Entries"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ModifierAttributes">
            <summary>
            Provides members defining all possible modifiers that can be added to a type using a Modifier type record in a
            TPI or IPI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.ModifierAttributes.Const">
            <summary>
            Indicates the type is marked as const.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.ModifierAttributes.Volatile">
            <summary>
            Indicates the type is marked as volatile.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.ModifierAttributes.Unaligned">
            <summary>
            Indicates the type is marked as unaligned.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord">
            <summary>
            Represents a type that is annotated with extra modifiers.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty modifier type.
            </summary>
            <param name="typeIndex">The type index to assign to the modifier type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.ModifierAttributes)">
            <summary>
            Creates a new modified type.
            </summary>
            <param name="type">The type to be modified.</param>
            <param name="attributes">The attributes describing the shape of the pointer.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.BaseType">
            <summary>
            Gets or sets the type that is annotated.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.Attributes">
            <summary>
            Gets or sets the annotations that were added to the type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.IsConst">
            <summary>
            Gets or sets a value indicating whether the type is marked as const.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.IsVolatile">
            <summary>
            Gets or sets a value indicating whether the type is marked as volatile.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.IsUnaligned">
            <summary>
            Gets or sets a value indicating whether the type is marked as unaligned.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.GetBaseType">
            <summary>
            Obtains the base type of the modifier type.
            </summary>
            <returns>The base type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.BaseType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField">
            <summary>
            Represents a field in a type that references a nested type definition.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty nested type.
            </summary>
            <param name="typeIndex">The type index to assign to the nested type field.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Utf8String)">
            <summary>
            Creates a new nested type field.
            </summary>
            <param name="type">The definition of the nested type</param>
            <param name="name">The name of the nested type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes)">
            <summary>
            Creates a new nested type (extended) field.
            </summary>
            <param name="type">The definition of the nested type</param>
            <param name="name">The name of the nested type.</param>
            <param name="attributes">The attributes assigned to the type.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.Type">
            <summary>
            Gets or sets the definition of the referenced nested type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.GetNestedType">
            <summary>
            Obtains the definition of the nested type.
            </summary>
            <returns>The type</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField.Type"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod">
            <summary>
            Represents a single method in a type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.#ctor(System.UInt32)">
            <summary>
            Initializes an empty non-overloaded method.
            </summary>
            <param name="typeIndex">The type index to assign to the method.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes,AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf)">
            <summary>
            Creates a new overloaded method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="attributes">The attributes associated to the method.</param>
            <param name="function">The function that is referenced by the method.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewFieldAttributes,System.UInt32,AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf)">
            <summary>
            Creates a new overloaded method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="attributes">The attributes associated to the method.</param>
            <param name="vTableOffset">The offset to the slot the virtual function table that this method occupies.</param>
            <param name="function">The function that is referenced by the method.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.Function">
            <summary>
            Gets or sets the function that is referenced by this method.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.VTableOffset">
            <summary>
            When this method is an introducing virtual method, gets or sets the offset to the slot the virtual function
            table that this method occupies.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.GetFunction">
            <summary>
            Obtains the function that this method references.
            </summary>
            <returns>The function.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod.Function"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod">
            <summary>
            Represents a method that is overloaded by one or more functions.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.#ctor(System.UInt32)">
            <summary>
            Initializes an empty overloaded method.
            </summary>
            <param name="typeIndex">The type index to assign to the method.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.#ctor">
            <summary>
            Creates a new empty overloaded method.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.#ctor(AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf)">
            <summary>
            Creates a new overloaded method.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.#ctor(AsmResolver.Symbols.Pdb.Leaves.MethodListEntry[])">
            <summary>
            Creates a new overloaded method.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.Methods">
            <summary>
            Gets or sets a list of methods that were overloaded.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.GetMethods">
            <summary>
            Obtains the list of methods that were overloaded.
            </summary>
            <returns>The methods.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod.Methods"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes">
            <summary>
            Provides members defining all possible flags that can be assigned to a pointer type in a TPI or IPI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Near16">
            <summary>
            Indicates the pointer is a 16 bit pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Far16">
            <summary>
            Indicates the pointer is a 16:16 far pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Huge16">
            <summary>
            Indicates the pointer is a 16:16 huge pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnSegment">
            <summary>
            Indicates the pointer is a based on segment.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnValue">
            <summary>
            Indicates the pointer is a based on value of base.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnSegmentValue">
            <summary>
            Indicates the pointer is a based on segment value of base.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnAddress">
            <summary>
            Indicates the pointer is a based on address of base.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnSegmentAddress">
            <summary>
            Indicates the pointer is a based on segment address of base.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnType">
            <summary>
            Indicates the pointer is a based on type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.BasedOnSelf">
            <summary>
            Indicates the pointer is a based on self.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Near32">
            <summary>
            Indicates the pointer is a 32 bit pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Far32">
            <summary>
            Indicates the pointer is a 16:32 pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Near64">
            <summary>
            Indicates the pointer is a 64 bit pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.KindMask">
            <summary>
            Provides the bit-mask for extracting the pointer kind from the flags.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.LValueReference">
            <summary>
            Indicates the pointer is an "old" reference.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.PointerToDataMember">
            <summary>
            Indicates the pointer is a pointer to data member.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.PointerToMemberFunction">
            <summary>
            Indicates the pointer is a pointer to member function.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.RValueReference">
            <summary>
            Indicates the pointer is an r-value reference.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.ModeMask">
            <summary>
            Provides the bit-mask for extracting the pointer mode from the flags.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Flat32">
            <summary>
            Indicates the pointer is a "flat" pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Volatile">
            <summary>
            Indicates the pointer is marked volatile.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Const">
            <summary>
            Indicates the pointer is marked const.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Unaligned">
            <summary>
            Indicates the pointer is marked unaligned.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.Restrict">
            <summary>
            Indicates the pointer is marked restrict.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.WinRTSmartPointer">
            <summary>
            Indicates the pointer is a WinRT smart pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.LValueRefThisPointer">
            <summary>
            Indicates the pointer is a 'this' pointer of a member function with ref qualifier.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.PointerAttributes.RValueRefThisPointer">
            <summary>
            Indicates the pointer is a 'this' pointer of a member function with ref qualifier.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord">
            <summary>
            Represents a pointer type in a TPI or IPI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty pointer type.
            </summary>
            <param name="typeIndex">The type index to assign to the type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.PointerAttributes)">
            <summary>
            Creates a new pointer type.
            </summary>
            <param name="type">The referent type.</param>
            <param name="attributes">The attributes describing the shape of the pointer.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.PointerAttributes,System.Byte)">
            <summary>
            Creates a new pointer type.
            </summary>
            <param name="type">The referent type.</param>
            <param name="attributes">The attributes describing the shape of the pointer.</param>
            <param name="size">The size of the pointer.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.BaseType">
            <summary>
            Gets or sets the referent type of the pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.Attributes">
            <summary>
            Gets or sets the attributes describing the shape of the pointer type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.Kind">
            <summary>
            Gets or sets the kind of the pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsNear16">
            <summary>
            Gets or sets a value indicating whether the pointer is a 16 bit pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsFar16">
            <summary>
            Gets or sets a value indicating whether the pointer is a 16:16 far pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsHuge16">
            <summary>
            Gets or sets a value indicating whether the pointer is a 16:16 huge pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnSegment">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on segment.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnValue">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on value of base.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnSegmentValue">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on segment value of base.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnAddress">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on address of base.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnSegmentAddress">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on segment address of base.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnType">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsBasedOnSelf">
            <summary>
            Gets or sets a value indicating whether the pointer is a based on self.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsNear32">
            <summary>
            Gets or sets a value indicating whether the pointer is a 32 bit pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsFar32">
            <summary>
            Gets or sets a value indicating whether the pointer is a 16:32 pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsNear64">
            <summary>
            Gets or sets a value indicating whether the pointer is a 64 bit pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.Mode">
            <summary>
            Gets or sets the mode of the pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsLValueReference">
            <summary>
            Gets or sets a value indicating whether the pointer is an "old" reference.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsPointerToDataMember">
            <summary>
            Gets or sets a value indicating whether the pointer is a pointer to data member.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsPointerToMemberFunction">
            <summary>
            Gets or sets a value indicating whether the pointer is a pointer to member function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsRValueReference">
            <summary>
            Gets or sets a value indicating whether the pointer is an r-value reference.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsFlat32">
            <summary>
            Gets or sets a value indicating whether the pointer is a "flat" pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsVolatile">
            <summary>
            Gets or sets a value indicating whether the pointer is marked volatile.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsConst">
            <summary>
            Gets or sets a value indicating whether the pointer is marked const.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsUnaligned">
            <summary>
            Gets or sets a value indicating whether the pointer is marked unaligned.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsRestrict">
            <summary>
            Gets or sets a value indicating whether the pointer is marked restrict.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.Size">
            <summary>
            Gets or sets the size of the pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsWinRTSmartPointer">
            <summary>
            Gets or sets a value indicating whether the pointer is a WinRT smart pointer.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsLValueRefThisPointer">
            <summary>
            Gets or sets a value indicating whether the pointer is a 'this' pointer of a member function with ref qualifier.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.IsRValueRefThisPointer">
            <summary>
            Gets or sets a value indicating whether the pointer is a 'this' pointer of a member function with ref qualifier.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.GetBaseType">
            <summary>
            Obtains the base type of the pointer.
            </summary>
            <returns>The base type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.BaseType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord">
            <summary>
            Represents a function pointer or procedure type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes an empty procedure type.
            </summary>
            <param name="typeIndex">The type index to assign to the type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewCallingConvention,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf)">
            <summary>
            Creates a new procedure type.
            </summary>
            <param name="callingConvention">The convention to use when calling the function pointed by values of this type.</param>
            <param name="returnType">The return type of the function.</param>
            <param name="arguments">The argument type list of the function.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.ReturnType">
            <summary>
            Gets or sets the return type of the function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.CallingConvention">
            <summary>
            Gets or sets the convention that is used when calling the member function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.Attributes">
            <summary>
            Gets or sets the attributes associated to the function.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.Arguments">
            <summary>
            Gets or sets the list of types of the parameters that this function defines.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.GetReturnType">
            <summary>
            Obtains the return type of the procedure.
            </summary>
            <returns>The return type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.ReturnType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.GetArguments">
            <summary>
            Obtains the argument types of the procedure..
            </summary>
            <returns>The argument types.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.Arguments"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArgumentListLeaf">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.ArgumentListLeaf"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArgumentListLeaf.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a argument list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the list is situated in.</param>
            <param name="typeIndex">The type index to assign to the list.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArgumentListLeaf.GetArgumentTypes">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArrayTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.ArrayTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArrayTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads an array type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The type index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArrayTypeRecord.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArrayTypeRecord.GetElementType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedArrayTypeRecord.GetIndexType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBaseClassField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.BaseClassField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBaseClassField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a base class from the provided input stream.
            </summary>
            <param name="context">The reading context in which the class is situated in.</param>
            <param name="typeIndex">The type index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBaseClassField.GetBaseType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBitFieldTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.BitFieldTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBitFieldTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a bit field type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the bit field type is situated in.</param>
            <param name="typeIndex">The type index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedBitFieldTypeRecord.GetBaseType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.ClassTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind,AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a class type from the provided input stream.
            </summary>
            <param name="kind">The kind of type that is being read.</param>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The type index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.GetUniqueName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.GetBaseType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.GetFields">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedClassTypeRecord.GetVTableShape">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumerateField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.EnumerateField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumerateField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a enumerate field list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the enumerate field is situated in.</param>
            <param name="typeIndex">The type index to assign to the enum type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumerateField.GetName">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.EnumTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a constant symbol from the provided input stream.
            </summary>
            <param name="context">The reading context in which the symbol is situated in.</param>
            <param name="typeIndex">The type index to assign to the enum type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumTypeRecord.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumTypeRecord.GetBaseType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedEnumTypeRecord.GetFields">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedFieldListLeaf">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.FieldListLeaf"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedFieldListLeaf.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a field list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the list is situated in.</param>
            <param name="typeIndex">The type index to assign to the enum type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedFieldListLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedInstanceDataField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.InstanceDataField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedInstanceDataField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads an instance data member list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the member is situated in.</param>
            <param name="typeIndex">The type index to assign to the member.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedInstanceDataField.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedInstanceDataField.GetDataType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.MemberFunctionLeaf"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a member function from the provided input stream.
            </summary>
            <param name="context">The reading context in which the function is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf.GetReturnType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf.GetDeclaringType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf.GetThisType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMemberFunctionLeaf.GetArguments">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListEntry">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.MethodListEntry"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListEntry.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a member function from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListEntry.GetFunction">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListLeaf">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.MethodListLeaf"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListLeaf.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a method list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the list is situated in.</param>
            <param name="typeIndex">The type index to assign to the enum type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedMethodListLeaf.GetEntries">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedModifierTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.ModifierTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedModifierTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a pointer type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedModifierTypeRecord.GetBaseType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNestedTypeField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.NestedTypeField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNestedTypeField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a nested type field from the provided input stream.
            </summary>
            <param name="context">The reading context in which the field is situated in.</param>
            <param name="typeIndex">The index to assign to the field.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNestedTypeField.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNestedTypeField.GetNestedType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNonOverloadedMethod">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.NonOverloadedMethod"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNonOverloadedMethod.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a non-overloaded method from the provided input stream.
            </summary>
            <param name="context">The reading context in which the method is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNonOverloadedMethod.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedNonOverloadedMethod.GetFunction">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedOverloadedMethod">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.OverloadedMethod"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedOverloadedMethod.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads an overloaded method from the provided input stream.
            </summary>
            <param name="context">The reading context in which the method is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedOverloadedMethod.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedOverloadedMethod.GetMethods">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedPointerTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.PointerTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedPointerTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a pointer type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedPointerTypeRecord.GetBaseType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedProcedureTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.ProcedureTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedProcedureTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a procedure type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedProcedureTypeRecord.GetReturnType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedProcedureTypeRecord.GetArguments">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedStaticDataField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.StaticDataField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedStaticDataField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a static data member list from the provided input stream.
            </summary>
            <param name="context">The reading context in which the member is situated in.</param>
            <param name="typeIndex">The type index to assign to the member.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedStaticDataField.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedStaticDataField.GetDataType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedUnionTypeRecord">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedUnionTypeRecord.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a union type from the provided input stream.
            </summary>
            <param name="context">The reading context in which the type is situated in.</param>
            <param name="typeIndex">The index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedUnionTypeRecord.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedUnionTypeRecord.GetUniqueName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedUnionTypeRecord.GetFields">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVBaseClassField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVBaseClassField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@,System.Boolean)">
            <summary>
            Reads a virtual base class from the provided input stream.
            </summary>
            <param name="context">The reading context in which the class is situated in.</param>
            <param name="typeIndex">The type index to assign to the type.</param>
            <param name="reader">The input stream to read from.</param>
            <param name="isIndirect"><c>true</c> if the field is an indirect virtual base class, <c>false</c> otherwise.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVBaseClassField.GetBaseType">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVBaseClassField.GetBasePointerType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableField">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.VTableField"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableField.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a virtual function table field from the provided input stream.
            </summary>
            <param name="context">The reading context in which the field is situated in.</param>
            <param name="typeIndex">The type index to assign to the field.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableField.GetPointerType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableShapeLeaf">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableShapeLeaf.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,System.UInt32,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a virtual function table shape from the provided input stream.
            </summary>
            <param name="context">The reading context in which the shape is situated in.</param>
            <param name="typeIndex">The index to assign to the shape.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.Serialized.SerializedVTableShapeLeaf.GetEntries">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind">
            <summary>
            Provides members defining all basic type kinds that can be used as a type index.
            </summary>
            <remarks>
            Reference: https://llvm.org/docs/PDB/TpiStream.html
            </remarks>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.None">
            <summary>
            Indicates the type index indicates the absence of a specific type or type category.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Void">
            <summary>
            Indicates the type index references the void type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.NotTranslated">
            <summary>
            Indicates the type index references a type that is not translated by CVPack.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.HResult">
            <summary>
            Indicates the type index references the OLE/COM HRESULT type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.SignedCharacter">
            <summary>
            Indicates the type index references the 8 bit signed character type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UnsignedCharacter">
            <summary>
            Indicates the type index references the 8 bit unsigned character type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.NarrowCharacter">
            <summary>
            Indicates the type index references the narrow character type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.WideCharacter">
            <summary>
            Indicates the type index references the wide character type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Character16">
            <summary>
            Indicates the type index references the char16_t type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Character32">
            <summary>
            Indicates the type index references the char32_t type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Character8">
            <summary>
            Indicates the type index references the char8_t type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.SByte">
            <summary>
            Indicates the type index references the 8 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Byte">
            <summary>
            Indicates the type index references the 8 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int16Short">
            <summary>
            Indicates the type index references the 16 bit signed type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt16Short">
            <summary>
            Indicates the type index references the 16 bit unsigned type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int16">
            <summary>
            Indicates the type index references the 16 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt16">
            <summary>
            Indicates the type index references the 16 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int32Long">
            <summary>
            Indicates the type index references the 32 bit signed type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt32Long">
            <summary>
            Indicates the type index references the 32 bit unsigned type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int32">
            <summary>
            Indicates the type index references the 32 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt32">
            <summary>
            Indicates the type index references the 32 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int64Quad">
            <summary>
            Indicates the type index references the 64 bit signed type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt64Quad">
            <summary>
            Indicates the type index references the 64 bit unsigned type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int64">
            <summary>
            Indicates the type index references the 64 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt64">
            <summary>
            Indicates the type index references the 64 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int128Oct">
            <summary>
            Indicates the type index references the 128 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt128Oct">
            <summary>
            Indicates the type index references the 128 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Int128">
            <summary>
            Indicates the type index references the 128 bit signed int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.UInt128">
            <summary>
            Indicates the type index references the 128 bit unsigned int type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float16">
            <summary>
            Indicates the type index references the 16 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float32">
            <summary>
            Indicates the type index references the 32 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float32PartialPrecision">
            <summary>
            Indicates the type index references the 32 bit PP real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float48">
            <summary>
            Indicates the type index references the 48 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float64">
            <summary>
            Indicates the type index references the 64 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float80">
            <summary>
            Indicates the type index references the 80 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Float128">
            <summary>
            Indicates the type index references the 128 bit real type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex16">
            <summary>
            Indicates the type index references the 16 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex32">
            <summary>
            Indicates the type index references the 32 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex32PartialPrecision">
            <summary>
            Indicates the type index references the 32 bit PP complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex48">
            <summary>
            Indicates the type index references the 48 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex64">
            <summary>
            Indicates the type index references the 64 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex80">
            <summary>
            Indicates the type index references the 80 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Complex128">
            <summary>
            Indicates the type index references the 128 bit complex type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Boolean8">
            <summary>
            Indicates the type index references the 8 bit boolean type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Boolean16">
            <summary>
            Indicates the type index references the 16 bit boolean type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Boolean32">
            <summary>
            Indicates the type index references the 32 bit boolean type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Boolean64">
            <summary>
            Indicates the type index references the 64 bit boolean type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind.Boolean128">
            <summary>
            Indicates the type index references the 128 bit boolean type.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode">
            <summary>
            Provides members defining all possible modes that a simple type in a PDB image can be set to.
            </summary>
            <remarks>
            Reference: https://llvm.org/docs/PDB/TpiStream.html
            </remarks>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.Direct">
            <summary>
            Indicates the type is not a pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.NearPointer">
            <summary>
            Indicates the type is a near pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.FarPointer">
            <summary>
            Indicates the type is a far pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.HugePointer">
            <summary>
            Indicates the type is a huge pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.NearPointer32">
            <summary>
            Indicates the type is a 32 bit near pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.FarPointer32">
            <summary>
            Indicates the type is a 32 bit far pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.NearPointer64">
            <summary>
            Indicates the type is a 64 bit near pointer.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode.NearPointer128">
            <summary>
            Indicates the type is a 128 bit near pointer.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord">
            <summary>
            Represents a simple type referenced by a simple type index.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.#ctor(System.UInt32)">
            <summary>
            Constructs a new simple type based on the provided type index.
            </summary>
            <param name="typeIndex">The type index.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind)">
            <summary>
            Constructs a new simple type with the provided type kind.
            </summary>
            <param name="kind">The type kind.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.#ctor(AsmResolver.Symbols.Pdb.Leaves.SimpleTypeKind,AsmResolver.Symbols.Pdb.Leaves.SimpleTypeMode)">
            <summary>
            Constructs a new simple type with the provided type kind and mode.
            </summary>
            <param name="kind">The type kind.</param>
            <param name="mode">The mode indicating the pointer specifiers added to the type.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.Kind">
            <summary>
            Gets the kind of the simple type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.Mode">
            <summary>
            Gets the mode describing the pointer specifiers that are added to the simple type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.IsPointer">
            <summary>
            Gets a value indicating whether the type is a pointer or not.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.SimpleTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.StaticDataField">
            <summary>
            Represents a static data member in a class or structure type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.StaticDataField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty static data field.
            </summary>
            <param name="typeIndex">The type index to assign to the field.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.StaticDataField.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Creates a new static data member.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The data type of the member.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.StaticDataField.LeafKind">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes">
            <summary>
            Provides members defining all possible attributes that can be assigned to a structure, class or enum type symbol.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.Packed">
            <summary>
            Indicates the structure is packed.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.Ctor">
            <summary>
            Indicates the structure defines constructors or destructors.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.OvlOps">
            <summary>
            Indicates the structure defines overloaded operators.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.IsNested">
            <summary>
            Indicates the structure is a nested class.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.CNested">
            <summary>
            Indicates the structure defines nested types.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.OpAssign">
            <summary>
            Indicates the structure defines an overloaded assignment (=) operator.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.OpCast">
            <summary>
            Indicates the structure defines casting methods.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.FwdRef">
            <summary>
            Indicates the structure true is a forward reference.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.Scoped">
            <summary>
            Indicates the structure is a scoped definition.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.HasUniqueName">
            <summary>
            Indicates the structure has a decorated name following the regular naming conventions.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.Sealed">
            <summary>
            Indicates the structure cannot be used as a base class.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.HfaMask">
            <summary>
            Defines the mask for the floating point type that is used within this structure.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.Intrinsic">
            <summary>
            Indicates the structure is an intrinsic type.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Leaves.StructureAttributes.MoComMask">
            <summary>
            Defines the mask for the MoCOM type kind.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord">
            <summary>
            Represents a type of a value that may have several representations or formats within the same position of memory.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.#ctor(System.UInt32)">
            <summary>
            Initializes an empty union type.
            </summary>
            <param name="typeIndex">The type index to assign to the union.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.#ctor(System.UInt64)">
            <summary>
            Creates a new union type with the provided size.
            </summary>
            <param name="size">The total size in bytes of the union.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.Size">
            <summary>
            Gets or sets the total size in bytes of the union type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.UniqueName">
            <summary>
            Gets or sets the uniquely identifiable name for this type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.GetUniqueName">
            <summary>
            Obtains the uniquely identifiable name of the type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.UniqueName"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnionTypeRecord.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf">
            <summary>
            Represents an unknown or unsupported CodeView type record.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind,System.Byte[])">
            <summary>
            Creates a new unknown type record.
            </summary>
            <param name="leafKind">The type of symbol.</param>
            <param name="data">The raw data stored in the record.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf.#ctor(System.UInt32,AsmResolver.Symbols.Pdb.Leaves.CodeViewLeafKind,System.Byte[])">
            <summary>
            Creates a new unknown type record.
            </summary>
            <param name="typeIndex">The type index to assign to the type</param>
            <param name="leafKind">The type of symbol.</param>
            <param name="data">The raw data stored in the record.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf.Data">
            <summary>
            Gets the raw data stored in the record.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.UnknownCodeViewLeaf.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField">
            <summary>
            Represents a direct or indirect reference to a virtual base class object in a structure.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty virtual base class field.
            </summary>
            <param name="typeIndex">The type index to assign to the field.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Creates a new virtual base class field.
            </summary>
            <param name="baseType">The type to reference as base type.</param>
            <param name="pointerType">The type of the virtual base pointer.</param>
            <param name="pointerOffset">The offset of the virtual base pointer</param>
            <param name="tableOffset">The offset from the base table.</param>
            <param name="isIndirect"><c>true</c> if the field is an indirect virtual base class, <c>false</c> otherwise.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.IsIndirect">
            <summary>
            Gets or sets a value indicating whether the virtual base class is an indirect base class.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.Type">
            <summary>
            Gets or sets the base type that this base class is referencing.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.PointerType">
            <summary>
            Gets or sets the type of the base pointer that this base class uses.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.PointerOffset">
            <summary>
            Gets or sets the virtual base pointer offset relative to the address point.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.TableOffset">
            <summary>
            Gets or sets the virtual base pointer offset relative to the virtual base table.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.GetBaseType">
            <summary>
            Obtains the base type that the class is referencing.
            </summary>
            <returns>The base type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.Type"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.GetBasePointerType">
            <summary>
            Obtains the type of the base pointer that the class is uses.
            </summary>
            <returns>The base pointer type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.PointerType"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VBaseClassField.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.VTableField">
            <summary>
            Represents the virtual function table field in a class.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableField.#ctor(System.UInt32)">
            <summary>
            Initializes an empty virtual function table field.
            </summary>
            <param name="typeIndex">The type index to assign to the type.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableField.#ctor(AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Creates a new virtual function table field.
            </summary>
            <param name="pointerType">The pointer type to use.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VTableField.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VTableField.PointerType">
            <summary>
            Gets or sets the pointer type of the virtual function table.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableField.GetPointerType">
            <summary>
            Obtains the pointer type that the virtual function table type.
            </summary>
            <returns>The pointer type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.VTableField.PointerType"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.VTableShapeEntry">
            <summary>
            Provides members defining all possible types that a single entry in a <see cref="T:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf"/> can be.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf">
            <summary>
            Describes the shape of the virtual function table of a class or structure type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.#ctor(System.UInt32)">
            <summary>
            Initializes a new empty virtual function table shape.
            </summary>
            <param name="typeIndex">The type index to assign to the shape.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.#ctor">
            <summary>
            Creates a new empty virtual function table shape.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.#ctor(AsmResolver.Symbols.Pdb.Leaves.VTableShapeEntry[])">
            <summary>
            Creates a new virtual function table shape with the provided entries.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.LeafKind">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.Entries">
            <summary>
            Gets the list of entries that defines the shape of the virtual function table.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.GetEntries">
            <summary>
            Obtains the list of entries stored in the shape.
            </summary>
            <returns>The entries.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Leaves.VTableShapeLeaf.Entries"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiAttributes">
            <summary>
            Provides members defining all attributes that can be assigned to a single DBI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiAttributes.None">
            <summary>
            Indicates no attributes were assigned.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiAttributes.IncrementallyLinked">
            <summary>
            Indicates the program was linked in an incremental manner.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiAttributes.PrivateSymbolsStripped">
            <summary>
            Indicates private symbols were stripped from the PDB file.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiAttributes.HasConflictingTypes">
            <summary>
            Indicates the program was linked using link.exe with the undocumented <c>/DEBUG:CTYPES</c> flag.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream">
            <summary>
            Represents the DBI Stream (also known as the Debug Information stream).
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.StreamIndex">
            <summary>
            Gets the default fixed MSF stream index for the DBI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.#ctor">
            <summary>
            Creates a new empty DBI stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.VersionSignature">
            <summary>
            Gets or sets the version signature assigned to the DBI stream.
            </summary>
            <remarks>
            This value should always be -1 for valid PDB files.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.VersionHeader">
            <summary>
            Gets or sets the version number of the DBI header.
            </summary>
            <remarks>
            Modern tooling only recognize the VC7.0 file format.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Age">
            <summary>
            Gets or sets the number of times the DBI stream has been written.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GlobalStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the Global Symbol Stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.BuildNumber">
            <summary>
            Gets or sets a bitfield containing the major and minor version of the toolchain that was used to build the program.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.IsNewVersionFormat">
            <summary>
            Gets or sets a value indicating that the DBI stream is using the new file format (NewDBI).
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.BuildMajorVersion">
            <summary>
            Gets or sets the major version of the toolchain that was used to build the program.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.BuildMinorVersion">
            <summary>
            Gets or sets the minor version of the toolchain that was used to build the program.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.PublicStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the Public Symbol Stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.PdbDllVersion">
            <summary>
            Gets or sets the version number of mspdbXXXX.dll that was used to produce this PDB file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SymbolRecordStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the Symbol Record Stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.PdbDllRbld">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.MfcTypeServerIndex">
            <summary>
            Gets or sets the MSF stream index of the MFC type server.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Attributes">
            <summary>
            Gets or sets attributes associated to the DBI stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Machine">
            <summary>
            Gets or sets the machine type the program was compiled for.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Modules">
            <summary>
            Gets a collection of modules (object files) that were linked together into the program.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SectionContributions">
            <summary>
            Gets a collection of section contributions describing the layout of the sections of the final executable file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SectionMaps">
            <summary>
            Gets a collection of section mappings stored in the section mapping sub stream.
            </summary>
            <remarks>
            The exact purpose of this is unknown, but it seems to be always containing a copy of the sections in the final
            executable file.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.TypeServerMapStream">
            <summary>
            Gets or sets the contents of the type server map sub stream.
            </summary>
            <remarks>
            The exact purpose and layout of this sub stream is unknown, hence this property exposes the stream as
            a raw segment.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.ECStream">
            <summary>
            Gets or sets the contents of the Edit-and-Continue sub stream.
            </summary>
            <remarks>
            The exact purpose and layout of this sub stream is unknown, hence this property exposes the stream as
            a raw segment.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SourceFiles">
            <summary>
            Gets a collection of source files assigned to each module in <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Modules"/>.
            </summary>
            <remarks>
            Every collection of source files within this list corresponds to exactly the module within <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Modules"/>
            at the same index. For example, the first source file list in this collection is the source file list of the
            first module.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.ExtraStreamIndices">
            <summary>
            Gets a collection of indices referring to additional debug streams in the MSF file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a single DBI stream from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The parsed DBI stream.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetModules">
            <summary>
            Obtains the list of module descriptors.
            </summary>
            <returns>The module descriptors</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Modules"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetSectionContributions">
            <summary>
            Obtains the list of section contributions.
            </summary>
            <returns>The section contributions.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SectionContributions"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetSectionMaps">
            <summary>
            Obtains the list of section maps.
            </summary>
            <returns>The section maps.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SectionMaps"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetTypeServerMapStream">
            <summary>
            Obtains the contents of the type server map sub stream.
            </summary>
            <returns>The contents of the sub stream.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.TypeServerMapStream"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetECStream">
            <summary>
            Obtains the contents of the EC sub stream.
            </summary>
            <returns>The contents of the sub stream.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.ECStream"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetSourceFiles">
            <summary>
            Obtains a table that assigns a list of source files to every module referenced in the PDB file.
            </summary>
            <returns>The table.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SourceFiles"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetExtraStreamIndices">
            <summary>
            Obtains the list of indices referring to additional debug streams in the MSF file.
            </summary>
            <returns>The list of indices.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.ExtraStreamIndices"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStreamVersion">
            <summary>
            Provides members defining all possible DBI stream format version numbers.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor">
            <summary>
            Represents a reference to a single module (object file) that was linked into a program.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SectionContribution">
            <summary>
            Gets or sets a description of the section within the final binary which contains code
            and/or data from this module.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.Attributes">
            <summary>
            Gets or sets the attributes assigned to this module descriptor.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.TypeServerIndex">
            <summary>
            Gets or sets the index of the type server for this module.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SymbolStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the stream that the symbols of this module.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SymbolDataSize">
            <summary>
            Gets or sets the size of the CodeView data within the module's symbol stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SymbolC11DataSize">
            <summary>
            Gets or sets the size of the C11-style CodeView data within the module's symbol stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SymbolC13DataSize">
            <summary>
            Gets or sets the size of the C13-style CodeView data within the module's symbol stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SourceFileCount">
            <summary>
            Gets or sets the number of source files that contributed to this module during the compilation.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.SourceFileNameIndex">
            <summary>
            Gets or sets the offset in the names buffer of the primary translation unit.
            </summary>
            <remarks>
            For most compilers this value is set to zero.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.PdbFilePathNameIndex">
            <summary>
            Gets or sets the offset in the names buffer of the PDB file.
            </summary>
            <remarks>
            For most modules (except the special <c>* LINKER *</c> module) this value is set to zero.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <remarks>
            This is often a full path to the object file that was passed into <c>link.exe</c> directly, or a string in the
            form of <c>Import:dll_name</c>
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.ObjectFileName">
            <summary>
            Gets or sets the name of the object file name.
            </summary>
            <remarks>
            In the case this module is linked directly passed to <c>link.exe</c>, this is the same as <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.ModuleName"/>.
            If the module comes from an archive, this is the full path to that archive.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Parses a single module descriptor from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>THe parsed module descriptor.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptor.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptorAttributes">
            <summary>
            Defines all possible flags that can be assigned to a module descriptor.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptorAttributes.Dirty">
            <summary>
            Indicates the module has been written to since reading the PDB.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptorAttributes.EC">
            <summary>
            Indicates the module contains Edit &amp; Continue information.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.ModuleDescriptorAttributes.TsmMask">
            <summary>
            Provides a mask for the type server index that is stored within the flags.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution">
            <summary>
            Describes the section in the final executable file that a particular object or module is stored at.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.EntrySize">
            <summary>
            The total size in bytes of a single <see cref="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution"/> on the disk.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.Section">
            <summary>
            Gets or sets the index of the section.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.Offset">
            <summary>
            Gets or sets the offset within the section that this contribution starts at.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.Size">
            <summary>
            Gets or sets the size of the section contribution.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.Characteristics">
            <summary>
            Gets or sets the section flags and permissions associated to this section contribution.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.ModuleIndex">
            <summary>
            Gets or sets the index of the module.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.DataCrc">
            <summary>
            Gets or sets a cyclic redundancy code that can be used to verify the data section of this contribution.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.RelocCrc">
            <summary>
            Gets or sets a cyclic redundancy code that can be used to verify the relocation section of this contribution.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Parses a single section contribution from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The parsed section contribution.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContribution.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContributionStreamVersion">
            <summary>
            Provides members defining all valid versions of the Section Contribution sub stream's file format.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContributionStreamVersion.Ver60">
            <summary>
            Indicates version 6.0 is used.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionContributionStreamVersion.V2">
            <summary>
            Indicates version 2.0 is used.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap">
            <summary>
            Represents a single entry in the Section Map sub stream of the DBI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.EntrySize">
            <summary>
            The total size in bytes of a single <see cref="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap"/> on the disk.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.Attributes">
            <summary>
            Gets or sets the attributes assigned to this section map.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.LogicalOverlayNumber">
            <summary>
            Gets or sets the logical overlay number of this section map.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.Group">
            <summary>
            Gets or sets the group index into the descriptor array.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.Frame">
            <summary>
            Gets or sets the frame index.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.SectionName">
            <summary>
            Gets or sets the byte offset of the segment or group name in string table, or 0xFFFF if no name was assigned.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.ClassName">
            <summary>
            Gets or sets the byte offset of the class in the string table, or 0xFFFF if no name was assigned..
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.Offset">
            <summary>
            Gets or sets the byte offset of the logical segment within physical segment. If group is set in flags, this is the offset of the group.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.SectionLength">
            <summary>
            Gets or sets the number of bytes that the segment or group consists of.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Parses a single section map from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The parsed section map.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMap.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes">
            <summary>
            Provides members describing all possible attributes that can be assigned to a single section map entry.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.Read">
            <summary>
            Indicates the segment is readable.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.Write">
            <summary>
            Indicates the segment is writable.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.Execute">
            <summary>
            Indicates the segment is executable.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.AddressIs32Bit">
            <summary>
            Indicates the descriptor describes a 32-bit linear address.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.IsSelector">
            <summary>
            Indicates the frame represents a selector.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.IsAbsoluteAddress">
            <summary>
            Indicates the frame represents an absolute address.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Dbi.SectionMapAttributes.IsGroup">
            <summary>
            Indicates the descriptor represents a group.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream">
            <summary>
            Implements a DBI stream that pulls its data from an input stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Parses a DBI stream from an input stream reader.
            </summary>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetModules">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetSectionContributions">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetSectionMaps">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetTypeServerMapStream">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetECStream">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetSourceFiles">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SerializedDbiStream.GetExtraStreamIndices">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Dbi.SourceFileCollection">
            <summary>
            Represents a collection of file paths used as input source code for a single module.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SourceFileCollection.#ctor">
            <summary>
            Creates a new empty source file collection.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Dbi.SourceFileCollection.#ctor(System.UInt32)">
            <summary>
            Creates a new empty source file collection.
            </summary>
            <param name="originalModuleIndex">The original module index for which this collection was compiled.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.SourceFileCollection.OriginalModuleIndex">
            <summary>
            Gets the original module index for which this collection was compiled (if available).
            </summary>
            <remarks>
            The exact purpose of this number is unclear, as this number cannot be reliably used as an index within the
            DBI stream's module list. Use the index of this list within <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Dbi.DbiStream.SourceFiles"/> instead.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream">
            <summary>
            Represents the PDB Info Stream (also known as the PDB stream)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.StreamIndex">
            <summary>
            Gets the default fixed MSF stream index for the PDB Info stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Version">
            <summary>
            Gets or sets the version of the file format of the PDB info stream.
            </summary>
            <remarks>
            Modern tooling only recognize the VC7.0 file format.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Signature">
            <summary>
            Gets or sets the 32-bit UNIX time-stamp of the PDB file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Age">
            <summary>
            Gets or sets the number of times the PDB file has been written.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.UniqueId">
            <summary>
            Gets or sets the unique identifier assigned to the PDB file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.StreamIndices">
            <summary>
            Gets a mapping from stream names to their respective stream index within the underlying MSF file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Features">
            <summary>
            Gets a list of characteristics that this PDB has.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a single PDB info stream from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The parsed info stream.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.GetStreamIndices">
            <summary>
            Obtains the stream name to index mapping of the PDB file.
            </summary>
            <returns>The mapping.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.StreamIndices"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.GetFeatures">
            <summary>
            Obtains the features of the PDB file.
            </summary>
            <returns>The features.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Features"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Info.InfoStreamVersion">
            <summary>
            Provides members defining all possible stream file format versions that PDB defines.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Info.PdbFeature">
            <summary>
            Provides members defining all possible features that a PDB can have.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Info.PdbFeature.VC110">
            <summary>
            Indicates no other feature flags are present, and that an IPI stream is present.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Info.PdbFeature.VC140">
            <summary>
            Indicates that other feature flags may be present, and that an IPI stream is present.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Info.PdbFeature.NoTypeMerge">
            <summary>
            Indicates types can be duplicated in the TPI stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Info.PdbFeature.MinimalDebugInfo">
            <summary>
            Indicates the program was linked with /DEBUG:FASTLINK, and all type information is contained in the original
            object files instead of TPI and IPI streams.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Info.SerializedInfoStream">
            <summary>
            Implements an PDB info stream that pulls its data from an input stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.SerializedInfoStream.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Parses a PDB info stream from an input stream reader.
            </summary>
            <param name="reader">The input stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.SerializedInfoStream.GetStreamIndices">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Info.SerializedInfoStream.GetFeatures">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.PdbHash">
            <summary>
            Provides methods for computing hash codes for a PDB hash table.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.PdbHash.ComputeV1(AsmResolver.Utf8String)">
            <summary>
            Computes the V1 hash code for a UTF-8 string.
            </summary>
            <param name="value">The string to compute the hash for.</param>
            <returns>The hash code.</returns>
            <remarks>
            See PDB/include/misc.h for reference implementation.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.PdbHashTable">
            <summary>
            Provides methods for serializing and deserializing dictionaries as PDB hash tables.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.PdbHashTable.FromReader``2(AsmResolver.IO.BinaryStreamReader@,System.Func{System.UInt32,System.UInt32,System.ValueTuple{``0,``1}})">
            <summary>
            Reads a single PDB hash table from the input stream and converts it into a dictionary.
            </summary>
            <param name="reader">The input stream to read from.</param>
            <param name="mapper">A function that maps the raw key-value pairs into high level constructs.</param>
            <typeparam name="TKey">The type of keys in the final dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the final dictionary.</typeparam>
            <returns>The reconstructed dictionary.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.PdbHashTable.GetPdbHashTableSize``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.UInt32})">
            <summary>
            Computes the number of bytes required to store the provided dictionary as a PDB hash table.
            </summary>
            <param name="dictionary">The dictionary to serialize.</param>
            <param name="hasher">A function that computes the hash code for a single key within the dictionary.</param>
            <typeparam name="TKey">The type of keys in the input dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the input dictionary.</typeparam>
            <returns>The number of bytes required.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.PdbHashTable.WriteAsPdbHashTable``2(System.Collections.Generic.IDictionary{``0,``1},AsmResolver.IO.IBinaryStreamWriter,System.Func{``0,System.UInt32},System.Func{``0,``1,System.ValueTuple{System.UInt32,System.UInt32}})">
            <summary>
            Serializes a dictionary to a PDB hash table to an output stream.
            </summary>
            <param name="dictionary">The dictionary to serialize.</param>
            <param name="writer">The output stream to write to.</param>
            <param name="hasher">A function that computes the hash code for a single key within the dictionary.</param>
            <param name="mapper">A function that maps every key-value pair to raw key-value uint32 pairs.</param>
            <typeparam name="TKey">The type of keys in the input dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the input dictionary.</typeparam>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Tpi.SerializedTpiStream">
            <summary>
            Provides a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.SerializedTpiStream.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a TPI stream from the provided input stream.
            </summary>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.SerializedTpiStream.TryGetLeafRecordReader(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.SerializedTpiStream.WriteTypeRecords(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream">
            <summary>
            Represents the Type Information (TPI) stream in a PDB file.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.StreamIndex">
            <summary>
            Gets the default fixed MSF stream index for the TPI stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.Version">
            <summary>
            Gets or sets the version of the file format that the TPI stream is using.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.TypeIndexBegin">
            <summary>
            Gets or sets the index of the first type record in the stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.TypeIndexEnd">
            <summary>
            Gets or sets the index of the last type record in the stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.TypeRecordsByteCount">
            <summary>
            Gets or sets the amount of bytes the full type record data requires.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the hash table for every record type in the stream (if available).
            </summary>
            <remarks>
            When this value is set to <c>-1</c> (<c>0xFFFF</c>), then there is no hash stream stored in the PDB file.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashAuxStreamIndex">
            <summary>
            Gets or sets the MSF stream index of the auxiliary hash table for every record type in the stream.
            </summary>
            <remarks>
            When this value is set to <c>-1</c> (<c>0xFFFF</c>), then there is no hash stream stored in the PDB file.
            The exact purpose of this stream is unknown, and usually this stream is not present.
            </remarks>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashKeySize">
            <summary>
            Gets or sets the number of bytes that a single hash value in the type hash stream consists of.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashBucketCount">
            <summary>
            Gets or sets the number of buckets used in the type record hash table.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashValueBufferOffset">
            <summary>
            Gets or sets the offset within the TPI hash stream pointing to the start of the list of hash values.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashValueBufferLength">
            <summary>
            Gets or sets the number of bytes within the TPI hash stream that the list of hash values consists of.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.IndexOffsetBufferOffset">
            <summary>
            Gets or sets the offset within the TPI hash stream pointing to the start of the list of type record indices.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.IndexOffsetBufferLength">
            <summary>
            Gets or sets the number of bytes within the TPI hash stream that the list of type record indices consists of.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashAdjBufferOffset">
            <summary>
            Gets or sets the offset within the TPI hash stream pointing to the start of the list of hash-index pairs.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.HashAdjBufferLength">
            <summary>
            Gets or sets the number of bytes within the TPI hash stream that the list of hash-index pairs consists of.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a TPI stream from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The TPI stream.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.TryGetLeafRecordReader(System.UInt32,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Attempts to get a reader object that starts at the beginning of a leaf record for the provided type index.
            </summary>
            <param name="typeIndex">The type index to get the reader for.</param>
            <param name="reader">The obtained reader object.</param>
            <returns>
            <c>true</c> if the provided type index was valid and a reader object was constructed successfully,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.GetLeafRecordReader(System.UInt32)">
            <summary>
            Gets a reader object that starts at the beginning of a leaf record for the provided type index.
            </summary>
            <param name="typeIndex">The type index to get the reader for.</param>
            <returns>The obtained reader object.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the provided type index was invalid.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStream.WriteTypeRecords(AsmResolver.IO.IBinaryStreamWriter)">
            <summary>
            Writes all type records stored in the TPI stream to the provided output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Metadata.Tpi.TpiStreamVersion">
            <summary>
            Provides members defining all known file formats for the TPI stream.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.Builder.FreeBlockMap">
            <summary>
            Represents a block within a MSF file that contains information on which blocks in the MSF file are free to use.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.FreeBlockMap.#ctor(System.UInt32)">
            <summary>
            Creates a new empty free block map.
            </summary>
            <param name="blockSize">The size of a single block in the MSF file.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.Builder.FreeBlockMap.BitField">
            <summary>
            Gets the bit field indicating which blocks in the MSF file are free to use.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.FreeBlockMap.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.FreeBlockMap.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.Builder.IMsfFileBuilder">
            <summary>
            Provides members for constructing new MSF files.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.IMsfFileBuilder.CreateFile(AsmResolver.Symbols.Pdb.Msf.MsfFile)">
            <summary>
            Reconstructs a new writable MSF file buffer from an instance of <see cref="T:AsmResolver.Symbols.Pdb.Msf.MsfFile"/>.
            </summary>
            <param name="file">The file to reconstruct.</param>
            <returns>The reconstructed buffer.</returns>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer">
            <summary>
            Represents a mutable buffer for building up a new MSF file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.#ctor(System.UInt32)">
            <summary>
            Creates a new empty MSF file buffer.
            </summary>
            <param name="blockSize">The block size to use.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.SuperBlock">
            <summary>
            Gets the super block of the MSF file that is being constructed.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.BlockIsAvailable(System.Int32)">
            <summary>
            Determines whether a block in the MSF file buffer is available or not.
            </summary>
            <param name="blockIndex">The index of the block.</param>
            <returns><c>true</c> if the block is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.InsertBlock(System.Int32,AsmResolver.Symbols.Pdb.Msf.MsfStream,System.Int32)">
            <summary>
            Inserts a block of the provided MSF stream into the buffer.
            </summary>
            <param name="blockIndex">The MSF file index to insert the block into.</param>
            <param name="stream">The stream to pull a chunk from.</param>
            <param name="chunkIndex">The index of the chunk to store at the provided block index.</param>
            <exception cref="T:System.ArgumentException">
            Occurs when the index provided by <paramref name="blockIndex"/> is already in use.
            </exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.GetBlockIndicesForStream(AsmResolver.Symbols.Pdb.Msf.MsfStream)">
            <summary>
            Gets the allocated indices for the provided MSF stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The block indices.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.CreateStreamDirectory(System.Collections.Generic.IList{AsmResolver.Symbols.Pdb.Msf.MsfStream})">
            <summary>
            Constructs a new MSF stream containing the stream directory.
            </summary>
            <param name="streams">The files that the directory should list.</param>
            <returns>The constructed stream.</returns>
            <remarks>
            This method does <b>not</b> add the stream to the buffer, nor does it update the super block.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.CreateStreamDirectoryMap(AsmResolver.Symbols.Pdb.Msf.MsfStream)">
            <summary>
            Creates a new MSF stream containing the block indices of the stream directory.
            </summary>
            <param name="streamDirectory">The stream directory to store the indices for.</param>
            <returns>The constructed stream.</returns>
            <remarks>
            This method does <b>not</b> add the stream to the buffer, nor does it update the super block.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.MsfFileBuffer.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.Builder.SequentialMsfFileBuilder">
            <summary>
            Provides an implementation of the <see cref="T:AsmResolver.Symbols.Pdb.Msf.Builder.IMsfFileBuilder"/> that places all blocks of every stream in sequence,
            and effectively defragments the file system.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.Builder.SequentialMsfFileBuilder.Instance">
            <summary>
            Gets the default instance of the <see cref="T:AsmResolver.Symbols.Pdb.Msf.Builder.SequentialMsfFileBuilder"/> class.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.Builder.SequentialMsfFileBuilder.CreateFile(AsmResolver.Symbols.Pdb.Msf.MsfFile)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.MsfFile">
            <summary>
            Models a file that is in the Microsoft Multi-Stream Format (MSF).
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfFile.BlockSize">
            <summary>
            Gets or sets the size of each block in the MSF file.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when the provided value is neither 512, 1024, 2048 or 4096.
            </exception>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfFile.Streams">
            <summary>
            Gets a collection of streams that are present in the MSF file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.#ctor">
            <summary>
            Creates a new empty MSF file with a default block size of 4096.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.#ctor(System.UInt32)">
            <summary>
            Creates a new empty MSF file with the provided block size.
            </summary>
            <param name="blockSize">The block size to use. This must be a value of 512, 1024, 2048 or 4096.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when an invalid block size was provided.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.FromFile(System.String)">
            <summary>
            Reads an MSF file from a file on the disk.
            </summary>
            <param name="path">The path to the file to read.</param>
            <returns>The read MSF file.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Reads an MSF file from an input file.
            </summary>
            <param name="file">The file to read.</param>
            <returns>The read MSF file.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.FromBytes(System.Byte[])">
            <summary>
            Interprets a byte array as an MSF file.
            </summary>
            <param name="data">The data to interpret.</param>
            <returns>The read MSF file.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads an MSF file from the provided input stream reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The read MSF file.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.GetStreams">
            <summary>
            Obtains the list of streams stored in the MSF file.
            </summary>
            <returns>The streams.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Msf.MsfFile.Streams"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.Write(System.String)">
            <summary>
            Reconstructs and writes the MSF file to the disk.
            </summary>
            <param name="path">The path of the file to write to.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.Write(System.IO.Stream)">
            <summary>
            Reconstructs and writes the MSF file to an output stream.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <summary>
            Reconstructs and writes the MSF file to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfFile.Write(AsmResolver.IO.IBinaryStreamWriter,AsmResolver.Symbols.Pdb.Msf.Builder.IMsfFileBuilder)">
            <summary>
            Reconstructs and writes the MSF file to an output stream.
            </summary>
            <param name="writer">The output stream.</param>
            <param name="builder">The builder to use for reconstructing the MSF file.</param>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.MsfStream">
            <summary>
            Represents a single stream in an Multi-Stream Format (MSF) file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.#ctor(System.Byte[])">
            <summary>
            Creates a new MSF stream with the provided contents.
            </summary>
            <param name="data">The raw data of the stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.#ctor(AsmResolver.IO.IDataSource)">
            <summary>
            Creates a new MSF stream with the provided data source as contents.
            </summary>
            <param name="contents">The data source containing the raw data of the stream.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.#ctor(AsmResolver.IO.IDataSource,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes an MSF stream with a data source and a list of original block indices that the stream was based on.
            </summary>
            <param name="contents">The data source containing the raw data of the stream.</param>
            <param name="originalBlockIndices">The original block indices that this MSF stream was based on.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStream.Parent">
            <summary>
            Gets the parent MSF file that this stream is embedded in.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStream.Contents">
            <summary>
            Gets or sets the contents of the stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStream.OriginalBlockIndices">
            <summary>
            Gets a collection of block indices that this stream was based of (if available).
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.GetRequiredBlockCount">
            <summary>
            Gets the amount of blocks that is required to store this MSF stream.
            </summary>
            <returns>The number of blocks.</returns>
            <exception cref="T:System.InvalidOperationException">Occurs when the stream is not added to a file.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.GetRequiredBlockCount(System.UInt32)">
            <summary>
            Gets the amount of blocks that is required to store this MSF stream, given the provided block size.
            </summary>
            <param name="blockSize">The block size.</param>
            <returns>The number of blocks.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStream.CreateReader">
            <summary>
            Creates a new binary reader that reads the raw contents of the stream.
            </summary>
            <returns>The constructed binary reader.</returns>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource">
            <summary>
            Implements a data source for a single MSF stream that pulls data from multiple (fragmented) blocks.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.#ctor(System.UInt64,System.UInt32,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Creates a new MSF stream data source.
            </summary>
            <param name="length">The length of the stream.</param>
            <param name="blockSize">The size of an individual block.</param>
            <param name="blocks">The blocks</param>
            <exception cref="T:System.ArgumentException">
            Occurs when the total size of the provided blocks is smaller than
            <paramref name="length"/> * <paramref name="blockSize"/>.
            </exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.#ctor(System.UInt64,System.UInt32,System.Collections.Generic.IEnumerable{AsmResolver.IO.IDataSource})">
            <summary>
            Creates a new MSF stream data source.
            </summary>
            <param name="length">The length of the stream.</param>
            <param name="blockSize">The size of an individual block.</param>
            <param name="blocks">The blocks</param>
            <exception cref="T:System.ArgumentException">
            Occurs when the total size of the provided blocks is smaller than
            <paramref name="length"/> * <paramref name="blockSize"/>.
            </exception>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.BaseAddress">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.Length">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.Item(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.IsValidAddress(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfStreamDataSource.ReadBytes(System.UInt64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock">
            <summary>
            Represents the first block in a Multi-Stream Format (MSF) file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.Signature">
            <summary>
            Gets or sets the magic file signature in the super block, identifying the format version of the MSF file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.BlockSize">
            <summary>
            Gets or sets the size of an individual block in bytes.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.FreeBlockMapIndex">
            <summary>
            Gets or sets the index of the block containing a bitfield indicating which blocks in the entire MSF file are
            in use or not.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.BlockCount">
            <summary>
            Gets or sets the total number of blocks in the MSF file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.DirectoryByteCount">
            <summary>
            Gets or sets the number of bytes of the stream directory in the MSF file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.DirectoryMapIndex">
            <summary>
            Gets or sets the index of the block containing all block indices that make up the stream directory of the MSF
            file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.FromReader(AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single MSF super block from the provided input stream.
            </summary>
            <param name="reader">The input stream.</param>
            <returns>The parsed MSF super block.</returns>
            <exception cref="T:System.BadImageFormatException">Occurs when the super block is malformed.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.GetPhysicalSize">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.MsfSuperBlock.Write(AsmResolver.IO.IBinaryStreamWriter)">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Msf.SerializedMsfFile">
            <summary>
            Provides an implementation for an MSF file that is read from an input file.
            </summary>
            <remarks>
            Currently, this model only supports version 7.0 of the file format.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.SerializedMsfFile.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Interprets an input stream as an MSF file version 7.0.
            </summary>
            <param name="reader">The input stream.</param>
            <exception cref="T:System.BadImageFormatException">Occurs when the MSF file is malformed.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Msf.SerializedMsfFile.GetStreams">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.PdbImage">
            <summary>
            Represents a single Program Debug Database (PDB) image.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.PdbImage.Symbols">
            <summary>
            Gets a collection of all symbols stored in the PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromFile(System.String)">
            <summary>
            Reads a PDB image from the provided input file.
            </summary>
            <param name="path">The path to the PDB file.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromFile(AsmResolver.IO.IInputFile)">
            <summary>
            Reads a PDB image from the provided input file.
            </summary>
            <param name="file">The input file.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromBytes(System.Byte[])">
            <summary>
            Interprets a byte array as a PDB image.
            </summary>
            <param name="data">The data to interpret.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromReader(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads an PDB image from the provided input stream reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromFile(AsmResolver.Symbols.Pdb.Msf.MsfFile)">
            <summary>
            Loads a PDB image from the provided MSF file.
            </summary>
            <param name="file">The MSF file.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.FromFile(AsmResolver.Symbols.Pdb.Msf.MsfFile,AsmResolver.Symbols.Pdb.PdbReaderParameters)">
            <summary>
            Loads a PDB image from the provided MSF file.
            </summary>
            <param name="file">The MSF file.</param>
            <param name="readerParameters">The parameters to use while reading the PDB image.</param>
            <returns>The read PDB image.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.TryGetLeafRecord(System.UInt32,AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf@)">
            <summary>
            Attempts to obtain a type record from the TPI or IPI stream based on its type index.
            </summary>
            <param name="typeIndex">The type index.</param>
            <param name="leaf">The resolved type.</param>
            <returns><c>true</c> if the type was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.GetLeafRecord(System.UInt32)">
            <summary>
            Obtains a type record from the TPI or IPI stream based on its type index.
            </summary>
            <param name="typeIndex">The type index.</param>
            <returns>The resolved type.</returns>
            <exception cref="T:System.ArgumentException">Occurs when the type index is invalid.</exception>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbImage.GetSymbols">
            <summary>
            Obtains a collection of symbols stored in the symbol record stream of the PDB image.
            </summary>
            <returns>The symbols.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.PdbImage.Symbols"/> property.
            </remarks>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.PdbReaderContext">
            <summary>
            Provides a context in which a PDB image reader exists in. This includes the PDB image as well as reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbReaderContext.#ctor(AsmResolver.Symbols.Pdb.SerializedPdbImage,AsmResolver.Symbols.Pdb.PdbReaderParameters)">
            <summary>
            Creates a new PDB reader context.
            </summary>
            <param name="parentImage">The image for which the data is to be read.</param>
            <param name="parameters">The parameters used while reading the PDB image.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.PdbReaderContext.ParentImage">
            <summary>
            Gets the image for which the data is read.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.PdbReaderContext.Parameters">
            <summary>
            Gets the parameters used for reading the data.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.PdbReaderParameters">
            <summary>
            Provides parameters for configuring the reading process of a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbReaderParameters.#ctor">
            <summary>
            Creates new PDB reader parameters.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.PdbReaderParameters.#ctor(AsmResolver.IErrorListener)">
            <summary>
            Creates new PDB reader parameters with the provided error listener object.
            </summary>
            <param name="errorListener">The object used for receiving parser errors.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.PdbReaderParameters.ErrorListener">
            <summary>
            Gets or sets the object responsible for receiving and processing parser errors.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.CodeViewSymbol">
            <summary>
            Represents a single symbol record within the symbol record stream of a PDB file.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.CodeViewSymbol.CodeViewSymbolType">
            <summary>
            Gets the type of symbol this record encodes.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.CodeViewSymbol.FromReader(AsmResolver.Symbols.Pdb.PdbReaderContext,AsmResolver.IO.BinaryStreamReader@)">
            <summary>
            Reads a single symbol record from the input stream.
            </summary>
            <param name="context">The reading context in which the symbol is situated in.</param>
            <param name="reader">The input stream.</param>
            <returns>The read symbol.</returns>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType">
            <summary>
            Provides members defining all symbol record types that can be stored in a PDB symbol stream.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Compile">
            <summary>
            Indicates the symbol is a Compile flags symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Register16T">
            <summary>
            Indicates the symbol is a Register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Constant16T">
            <summary>
            Indicates the symbol is a constant symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Udt16T">
            <summary>
            Indicates the symbol is a User defined type
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.SSearch">
            <summary>
            Indicates the symbol is a Start Search
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.End">
            <summary>
            Indicates the symbol is a Block, procedure, "with" or thunk end
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Skip">
            <summary>
            Indicates the symbol is a Reserve symbol space in $$Symbols table
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CVReserve">
            <summary>
            Indicates the symbol is a Reserved symbol for CV internal use
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ObjnameSt">
            <summary>
            Indicates the symbol is a path to object file name
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.EndArg">
            <summary>
            Indicates the symbol is a end of argument/return list
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CobolUdt16T">
            <summary>
            Indicates the symbol is a special UDT for cobol that does not symbol pack
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManyReg16T">
            <summary>
            Indicates the symbol is a multiple register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Return">
            <summary>
            Indicates the symbol is a return description symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.EntryThis">
            <summary>
            Indicates the symbol is a description of this pointer on entry
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.BPRel16">
            <summary>
            Indicates the symbol is a BP-relative
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Ldata16">
            <summary>
            Indicates the symbol is a Module-local symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GData16">
            <summary>
            Indicates the symbol is a Global data symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Pub16">
            <summary>
            Indicates the symbol is a a public symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProc16">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProc16">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Thunk16">
            <summary>
            Indicates the symbol is a Thunk Start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Block16">
            <summary>
            Indicates the symbol is a block start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.With16">
            <summary>
            Indicates the symbol is a with start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Label16">
            <summary>
            Indicates the symbol is a code label
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CexModel16">
            <summary>
            Indicates the symbol is a change execution model
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.VFTable16">
            <summary>
            Indicates the symbol is a address of virtual function table
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RegRel16">
            <summary>
            Indicates the symbol is a register relative address
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.BBRel3216T">
            <summary>
            Indicates the symbol is a BP-relative
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LData3216T">
            <summary>
            Indicates the symbol is a Module-local symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GData3216T">
            <summary>
            Indicates the symbol is a Global data symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Pub3216T">
            <summary>
            Indicates the symbol is a a public symbol (CV internal reserved)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProc3216T">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProc3216T">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Thunk32St">
            <summary>
            Indicates the symbol is a Thunk Start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Block32St">
            <summary>
            Indicates the symbol is a block start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.With32St">
            <summary>
            Indicates the symbol is a with start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Label32St">
            <summary>
            Indicates the symbol is a code label
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CexModel32">
            <summary>
            Indicates the symbol is a change execution model
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.VFTable3216T">
            <summary>
            Indicates the symbol is a address of virtual function table
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RegRel3216T">
            <summary>
            Indicates the symbol is a register relative address
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LThread3216T">
            <summary>
            Indicates the symbol is a local thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GThread3216T">
            <summary>
            Indicates the symbol is a global thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.SLink32">
            <summary>
            Indicates the symbol is a static link for MIPS EH implementation
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcMip16T">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProcMip16T">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ProcRefSt">
            <summary>
            Indicates the symbol is a Reference to a procedure
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DataRefSt">
            <summary>
            Indicates the symbol is a Reference to data
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Align">
            <summary>
            Indicates the symbol is a Used for page alignment of symbols
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcRefSt">
            <summary>
            Indicates the symbol is a Local Reference to a procedure
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Oem">
            <summary>
            Indicates the symbol is a OEM defined symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RegisterSt">
            <summary>
            Indicates the symbol is a Register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ConstantSt">
            <summary>
            Indicates the symbol is a constant symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.UdtSt">
            <summary>
            Indicates the symbol is a User defined type
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CobolUdtSt">
            <summary>
            Indicates the symbol is a special UDT for cobol that does not symbol pack
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManyRegSt">
            <summary>
            Indicates the symbol is a multiple register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.BBRel32St">
            <summary>
            Indicates the symbol is a BP-relative
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LData32St">
            <summary>
            Indicates the symbol is a Module-local symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GData32St">
            <summary>
            Indicates the symbol is a Global data symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Pub32St">
            <summary>
            Indicates the symbol is a a public symbol (CV internal reserved)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProc32St">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProc32St">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.VFTable32">
            <summary>
            Indicates the symbol is a address of virtual function table
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RegRel32St">
            <summary>
            Indicates the symbol is a register relative address
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LThread32St">
            <summary>
            Indicates the symbol is a local thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GThread32St">
            <summary>
            Indicates the symbol is a global thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcMipSt">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProcMipSt">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.FrameProc">
            <summary>
            Indicates the symbol is a extra frame and proc information
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Compile2St">
            <summary>
            Indicates the symbol is a extended compile flags and info
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManyReg2St">
            <summary>
            Indicates the symbol is a multiple register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcIa64St">
            <summary>
            Indicates the symbol is a Local procedure start (IA64)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProcIa64St">
            <summary>
            Indicates the symbol is a Global procedure start (IA64)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LocalSlotSt">
            <summary>
            Indicates the symbol is a local IL sym with field for local slot index
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ParamSlotSt">
            <summary>
            Indicates the symbol is a local IL sym with field for parameter slot index
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Annotation">
            <summary>
            Indicates the symbol is a Annotation string literals
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GManProcSt">
            <summary>
            Indicates the symbol is a Global proc
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LManProcSt">
            <summary>
            Indicates the symbol is a Local proc
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Reserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Reserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RESERVED4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManTypRef">
            <summary>
            Indicates the symbol is a Index for type referenced by name from metadata
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.UNamespaceSt">
            <summary>
            Indicates the symbol is a Using namespace
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.StMax">
            <summary>
            Indicates the symbol is a starting point for SZ name symbols
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ObjName">
            <summary>
            Indicates the symbol is a path to object file name
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Thunk32">
            <summary>
            Indicates the symbol is a Thunk Start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Block32">
            <summary>
            Indicates the symbol is a block start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.With32">
            <summary>
            Indicates the symbol is a with start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Label32">
            <summary>
            Indicates the symbol is a code label
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Register">
            <summary>
            Indicates the symbol is a Register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Constant">
            <summary>
            Indicates the symbol is a constant symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Udt">
            <summary>
            Indicates the symbol is a User defined type
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CobolUdt">
            <summary>
            Indicates the symbol is a special UDT for cobol that does not symbol pack
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManyReg">
            <summary>
            Indicates the symbol is a multiple register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.BBRel32">
            <summary>
            Indicates the symbol is a BP-relative
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LData32">
            <summary>
            Indicates the symbol is a Module-local symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GData32">
            <summary>
            Indicates the symbol is a Global data symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Pub32">
            <summary>
            Indicates the symbol is a a public symbol (CV internal reserved)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProc32">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProc32">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RegRel32">
            <summary>
            Indicates the symbol is a register relative address
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LThread32">
            <summary>
            Indicates the symbol is a local thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GThread32">
            <summary>
            Indicates the symbol is a global thread storage
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcMips">
            <summary>
            Indicates the symbol is a Local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProcMips">
            <summary>
            Indicates the symbol is a Global procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Compile2">
            <summary>
            Indicates the symbol is a extended compile flags and info
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManyReg2">
            <summary>
            Indicates the symbol is a multiple register variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LprocIa64">
            <summary>
            Indicates the symbol is a Local procedure start (IA64)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GProcIa64">
            <summary>
            Indicates the symbol is a Global procedure start (IA64)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LocalSlot">
            <summary>
            Indicates the symbol is a local IL sym with field for local slot index
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Slot">
            <summary>
            Indicates the symbol is a alias for LOCALSLOT
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ParamSlot">
            <summary>
            Indicates the symbol is a local IL sym with field for parameter slot index
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.UNamespace">
            <summary>
            Indicates the symbol is a Using namespace
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ProcRef">
            <summary>
            Indicates the symbol is a Reference to a procedure
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DataRef">
            <summary>
            Indicates the symbol is a Reference to data
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProcRef">
            <summary>
            Indicates the symbol is a Local Reference to a procedure
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.AnnotationRef">
            <summary>
            Indicates the symbol is a Reference to an ANNOTATION symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.TokenRef">
            <summary>
            Indicates the symbol is a Reference to one of the many MANPROCSYM's
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.GManProc">
            <summary>
            Indicates the symbol is a Global proc
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LManProc">
            <summary>
            Indicates the symbol is a Local proc
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Trampoline">
            <summary>
            Indicates the symbol is a trampoline thunks
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ManConstant">
            <summary>
            Indicates the symbol is a constants with metadata type info
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.AttrFrameRel">
            <summary>
            Indicates the symbol is a relative to virtual frame ptr
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.AttrRegister">
            <summary>
            Indicates the symbol is a stored in a register
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.AttrRegRel">
            <summary>
            Indicates the symbol is a relative to register (alternate frame ptr)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.AttrManyReg">
            <summary>
            Indicates the symbol is a stored in >1 register
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Local2005">
            <summary>
            Indicates the symbol is a defines a local symbol in optimized code
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRange2005">
            <summary>
            Indicates the symbol is a defines a single range of addresses in which symbol can be evaluated
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRange22005">
            <summary>
            Indicates the symbol is a defines ranges of addresses in which symbol can be evaluated
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Section">
            <summary>
            Indicates the symbol is a A COFF section in a PE executable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CoffGroup">
            <summary>
            Indicates the symbol is a A COFF group
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Export">
            <summary>
            Indicates the symbol is a A export
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.CallSiteInfo">
            <summary>
            Indicates the symbol is a Indirect call site information
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.FrameCookie">
            <summary>
            Indicates the symbol is a Security cookie information
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Discarded">
            <summary>
            Indicates the symbol is a Discarded by LINK /OPT:REF (experimental, see richards)
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Compile3">
            <summary>
            Indicates the symbol is a Replacement for COMPILE2
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.EnvBlock">
            <summary>
            Indicates the symbol is a Environment block split off from COMPILE2
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.Local">
            <summary>
            Indicates the symbol is a defines a local symbol in optimized code
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRange">
            <summary>
            Indicates the symbol is a defines a single range of addresses in which symbol can be evaluated
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeSubField">
            <summary>
            Indicates the symbol is a ranges for a subfield
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeRegister">
            <summary>
            Indicates the symbol is a ranges for en-registered symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeFramePointerRel">
            <summary>
            Indicates the symbol is a range for stack symbol.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeSubFieldRegister">
            <summary>
            Indicates the symbol is a ranges for en-registered field of symbol
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeFramePointerRelFullScope">
            <summary>
            Indicates the symbol is a range for stack symbol span valid full scope of function body, gap might apply.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeRegisterRel">
            <summary>
            Indicates the symbol is a range for symbol address as register + offset.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.BuildInfo">
            <summary>
            Indicates the symbol is a build information.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.InlineSite">
            <summary>
            Indicates the symbol is a inlined function callsite.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LocalDpcGroupShared">
            <summary>
            Indicates the symbol is a DPC groupshared variable
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.LProc32Dpc">
            <summary>
            Indicates the symbol is a DPC local procedure start
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DefRangeDpcPtrTag">
            <summary>
            Indicates the symbol is a DPC pointer tag definition range
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.DpcSymTagMap">
            <summary>
            Indicates the symbol is a DPC pointer tag value to symbol record map
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.InlineSite2">
            <summary>
            Indicates the symbol is a extended inline site information
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.HeapAllocSite">
            <summary>
            Indicates the symbol is a heap allocation site
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.ModTypeRef">
            <summary>
            Indicates the symbol is a only generated at link time
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.RefMiniPdb">
            <summary>
            Indicates the symbol is a only generated at link time for mini PDB
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType.PdbMap">
            <summary>
            Indicates the symbol is a only generated at link time for mini PDB
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.ConstantSymbol">
            <summary>
            Represents a single constant symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.#ctor">
            <summary>
            Initializes a named constant
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord,System.UInt16)">
            <summary>
            Defines a new named constant.
            </summary>
            <param name="name">The name of the type.</param>
            <param name="type">The type.</param>
            <param name="value">The value to assign to the constant.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.CodeViewSymbolType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.Type">
            <summary>
            Gets or sets the value type of the constant.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.Value">
            <summary>
            Gets or sets the numerical value assigned to the constant.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.Name">
            <summary>
            Gets or sets the name of the constant.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.GetName">
            <summary>
            Obtains the name of the constant.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.GetConstantType">
            <summary>
            Obtains the value type of the constant.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.Type"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ConstantSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol">
            <summary>
            Represents a procedure reference symbol stored in a PDB symbol stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.#ctor(System.Boolean)">
            <summary>
            Initializes a new empty symbol.
            </summary>
            <param name="local">If true, this represents a local procedure reference.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.#ctor(System.UInt32,System.UInt32,System.UInt16,AsmResolver.Utf8String,System.Boolean)">
            <summary>
            Creates a new symbol.
            </summary>
            <param name="checksum">The checksum of the referenced symbol name.</param>
            <param name="offset">The offset within the segment the symbol starts at.</param>
            <param name="module">Index of the module that contains this procedure record.</param>
            <param name="name">The name of the symbol.</param>
            <param name="local">If true, this represents a local procedure reference.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.CodeViewSymbolType">
            <inheritdoc/>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.IsLocal">
            <summary>
            Is the symbol a Local Procedure Reference?
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.Checksum">
            <summary>
            Gets the checksum of the referenced symbol name. The checksum used is the
            one specified in the header of the global symbols stream or static symbols stream.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.Offset">
            <summary>
            Gets the offset of the procedure symbol record from the beginning of the
            $$SYMBOL table for the module.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.Module">
            <summary>
            Index of the module that contains this procedure record.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.Name">
            <summary>
            Gets or sets the name of the symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.GetName">
            <summary>
            Obtains the name of the symbol.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.PublicSymbol">
            <summary>
            Represents a public symbol stored in a PDB symbol stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.PublicSymbol.#ctor">
            <summary>
            Initializes a new empty public symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.PublicSymbol.#ctor(System.UInt16,System.UInt32,AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes)">
            <summary>
            Creates a new public symbol.
            </summary>
            <param name="segment">The segment index.</param>
            <param name="offset">The offset within the segment the symbol starts at.</param>
            <param name="name">The name of the symbol.</param>
            <param name="attributes">The attributes associated to the symbol.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.CodeViewSymbolType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.Segment">
            <summary>
            Gets or sets the file segment index this symbol is located in.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.Offset">
            <summary>
            Gets or sets the offset within the file that this symbol is defined at.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.Attributes">
            <summary>
            Gets or sets attributes associated to the public symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.IsCode">
            <summary>
            Gets or sets a value indicating whether the symbol is a code symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.IsFunction">
            <summary>
            Gets or sets a value indicating whether the symbol is a function symbol.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.IsManaged">
            <summary>
            Gets or sets a value indicating whether the symbol involves managed code.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.IsMsil">
            <summary>
            Gets or sets a value indicating whether the symbol involves MSIL code.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.Name">
            <summary>
            Gets or sets the name of the symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.PublicSymbol.GetName">
            <summary>
            Obtains the name of the public symbol.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.PublicSymbol.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.PublicSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes">
            <summary>
            Provides members defining all flags that can be associated to a public symbol.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes.None">
            <summary>
            Indicates no flags are assigned to the symbol.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes.Code">
            <summary>
            Indicates the symbol is a code symbol.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes.Function">
            <summary>
            Indicates the symbol is a function.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes.Managed">
            <summary>
            Indicates the symbol involves managed code.
            </summary>
        </member>
        <member name="F:AsmResolver.Symbols.Pdb.Records.PublicSymbolAttributes.Msil">
            <summary>
            Indicates the symbol involves MSIL code.
            </summary>
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedConstantSymbol">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Records.ConstantSymbol"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedConstantSymbol.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a constant symbol from the provided input stream.
            </summary>
            <param name="context">The reading context in which the symbol is situated in.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedConstantSymbol.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedConstantSymbol.GetConstantType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedProcedureReferenceSymbol">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Records.ProcedureReferenceSymbol"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedProcedureReferenceSymbol.#ctor(AsmResolver.IO.BinaryStreamReader,System.Boolean)">
            <summary>
            Reads a public symbol from the provided input stream.
            </summary>
            <param name="reader">The input stream to read from.</param>
            <param name="local">If true, this represents a local procedure reference.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedProcedureReferenceSymbol.GetName">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedPublicSymbol">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Records.PublicSymbol"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedPublicSymbol.#ctor(AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a public symbol from the provided input stream.
            </summary>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedPublicSymbol.GetName">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedUserDefinedTypeSymbol">
            <summary>
            Represents a lazily initialized implementation of <see cref="T:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol"/> that is read from a PDB image.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedUserDefinedTypeSymbol.#ctor(AsmResolver.Symbols.Pdb.PdbReaderContext,AsmResolver.IO.BinaryStreamReader)">
            <summary>
            Reads a user-defined type symbol from the provided input stream.
            </summary>
            <param name="context">The reading context in which the symbol is situated in.</param>
            <param name="reader">The input stream to read from.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedUserDefinedTypeSymbol.GetName">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.Serialized.SerializedUserDefinedTypeSymbol.GetSymbolType">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.UnknownSymbol">
            <summary>
            Represents a symbol record for which the format is unknown or unsupported.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UnknownSymbol.#ctor(AsmResolver.Symbols.Pdb.Records.CodeViewSymbolType,System.Byte[])">
            <summary>
            Creates a new unknown symbol record.
            </summary>
            <param name="codeViewSymbolType">The type of symbol.</param>
            <param name="data">The raw data stored in the record.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.UnknownSymbol.CodeViewSymbolType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.UnknownSymbol.Data">
            <summary>
            Gets the raw data stored in the record.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UnknownSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol">
            <summary>
            Represents a user-defined type symbol in a PDB symbol stream, mapping a symbol to a type in the TPI stream.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.#ctor">
            <summary>
            Initializes a new empty user-defined type symbol.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.#ctor(AsmResolver.Utf8String,AsmResolver.Symbols.Pdb.Leaves.CodeViewTypeRecord)">
            <summary>
            Defines a new user-defined type.
            </summary>
            <param name="name">The name of the type.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.CodeViewSymbolType">
            <inheritdoc />
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
        </member>
        <member name="P:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.Type">
            <summary>
            Gets or sets the index associated to the type.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.GetName">
            <summary>
            Obtains the new name of the type.
            </summary>
            <returns>The name.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.Name"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.GetSymbolType">
            <summary>
            Obtains the type that is referenced by this symbol.
            </summary>
            <returns>The type.</returns>
            <remarks>
            This method is called upon initialization of the <see cref="P:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.Type"/> property.
            </remarks>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.Records.UserDefinedTypeSymbol.ToString">
            <inheritdoc />
        </member>
        <member name="T:AsmResolver.Symbols.Pdb.SerializedPdbImage">
            <summary>
            Provides an implementation for a PDB image that is read from an input MSF file.
            </summary>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.SerializedPdbImage.#ctor(AsmResolver.Symbols.Pdb.Msf.MsfFile,AsmResolver.Symbols.Pdb.PdbReaderParameters)">
            <summary>
            Interprets a PDB image from the provided MSF file.
            </summary>
            <param name="file">The MSF file to read from.</param>
            <param name="readerParameters">The parameters to use while reading the PDB image.</param>
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.SerializedPdbImage.TryGetLeafRecord(System.UInt32,AsmResolver.Symbols.Pdb.Leaves.CodeViewLeaf@)">
            <inheritdoc />
        </member>
        <member name="M:AsmResolver.Symbols.Pdb.SerializedPdbImage.GetSymbols">
            <inheritdoc />
        </member>
    </members>
</doc>
